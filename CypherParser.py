# Generated from Cypher.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0099")
        buf.write("\u0893\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\3\2\5\2\u0128\n\2\3\2\3\2\3\2")
        buf.write("\5\2\u012d\n\2\3\2\5\2\u0130\n\2\3\2\5\2\u0133\n\2\3\2")
        buf.write("\3\2\3\3\3\3\5\3\u0139\n\3\7\3\u013b\n\3\f\3\16\3\u013e")
        buf.write("\13\3\3\4\3\4\3\4\5\4\u0143\n\4\3\5\3\5\3\5\5\5\u0148")
        buf.write("\n\5\3\5\3\5\7\5\u014c\n\5\f\5\16\5\u014f\13\5\3\6\3\6")
        buf.write("\3\7\3\7\3\b\3\b\3\t\3\t\5\t\u0159\n\t\3\t\3\t\5\t\u015d")
        buf.write("\n\t\3\t\3\t\3\n\3\n\5\n\u0163\n\n\3\13\3\13\3\13\5\13")
        buf.write("\u0168\n\13\3\f\3\f\5\f\u016c\n\f\3\f\7\f\u016f\n\f\f")
        buf.write("\f\16\f\u0172\13\f\3\r\3\r\5\r\u0176\n\r\3\r\3\r\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0181\n\16\3\17\3")
        buf.write("\17\3\17\3\20\3\20\3\20\3\20\5\20\u018a\n\20\3\20\3\20")
        buf.write("\3\20\5\20\u018f\n\20\3\20\5\20\u0192\n\20\3\21\3\21\5")
        buf.write("\21\u0196\n\21\3\22\3\22\5\22\u019a\n\22\7\22\u019c\n")
        buf.write("\22\f\22\16\22\u019f\13\22\3\22\3\22\3\22\5\22\u01a4\n")
        buf.write("\22\7\22\u01a6\n\22\f\22\16\22\u01a9\13\22\3\22\3\22\5")
        buf.write("\22\u01ad\n\22\3\22\7\22\u01b0\n\22\f\22\16\22\u01b3\13")
        buf.write("\22\3\22\5\22\u01b6\n\22\3\22\5\22\u01b9\n\22\5\22\u01bb")
        buf.write("\n\22\3\23\3\23\5\23\u01bf\n\23\7\23\u01c1\n\23\f\23\16")
        buf.write("\23\u01c4\13\23\3\23\3\23\5\23\u01c8\n\23\7\23\u01ca\n")
        buf.write("\23\f\23\16\23\u01cd\13\23\3\23\3\23\5\23\u01d1\n\23\6")
        buf.write("\23\u01d3\n\23\r\23\16\23\u01d4\3\23\3\23\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\5\24\u01e0\n\24\3\25\3\25\3\25")
        buf.write("\3\25\3\25\5\25\u01e7\n\25\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\5\26\u01f1\n\26\3\27\3\27\3\27\3\27\3\30")
        buf.write("\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32")
        buf.write("\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\35\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\5\37\u0217")
        buf.write("\n\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \5 \u0222\n")
        buf.write(" \3 \3 \3 \3 \3 \5 \u0229\n \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write("!\3!\3!\3!\5!\u0237\n!\3!\3!\3!\3!\3!\5!\u023e\n!\3!\3")
        buf.write("!\3!\3!\5!\u0244\n!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\5\"\u024e")
        buf.write("\n\"\3\"\3\"\5\"\u0252\n\"\3\"\3\"\3\"\3\"\5\"\u0258\n")
        buf.write("\"\3\"\3\"\3\"\3\"\3#\3#\5#\u0260\n#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\5#\u026b\n#\3#\3#\3#\3#\5#\u0271\n#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\5#\u027d\n#\3#\3#\3#\3#\5#\u0283")
        buf.write("\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u028f\n#\3#\3#\5")
        buf.write("#\u0293\n#\3$\3$\3$\3$\3$\3$\3$\3$\5$\u029d\n$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u02aa\n$\3%\3%\5%\u02ae\n")
        buf.write("%\3%\3%\5%\u02b2\n%\3%\3%\7%\u02b6\n%\f%\16%\u02b9\13")
        buf.write("%\3%\5%\u02bc\n%\3%\5%\u02bf\n%\3&\3&\5&\u02c3\n&\3&\3")
        buf.write("&\3&\3&\3&\3&\3\'\3\'\5\'\u02cd\n\'\3\'\3\'\3\'\7\'\u02d2")
        buf.write("\n\'\f\'\16\'\u02d5\13\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\5(\u02e1\n(\3)\3)\5)\u02e5\n)\3)\3)\3*\3*\3*\3*\5*\u02ed")
        buf.write("\n*\3*\3*\3+\3+\5+\u02f3\n+\3+\3+\5+\u02f7\n+\3+\3+\5")
        buf.write("+\u02fb\n+\3+\7+\u02fe\n+\f+\16+\u0301\13+\3,\3,\5,\u0305")
        buf.write("\n,\3,\3,\5,\u0309\n,\3,\3,\3,\3,\5,\u030f\n,\3,\3,\5")
        buf.write(",\u0313\n,\3,\3,\3,\3,\5,\u0319\n,\3,\3,\5,\u031d\n,\3")
        buf.write(",\3,\3,\3,\5,\u0323\n,\3,\3,\5,\u0327\n,\3-\3-\5-\u032b")
        buf.write("\n-\3-\3-\5-\u032f\n-\3-\3-\5-\u0333\n-\3-\3-\5-\u0337")
        buf.write("\n-\3-\7-\u033a\n-\f-\16-\u033d\13-\3.\3.\3.\3.\5.\u0343")
        buf.write("\n.\3.\3.\5.\u0347\n.\3.\7.\u034a\n.\f.\16.\u034d\13.")
        buf.write("\3/\3/\3/\3/\5/\u0353\n/\3\60\3\60\5\60\u0357\n\60\3\60")
        buf.write("\3\60\5\60\u035b\n\60\3\60\3\60\3\60\3\60\3\60\3\60\5")
        buf.write("\60\u0363\n\60\3\60\3\60\3\60\6\60\u0368\n\60\r\60\16")
        buf.write("\60\u0369\3\60\5\60\u036d\n\60\3\60\3\60\3\61\3\61\3\61")
        buf.write("\3\61\5\61\u0375\n\61\3\61\3\61\3\61\5\61\u037a\n\61\3")
        buf.write("\62\3\62\3\62\3\62\5\62\u0380\n\62\3\62\5\62\u0383\n\62")
        buf.write("\3\62\3\62\3\62\3\62\5\62\u0389\n\62\5\62\u038b\n\62\3")
        buf.write("\63\3\63\5\63\u038f\n\63\3\63\3\63\5\63\u0393\n\63\3\63")
        buf.write("\7\63\u0396\n\63\f\63\16\63\u0399\13\63\3\63\5\63\u039c")
        buf.write("\n\63\3\63\5\63\u039f\n\63\3\64\3\64\3\64\3\64\3\64\5")
        buf.write("\64\u03a6\n\64\3\64\3\64\3\65\3\65\3\65\5\65\u03ad\n\65")
        buf.write("\3\65\5\65\u03b0\n\65\3\66\3\66\3\66\3\67\5\67\u03b6\n")
        buf.write("\67\3\67\5\67\u03b9\n\67\3\67\3\67\3\67\3\67\5\67\u03bf")
        buf.write("\n\67\3\67\3\67\5\67\u03c3\n\67\3\67\3\67\5\67\u03c7\n")
        buf.write("\67\38\38\58\u03cb\n8\38\38\58\u03cf\n8\38\78\u03d2\n")
        buf.write("8\f8\168\u03d5\138\38\38\58\u03d9\n8\38\38\58\u03dd\n")
        buf.write("8\38\78\u03e0\n8\f8\168\u03e3\138\58\u03e5\n8\39\39\3")
        buf.write("9\39\39\39\39\59\u03ee\n9\3:\3:\3:\3:\3:\3:\3:\5:\u03f7")
        buf.write("\n:\3:\7:\u03fa\n:\f:\16:\u03fd\13:\3;\3;\3;\3;\3<\3<")
        buf.write("\3<\3<\3=\3=\5=\u0409\n=\3=\5=\u040c\n=\3>\5>\u040f\n")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\5>\u0423\n>\3>\3>\5>\u0427\n>\3>\7>\u042a\n>\f>\16>")
        buf.write("\u042d\13>\3>\3>\3>\3>\3>\3>\3>\5>\u0436\n>\3?\3?\3?\3")
        buf.write("?\5?\u043c\n?\3?\3?\5?\u0440\n?\3?\7?\u0443\n?\f?\16?")
        buf.write("\u0446\13?\3?\5?\u0449\n?\3@\3@\5@\u044d\n@\3@\3@\5@\u0451")
        buf.write("\n@\3@\3@\3A\3A\5A\u0457\nA\3B\3B\5B\u045b\nB\3B\3B\3")
        buf.write("B\5B\u0460\nB\3C\3C\3C\3C\5C\u0466\nC\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\5D\u046f\nD\3D\3D\3E\3E\3E\3E\3E\5E\u0478\nE\3E\3")
        buf.write("E\3F\3F\3F\3F\5F\u0480\nF\3F\3F\3G\3G\5G\u0486\nG\3G\3")
        buf.write("G\5G\u048a\nG\3G\7G\u048d\nG\fG\16G\u0490\13G\3H\3H\3")
        buf.write("H\3H\3I\3I\5I\u0498\nI\3I\3I\5I\u049c\nI\3I\7I\u049f\n")
        buf.write("I\fI\16I\u04a2\13I\3J\3J\5J\u04a6\nJ\3J\3J\5J\u04aa\n")
        buf.write("J\3J\3J\3J\5J\u04af\nJ\3K\3K\5K\u04b3\nK\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\3L\5L\u04bf\nL\3M\3M\5M\u04c3\nM\3M\7M\u04c6")
        buf.write("\nM\fM\16M\u04c9\13M\3M\3M\3M\3M\5M\u04cf\nM\3N\3N\5N")
        buf.write("\u04d3\nN\3N\6N\u04d6\nN\rN\16N\u04d7\3O\3O\5O\u04dc\n")
        buf.write("O\3O\3O\5O\u04e0\nO\5O\u04e2\nO\3O\3O\5O\u04e6\nO\5O\u04e8")
        buf.write("\nO\3O\3O\5O\u04ec\nO\5O\u04ee\nO\3O\3O\3P\3P\5P\u04f4")
        buf.write("\nP\3P\3P\3Q\3Q\5Q\u04fa\nQ\3Q\3Q\5Q\u04fe\nQ\3Q\5Q\u0501")
        buf.write("\nQ\3Q\5Q\u0504\nQ\3Q\3Q\5Q\u0508\nQ\3Q\3Q\3Q\3Q\5Q\u050e")
        buf.write("\nQ\3Q\3Q\5Q\u0512\nQ\3Q\5Q\u0515\nQ\3Q\5Q\u0518\nQ\3")
        buf.write("Q\3Q\3Q\3Q\5Q\u051e\nQ\3Q\5Q\u0521\nQ\3Q\5Q\u0524\nQ\3")
        buf.write("Q\3Q\5Q\u0528\nQ\3Q\3Q\3Q\3Q\5Q\u052e\nQ\3Q\5Q\u0531\n")
        buf.write("Q\3Q\5Q\u0534\nQ\3Q\3Q\5Q\u0538\nQ\3R\3R\5R\u053c\nR\3")
        buf.write("R\3R\5R\u0540\nR\5R\u0542\nR\3R\3R\5R\u0546\nR\5R\u0548")
        buf.write("\nR\3R\5R\u054b\nR\3R\3R\5R\u054f\nR\5R\u0551\nR\3R\3")
        buf.write("R\3S\3S\3S\5S\u0558\nS\3T\3T\5T\u055c\nT\3T\3T\3U\3U\5")
        buf.write("U\u0562\nU\3U\3U\5U\u0566\nU\3U\3U\5U\u056a\nU\3U\5U\u056d")
        buf.write("\nU\3U\7U\u0570\nU\fU\16U\u0573\13U\3V\3V\5V\u0577\nV")
        buf.write("\3V\7V\u057a\nV\fV\16V\u057d\13V\3W\3W\5W\u0581\nW\3W")
        buf.write("\3W\3X\3X\5X\u0587\nX\3X\3X\5X\u058b\nX\5X\u058d\nX\3")
        buf.write("X\3X\5X\u0591\nX\3X\3X\5X\u0595\nX\5X\u0597\nX\5X\u0599")
        buf.write("\nX\3Y\3Y\3Z\3Z\3[\3[\5[\u05a1\n[\3[\6[\u05a4\n[\r[\16")
        buf.write("[\u05a5\3\\\3\\\3]\3]\3]\3]\3]\7]\u05af\n]\f]\16]\u05b2")
        buf.write("\13]\3^\3^\3^\3^\3^\7^\u05b9\n^\f^\16^\u05bc\13^\3_\3")
        buf.write("_\3_\3_\3_\7_\u05c3\n_\f_\16_\u05c6\13_\3`\3`\5`\u05ca")
        buf.write("\n`\7`\u05cc\n`\f`\16`\u05cf\13`\3`\3`\3a\3a\5a\u05d5")
        buf.write("\na\3a\7a\u05d8\na\fa\16a\u05db\13a\3b\3b\5b\u05df\nb")
        buf.write("\3b\3b\3b\5b\u05e4\nb\3b\3b\3b\5b\u05e9\nb\3b\3b\3b\5")
        buf.write("b\u05ee\nb\3b\3b\3b\5b\u05f3\nb\3b\3b\3b\5b\u05f8\nb\3")
        buf.write("b\5b\u05fb\nb\3c\3c\3c\3c\7c\u0601\nc\fc\16c\u0604\13")
        buf.write("c\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0611\nd\3d\5d\u0614")
        buf.write("\nd\3d\3d\3e\3e\3e\5e\u061b\ne\3e\3e\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\3f\5f\u0629\nf\3g\5g\u062c\ng\3g\3g\3h\3h\5")
        buf.write("h\u0632\nh\3h\3h\5h\u0636\nh\3h\3h\5h\u063a\nh\3h\3h\5")
        buf.write("h\u063e\nh\3h\7h\u0641\nh\fh\16h\u0644\13h\3i\3i\5i\u0648")
        buf.write("\ni\3i\3i\5i\u064c\ni\3i\3i\5i\u0650\ni\3i\3i\5i\u0654")
        buf.write("\ni\3i\3i\5i\u0658\ni\3i\3i\5i\u065c\ni\3i\7i\u065f\n")
        buf.write("i\fi\16i\u0662\13i\3j\3j\5j\u0666\nj\3j\3j\5j\u066a\n")
        buf.write("j\3j\7j\u066d\nj\fj\16j\u0670\13j\3k\3k\3k\5k\u0675\n")
        buf.write("k\3k\5k\u0678\nk\3l\3l\5l\u067c\nl\3l\3l\5l\u0680\nl\3")
        buf.write("l\7l\u0683\nl\fl\16l\u0686\13l\3l\5l\u0689\nl\3l\5l\u068c")
        buf.write("\nl\3m\3m\3m\3m\3m\3m\5m\u0694\nm\3m\3m\5m\u0698\nm\3")
        buf.write("m\5m\u069b\nm\3n\3n\5n\u069f\nn\3n\3n\3o\3o\3o\3o\3o\3")
        buf.write("o\5o\u06a9\no\3o\3o\5o\u06ad\no\3o\3o\5o\u06b1\no\3o\3")
        buf.write("o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\5o\u06bf\no\3p\3p\5p\u06c3")
        buf.write("\np\3p\6p\u06c6\np\rp\16p\u06c7\3p\3p\5p\u06cc\np\3p\3")
        buf.write("p\5p\u06d0\np\3p\6p\u06d3\np\rp\16p\u06d4\5p\u06d7\np")
        buf.write("\3p\5p\u06da\np\3p\3p\5p\u06de\np\3p\5p\u06e1\np\3p\5")
        buf.write("p\u06e4\np\3p\3p\3q\3q\5q\u06ea\nq\3q\3q\5q\u06ee\nq\3")
        buf.write("q\3q\5q\u06f2\nq\3q\3q\3r\3r\5r\u06f8\nr\3r\3r\5r\u06fc")
        buf.write("\nr\3r\3r\5r\u0700\nr\3r\5r\u0703\nr\3r\5r\u0706\nr\3")
        buf.write("r\3r\3s\3s\5s\u070c\ns\3s\3s\5s\u0710\ns\3s\3s\5s\u0714")
        buf.write("\ns\5s\u0716\ns\3s\3s\5s\u071a\ns\3s\3s\5s\u071e\ns\5")
        buf.write("s\u0720\ns\3s\3s\5s\u0724\ns\3s\3s\5s\u0728\ns\3s\3s\3")
        buf.write("t\3t\5t\u072e\nt\3t\3t\5t\u0732\nt\3t\3t\5t\u0736\nt\3")
        buf.write("t\3t\3t\3t\5t\u073c\nt\3t\3t\5t\u0740\nt\3t\3t\5t\u0744")
        buf.write("\nt\3t\5t\u0747\nt\3t\3t\5t\u074b\nt\3t\3t\5t\u074f\n")
        buf.write("t\3u\3u\5u\u0753\nu\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3v\3")
        buf.write("v\5v\u0761\nv\3v\3v\5v\u0765\nv\3v\3v\5v\u0769\nv\3v\3")
        buf.write("v\3v\3v\5v\u076f\nv\3v\3v\5v\u0773\nv\3v\3v\5v\u0777\n")
        buf.write("v\3v\3v\3v\3v\5v\u077d\nv\3v\3v\5v\u0781\nv\3v\3v\5v\u0785")
        buf.write("\nv\3v\3v\3v\3v\5v\u078b\nv\3v\3v\5v\u078f\nv\3v\3v\5")
        buf.write("v\u0793\nv\3v\3v\5v\u0797\nv\3w\3w\5w\u079b\nw\3w\5w\u079e")
        buf.write("\nw\3x\3x\3y\3y\5y\u07a4\ny\3y\3y\5y\u07a8\ny\3y\3y\3")
        buf.write("z\3z\3z\3z\3z\3z\3{\3{\5{\u07b4\n{\3{\3{\5{\u07b8\n{\3")
        buf.write("{\3{\5{\u07bc\n{\5{\u07be\n{\3{\3{\5{\u07c2\n{\3{\3{\5")
        buf.write("{\u07c6\n{\3{\3{\5{\u07ca\n{\7{\u07cc\n{\f{\16{\u07cf")
        buf.write("\13{\5{\u07d1\n{\3{\3{\3|\3|\3|\3}\3}\5}\u07da\n}\3}\3")
        buf.write("}\5}\u07de\n}\3}\3}\3}\5}\u07e3\n}\3}\5}\u07e6\n}\5}\u07e8")
        buf.write("\n}\3}\5}\u07eb\n}\3}\3}\3~\3~\5~\u07f1\n~\3~\3~\5~\u07f5")
        buf.write("\n~\3~\3~\5~\u07f9\n~\3~\3~\5~\u07fd\n~\3~\3~\5~\u0801")
        buf.write("\n~\7~\u0803\n~\f~\16~\u0806\13~\5~\u0808\n~\3~\3~\3\177")
        buf.write("\3\177\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0082")
        buf.write("\3\u0082\3\u0082\7\u0082\u0816\n\u0082\f\u0082\16\u0082")
        buf.write("\u0819\13\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\5\u0084\u0823\n\u0084\3\u0085")
        buf.write("\3\u0085\3\u0086\3\u0086\5\u0086\u0829\n\u0086\3\u0087")
        buf.write("\3\u0087\3\u0088\3\u0088\3\u0089\3\u0089\5\u0089\u0831")
        buf.write("\n\u0089\3\u0089\3\u0089\5\u0089\u0835\n\u0089\3\u0089")
        buf.write("\3\u0089\5\u0089\u0839\n\u0089\3\u0089\3\u0089\5\u0089")
        buf.write("\u083d\n\u0089\7\u0089\u083f\n\u0089\f\u0089\16\u0089")
        buf.write("\u0842\13\u0089\5\u0089\u0844\n\u0089\3\u0089\3\u0089")
        buf.write("\3\u008a\3\u008a\5\u008a\u084a\n\u008a\3\u008a\3\u008a")
        buf.write("\5\u008a\u084e\n\u008a\3\u008a\3\u008a\5\u008a\u0852\n")
        buf.write("\u008a\3\u008a\3\u008a\5\u008a\u0856\n\u008a\3\u008a\3")
        buf.write("\u008a\5\u008a\u085a\n\u008a\3\u008a\3\u008a\5\u008a\u085e")
        buf.write("\n\u008a\3\u008a\3\u008a\5\u008a\u0862\n\u008a\3\u008a")
        buf.write("\3\u008a\5\u008a\u0866\n\u008a\7\u008a\u0868\n\u008a\f")
        buf.write("\u008a\16\u008a\u086b\13\u008a\5\u008a\u086d\n\u008a\3")
        buf.write("\u008a\3\u008a\3\u008b\3\u008b\3\u008c\3\u008c\5\u008c")
        buf.write("\u0875\n\u008c\3\u008c\3\u008c\5\u008c\u0879\n\u008c\3")
        buf.write("\u008c\5\u008c\u087c\n\u008c\3\u008c\3\u008c\3\u008d\3")
        buf.write("\u008d\3\u008d\5\u008d\u0883\n\u008d\3\u008e\3\u008e\5")
        buf.write("\u008e\u0887\n\u008e\3\u008f\3\u008f\3\u0090\3\u0090\3")
        buf.write("\u0091\3\u0091\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093")
        buf.write("\2\2\u0094\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$")
        buf.write("&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|")
        buf.write("~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8")
        buf.write("\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea")
        buf.write("\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc")
        buf.write("\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e")
        buf.write("\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120")
        buf.write("\u0122\u0124\2\r\3\2[^\3\2cd\3\2\25\26\3\2|}\3\2~\u0080")
        buf.write("\3\2\u0088\u0089\17\2\67:<=?ADDGGIPRRU^eehoqu|}\u008c")
        buf.write("\u0092\b\2ppvwy{\u0081\u0081\u0093\u0093\u0096\u0096\4")
        buf.write("\2\20\20\36!\4\2\21\21\"%\4\2\26\26&\60\2\u09a3\2\u0127")
        buf.write("\3\2\2\2\4\u013c\3\2\2\2\6\u0142\3\2\2\2\b\u0144\3\2\2")
        buf.write("\2\n\u0150\3\2\2\2\f\u0152\3\2\2\2\16\u0154\3\2\2\2\20")
        buf.write("\u0156\3\2\2\2\22\u0162\3\2\2\2\24\u0167\3\2\2\2\26\u0169")
        buf.write("\3\2\2\2\30\u0173\3\2\2\2\32\u0179\3\2\2\2\34\u0182\3")
        buf.write("\2\2\2\36\u0191\3\2\2\2 \u0195\3\2\2\2\"\u01ba\3\2\2\2")
        buf.write("$\u01d2\3\2\2\2&\u01df\3\2\2\2(\u01e6\3\2\2\2*\u01f0\3")
        buf.write("\2\2\2,\u01f2\3\2\2\2.\u01f6\3\2\2\2\60\u01fa\3\2\2\2")
        buf.write("\62\u01fe\3\2\2\2\64\u0202\3\2\2\2\66\u0206\3\2\2\28\u020a")
        buf.write("\3\2\2\2:\u020e\3\2\2\2<\u0212\3\2\2\2>\u021d\3\2\2\2")
        buf.write("@\u0232\3\2\2\2B\u0249\3\2\2\2D\u0292\3\2\2\2F\u0294\3")
        buf.write("\2\2\2H\u02ad\3\2\2\2J\u02c0\3\2\2\2L\u02ca\3\2\2\2N\u02e0")
        buf.write("\3\2\2\2P\u02e2\3\2\2\2R\u02e8\3\2\2\2T\u02f0\3\2\2\2")
        buf.write("V\u0326\3\2\2\2X\u032a\3\2\2\2Z\u033e\3\2\2\2\\\u0352")
        buf.write("\3\2\2\2^\u0354\3\2\2\2`\u0370\3\2\2\2b\u037b\3\2\2\2")
        buf.write("d\u038c\3\2\2\2f\u03a5\3\2\2\2h\u03a9\3\2\2\2j\u03b1\3")
        buf.write("\2\2\2l\u03b8\3\2\2\2n\u03e4\3\2\2\2p\u03ed\3\2\2\2r\u03ef")
        buf.write("\3\2\2\2t\u03fe\3\2\2\2v\u0402\3\2\2\2x\u0406\3\2\2\2")
        buf.write("z\u040e\3\2\2\2|\u0437\3\2\2\2~\u044a\3\2\2\2\u0080\u0456")
        buf.write("\3\2\2\2\u0082\u0458\3\2\2\2\u0084\u0461\3\2\2\2\u0086")
        buf.write("\u0467\3\2\2\2\u0088\u0472\3\2\2\2\u008a\u047b\3\2\2\2")
        buf.write("\u008c\u0483\3\2\2\2\u008e\u0491\3\2\2\2\u0090\u0495\3")
        buf.write("\2\2\2\u0092\u04ae\3\2\2\2\u0094\u04b2\3\2\2\2\u0096\u04be")
        buf.write("\3\2\2\2\u0098\u04ce\3\2\2\2\u009a\u04d0\3\2\2\2\u009c")
        buf.write("\u04d9\3\2\2\2\u009e\u04f1\3\2\2\2\u00a0\u0537\3\2\2\2")
        buf.write("\u00a2\u0539\3\2\2\2\u00a4\u0557\3\2\2\2\u00a6\u0559\3")
        buf.write("\2\2\2\u00a8\u055f\3\2\2\2\u00aa\u0574\3\2\2\2\u00ac\u057e")
        buf.write("\3\2\2\2\u00ae\u0584\3\2\2\2\u00b0\u059a\3\2\2\2\u00b2")
        buf.write("\u059c\3\2\2\2\u00b4\u059e\3\2\2\2\u00b6\u05a7\3\2\2\2")
        buf.write("\u00b8\u05a9\3\2\2\2\u00ba\u05b3\3\2\2\2\u00bc\u05bd\3")
        buf.write("\2\2\2\u00be\u05cd\3\2\2\2\u00c0\u05d2\3\2\2\2\u00c2\u05fa")
        buf.write("\3\2\2\2\u00c4\u05fc\3\2\2\2\u00c6\u0610\3\2\2\2\u00c8")
        buf.write("\u0617\3\2\2\2\u00ca\u0628\3\2\2\2\u00cc\u062b\3\2\2\2")
        buf.write("\u00ce\u062f\3\2\2\2\u00d0\u0645\3\2\2\2\u00d2\u0663\3")
        buf.write("\2\2\2\u00d4\u0677\3\2\2\2\u00d6\u0679\3\2\2\2\u00d8\u069a")
        buf.write("\3\2\2\2\u00da\u069c\3\2\2\2\u00dc\u06be\3\2\2\2\u00de")
        buf.write("\u06d6\3\2\2\2\u00e0\u06e7\3\2\2\2\u00e2\u06f5\3\2\2\2")
        buf.write("\u00e4\u0709\3\2\2\2\u00e6\u074e\3\2\2\2\u00e8\u0750\3")
        buf.write("\2\2\2\u00ea\u0796\3\2\2\2\u00ec\u0798\3\2\2\2\u00ee\u079f")
        buf.write("\3\2\2\2\u00f0\u07a1\3\2\2\2\u00f2\u07ab\3\2\2\2\u00f4")
        buf.write("\u07b1\3\2\2\2\u00f6\u07d4\3\2\2\2\u00f8\u07d7\3\2\2\2")
        buf.write("\u00fa\u07ee\3\2\2\2\u00fc\u080b\3\2\2\2\u00fe\u080d\3")
        buf.write("\2\2\2\u0100\u080f\3\2\2\2\u0102\u0817\3\2\2\2\u0104\u081a")
        buf.write("\3\2\2\2\u0106\u0822\3\2\2\2\u0108\u0824\3\2\2\2\u010a")
        buf.write("\u0828\3\2\2\2\u010c\u082a\3\2\2\2\u010e\u082c\3\2\2\2")
        buf.write("\u0110\u082e\3\2\2\2\u0112\u0847\3\2\2\2\u0114\u0870\3")
        buf.write("\2\2\2\u0116\u0872\3\2\2\2\u0118\u087f\3\2\2\2\u011a\u0886")
        buf.write("\3\2\2\2\u011c\u0888\3\2\2\2\u011e\u088a\3\2\2\2\u0120")
        buf.write("\u088c\3\2\2\2\u0122\u088e\3\2\2\2\u0124\u0890\3\2\2\2")
        buf.write("\u0126\u0128\7\u0097\2\2\u0127\u0126\3\2\2\2\u0127\u0128")
        buf.write("\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012a\5\4\3\2\u012a")
        buf.write("\u012f\5\22\n\2\u012b\u012d\7\u0097\2\2\u012c\u012b\3")
        buf.write("\2\2\2\u012c\u012d\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0130")
        buf.write("\7\3\2\2\u012f\u012c\3\2\2\2\u012f\u0130\3\2\2\2\u0130")
        buf.write("\u0132\3\2\2\2\u0131\u0133\7\u0097\2\2\u0132\u0131\3\2")
        buf.write("\2\2\u0132\u0133\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0135")
        buf.write("\7\2\2\3\u0135\3\3\2\2\2\u0136\u0138\5\6\4\2\u0137\u0139")
        buf.write("\7\u0097\2\2\u0138\u0137\3\2\2\2\u0138\u0139\3\2\2\2\u0139")
        buf.write("\u013b\3\2\2\2\u013a\u0136\3\2\2\2\u013b\u013e\3\2\2\2")
        buf.write("\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d\5\3\2\2")
        buf.write("\2\u013e\u013c\3\2\2\2\u013f\u0143\5\b\5\2\u0140\u0143")
        buf.write("\5\f\7\2\u0141\u0143\5\16\b\2\u0142\u013f\3\2\2\2\u0142")
        buf.write("\u0140\3\2\2\2\u0142\u0141\3\2\2\2\u0143\7\3\2\2\2\u0144")
        buf.write("\u0147\7\61\2\2\u0145\u0146\7\u0097\2\2\u0146\u0148\5")
        buf.write("\n\6\2\u0147\u0145\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u014d")
        buf.write("\3\2\2\2\u0149\u014a\7\u0097\2\2\u014a\u014c\5\20\t\2")
        buf.write("\u014b\u0149\3\2\2\2\u014c\u014f\3\2\2\2\u014d\u014b\3")
        buf.write("\2\2\2\u014d\u014e\3\2\2\2\u014e\t\3\2\2\2\u014f\u014d")
        buf.write("\3\2\2\2\u0150\u0151\7\u0089\2\2\u0151\13\3\2\2\2\u0152")
        buf.write("\u0153\7\62\2\2\u0153\r\3\2\2\2\u0154\u0155\7\63\2\2\u0155")
        buf.write("\17\3\2\2\2\u0156\u0158\5\u011e\u0090\2\u0157\u0159\7")
        buf.write("\u0097\2\2\u0158\u0157\3\2\2\2\u0158\u0159\3\2\2\2\u0159")
        buf.write("\u015a\3\2\2\2\u015a\u015c\7\4\2\2\u015b\u015d\7\u0097")
        buf.write("\2\2\u015c\u015b\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015e")
        buf.write("\3\2\2\2\u015e\u015f\5\u011e\u0090\2\u015f\21\3\2\2\2")
        buf.write("\u0160\u0163\5*\26\2\u0161\u0163\5\24\13\2\u0162\u0160")
        buf.write("\3\2\2\2\u0162\u0161\3\2\2\2\u0163\23\3\2\2\2\u0164\u0168")
        buf.write("\5\26\f\2\u0165\u0168\5b\62\2\u0166\u0168\5\30\r\2\u0167")
        buf.write("\u0164\3\2\2\2\u0167\u0165\3\2\2\2\u0167\u0166\3\2\2\2")
        buf.write("\u0168\25\3\2\2\2\u0169\u0170\5 \21\2\u016a\u016c\7\u0097")
        buf.write("\2\2\u016b\u016a\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016d")
        buf.write("\3\2\2\2\u016d\u016f\5\36\20\2\u016e\u016b\3\2\2\2\u016f")
        buf.write("\u0172\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171\3\2\2\2")
        buf.write("\u0171\27\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0175\5\32")
        buf.write("\16\2\u0174\u0176\7\u0097\2\2\u0175\u0174\3\2\2\2\u0175")
        buf.write("\u0176\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0178\5\34\17")
        buf.write("\2\u0178\31\3\2\2\2\u0179\u017a\7\64\2\2\u017a\u017b\7")
        buf.write("\u0097\2\2\u017b\u017c\7\65\2\2\u017c\u017d\7\u0097\2")
        buf.write("\2\u017d\u0180\7\66\2\2\u017e\u017f\7\u0097\2\2\u017f")
        buf.write("\u0181\5\u010c\u0087\2\u0180\u017e\3\2\2\2\u0180\u0181")
        buf.write("\3\2\2\2\u0181\33\3\2\2\2\u0182\u0183\5F$\2\u0183\u0184")
        buf.write("\5 \21\2\u0184\35\3\2\2\2\u0185\u0186\7\67\2\2\u0186\u0187")
        buf.write("\7\u0097\2\2\u0187\u0189\78\2\2\u0188\u018a\7\u0097\2")
        buf.write("\2\u0189\u0188\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018b")
        buf.write("\3\2\2\2\u018b\u0192\5 \21\2\u018c\u018e\7\67\2\2\u018d")
        buf.write("\u018f\7\u0097\2\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2")
        buf.write("\2\2\u018f\u0190\3\2\2\2\u0190\u0192\5 \21\2\u0191\u0185")
        buf.write("\3\2\2\2\u0191\u018c\3\2\2\2\u0192\37\3\2\2\2\u0193\u0196")
        buf.write("\5\"\22\2\u0194\u0196\5$\23\2\u0195\u0193\3\2\2\2\u0195")
        buf.write("\u0194\3\2\2\2\u0196!\3\2\2\2\u0197\u0199\5(\25\2\u0198")
        buf.write("\u019a\7\u0097\2\2\u0199\u0198\3\2\2\2\u0199\u019a\3\2")
        buf.write("\2\2\u019a\u019c\3\2\2\2\u019b\u0197\3\2\2\2\u019c\u019f")
        buf.write("\3\2\2\2\u019d\u019b\3\2\2\2\u019d\u019e\3\2\2\2\u019e")
        buf.write("\u01a0\3\2\2\2\u019f\u019d\3\2\2\2\u01a0\u01bb\5j\66\2")
        buf.write("\u01a1\u01a3\5(\25\2\u01a2\u01a4\7\u0097\2\2\u01a3\u01a2")
        buf.write("\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a6\3\2\2\2\u01a5")
        buf.write("\u01a1\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2")
        buf.write("\u01a7\u01a8\3\2\2\2\u01a8\u01aa\3\2\2\2\u01a9\u01a7\3")
        buf.write("\2\2\2\u01aa\u01b1\5&\24\2\u01ab\u01ad\7\u0097\2\2\u01ac")
        buf.write("\u01ab\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ae\3\2\2\2")
        buf.write("\u01ae\u01b0\5&\24\2\u01af\u01ac\3\2\2\2\u01b0\u01b3\3")
        buf.write("\2\2\2\u01b1\u01af\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b8")
        buf.write("\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b4\u01b6\7\u0097\2\2\u01b5")
        buf.write("\u01b4\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\3\2\2\2")
        buf.write("\u01b7\u01b9\5j\66\2\u01b8\u01b5\3\2\2\2\u01b8\u01b9\3")
        buf.write("\2\2\2\u01b9\u01bb\3\2\2\2\u01ba\u019d\3\2\2\2\u01ba\u01a7")
        buf.write("\3\2\2\2\u01bb#\3\2\2\2\u01bc\u01be\5(\25\2\u01bd\u01bf")
        buf.write("\7\u0097\2\2\u01be\u01bd\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf")
        buf.write("\u01c1\3\2\2\2\u01c0\u01bc\3\2\2\2\u01c1\u01c4\3\2\2\2")
        buf.write("\u01c2\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01cb\3")
        buf.write("\2\2\2\u01c4\u01c2\3\2\2\2\u01c5\u01c7\5&\24\2\u01c6\u01c8")
        buf.write("\7\u0097\2\2\u01c7\u01c6\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8")
        buf.write("\u01ca\3\2\2\2\u01c9\u01c5\3\2\2\2\u01ca\u01cd\3\2\2\2")
        buf.write("\u01cb\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01ce\3")
        buf.write("\2\2\2\u01cd\u01cb\3\2\2\2\u01ce\u01d0\5h\65\2\u01cf\u01d1")
        buf.write("\7\u0097\2\2\u01d0\u01cf\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1")
        buf.write("\u01d3\3\2\2\2\u01d2\u01c2\3\2\2\2\u01d3\u01d4\3\2\2\2")
        buf.write("\u01d4\u01d2\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d6\3")
        buf.write("\2\2\2\u01d6\u01d7\5\"\22\2\u01d7%\3\2\2\2\u01d8\u01e0")
        buf.write("\5P)\2\u01d9\u01e0\5L\'\2\u01da\u01e0\5R*\2\u01db\u01e0")
        buf.write("\5^\60\2\u01dc\u01e0\5X-\2\u01dd\u01e0\5T+\2\u01de\u01e0")
        buf.write("\5Z.\2\u01df\u01d8\3\2\2\2\u01df\u01d9\3\2\2\2\u01df\u01da")
        buf.write("\3\2\2\2\u01df\u01db\3\2\2\2\u01df\u01dc\3\2\2\2\u01df")
        buf.write("\u01dd\3\2\2\2\u01df\u01de\3\2\2\2\u01e0\'\3\2\2\2\u01e1")
        buf.write("\u01e7\5F$\2\u01e2\u01e7\5|?\2\u01e3\u01e7\5H%\2\u01e4")
        buf.write("\u01e7\5J&\2\u01e5\u01e7\5`\61\2\u01e6\u01e1\3\2\2\2\u01e6")
        buf.write("\u01e2\3\2\2\2\u01e6\u01e3\3\2\2\2\u01e6\u01e4\3\2\2\2")
        buf.write("\u01e6\u01e5\3\2\2\2\u01e7)\3\2\2\2\u01e8\u01f1\5\62\32")
        buf.write("\2\u01e9\u01f1\5:\36\2\u01ea\u01f1\5,\27\2\u01eb\u01f1")
        buf.write("\5\64\33\2\u01ec\u01f1\5.\30\2\u01ed\u01f1\5\66\34\2\u01ee")
        buf.write("\u01f1\5\60\31\2\u01ef\u01f1\58\35\2\u01f0\u01e8\3\2\2")
        buf.write("\2\u01f0\u01e9\3\2\2\2\u01f0\u01ea\3\2\2\2\u01f0\u01eb")
        buf.write("\3\2\2\2\u01f0\u01ec\3\2\2\2\u01f0\u01ed\3\2\2\2\u01f0")
        buf.write("\u01ee\3\2\2\2\u01f0\u01ef\3\2\2\2\u01f1+\3\2\2\2\u01f2")
        buf.write("\u01f3\79\2\2\u01f3\u01f4\7\u0097\2\2\u01f4\u01f5\5> ")
        buf.write("\2\u01f5-\3\2\2\2\u01f6\u01f7\79\2\2\u01f7\u01f8\7\u0097")
        buf.write("\2\2\u01f8\u01f9\5@!\2\u01f9/\3\2\2\2\u01fa\u01fb\79\2")
        buf.write("\2\u01fb\u01fc\7\u0097\2\2\u01fc\u01fd\5B\"\2\u01fd\61")
        buf.write("\3\2\2\2\u01fe\u01ff\79\2\2\u01ff\u0200\7\u0097\2\2\u0200")
        buf.write("\u0201\5<\37\2\u0201\63\3\2\2\2\u0202\u0203\7:\2\2\u0203")
        buf.write("\u0204\7\u0097\2\2\u0204\u0205\5> \2\u0205\65\3\2\2\2")
        buf.write("\u0206\u0207\7:\2\2\u0207\u0208\7\u0097\2\2\u0208\u0209")
        buf.write("\5@!\2\u0209\67\3\2\2\2\u020a\u020b\7:\2\2\u020b\u020c")
        buf.write("\7\u0097\2\2\u020c\u020d\5B\"\2\u020d9\3\2\2\2\u020e\u020f")
        buf.write("\7:\2\2\u020f\u0210\7\u0097\2\2\u0210\u0211\5<\37\2\u0211")
        buf.write(";\3\2\2\2\u0212\u0213\7;\2\2\u0213\u0214\7\u0097\2\2\u0214")
        buf.write("\u0216\7<\2\2\u0215\u0217\7\u0097\2\2\u0216\u0215\3\2")
        buf.write("\2\2\u0216\u0217\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u0219")
        buf.write("\5\u00acW\2\u0219\u021a\7\5\2\2\u021a\u021b\5\u0114\u008b")
        buf.write("\2\u021b\u021c\7\6\2\2\u021c=\3\2\2\2\u021d\u021e\7=\2")
        buf.write("\2\u021e\u021f\7\u0097\2\2\u021f\u0221\7<\2\2\u0220\u0222")
        buf.write("\7\u0097\2\2\u0221\u0220\3\2\2\2\u0221\u0222\3\2\2\2\u0222")
        buf.write("\u0223\3\2\2\2\u0223\u0224\7\5\2\2\u0224\u0225\5\u0104")
        buf.write("\u0083\2\u0225\u0226\5\u00acW\2\u0226\u0228\7\6\2\2\u0227")
        buf.write("\u0229\7\u0097\2\2\u0228\u0227\3\2\2\2\u0228\u0229\3\2")
        buf.write("\2\2\u0229\u022a\3\2\2\2\u022a\u022b\7>\2\2\u022b\u022c")
        buf.write("\7\u0097\2\2\u022c\u022d\5\u00b4[\2\u022d\u022e\7\u0097")
        buf.write("\2\2\u022e\u022f\7?\2\2\u022f\u0230\7\u0097\2\2\u0230")
        buf.write("\u0231\7@\2\2\u0231?\3\2\2\2\u0232\u0233\7=\2\2\u0233")
        buf.write("\u0234\7\u0097\2\2\u0234\u0236\7<\2\2\u0235\u0237\7\u0097")
        buf.write("\2\2\u0236\u0235\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u0238")
        buf.write("\3\2\2\2\u0238\u0239\7\5\2\2\u0239\u023a\5\u0104\u0083")
        buf.write("\2\u023a\u023b\5\u00acW\2\u023b\u023d\7\6\2\2\u023c\u023e")
        buf.write("\7\u0097\2\2\u023d\u023c\3\2\2\2\u023d\u023e\3\2\2\2\u023e")
        buf.write("\u023f\3\2\2\2\u023f\u0240\7>\2\2\u0240\u0241\7\u0097")
        buf.write("\2\2\u0241\u0243\7A\2\2\u0242\u0244\7\u0097\2\2\u0243")
        buf.write("\u0242\3\2\2\2\u0243\u0244\3\2\2\2\u0244\u0245\3\2\2\2")
        buf.write("\u0245\u0246\7\5\2\2\u0246\u0247\5\u00b4[\2\u0247\u0248")
        buf.write("\7\6\2\2\u0248A\3\2\2\2\u0249\u024a\7=\2\2\u024a\u024b")
        buf.write("\7\u0097\2\2\u024b\u024d\7<\2\2\u024c\u024e\7\u0097\2")
        buf.write("\2\u024d\u024c\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u024f")
        buf.write("\3\2\2\2\u024f\u0251\5D#\2\u0250\u0252\7\u0097\2\2\u0251")
        buf.write("\u0250\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0253\3\2\2\2")
        buf.write("\u0253\u0254\7>\2\2\u0254\u0255\7\u0097\2\2\u0255\u0257")
        buf.write("\7A\2\2\u0256\u0258\7\u0097\2\2\u0257\u0256\3\2\2\2\u0257")
        buf.write("\u0258\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025a\7\5\2\2")
        buf.write("\u025a\u025b\5\u00b4[\2\u025b\u025c\7\6\2\2\u025cC\3\2")
        buf.write("\2\2\u025d\u025f\7\5\2\2\u025e\u0260\7\u0097\2\2\u025f")
        buf.write("\u025e\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u0261\3\2\2\2")
        buf.write("\u0261\u0262\7\6\2\2\u0262\u0263\5\u0124\u0093\2\u0263")
        buf.write("\u0264\7\7\2\2\u0264\u0265\5\u0104\u0083\2\u0265\u0266")
        buf.write("\5\u00a6T\2\u0266\u0267\7\b\2\2\u0267\u0268\5\u0124\u0093")
        buf.write("\2\u0268\u026a\7\5\2\2\u0269\u026b\7\u0097\2\2\u026a\u0269")
        buf.write("\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026c\3\2\2\2\u026c")
        buf.write("\u026d\7\6\2\2\u026d\u0293\3\2\2\2\u026e\u0270\7\5\2\2")
        buf.write("\u026f\u0271\7\u0097\2\2\u0270\u026f\3\2\2\2\u0270\u0271")
        buf.write("\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0273\7\6\2\2\u0273")
        buf.write("\u0274\5\u0124\u0093\2\u0274\u0275\7\7\2\2\u0275\u0276")
        buf.write("\5\u0104\u0083\2\u0276\u0277\5\u00a6T\2\u0277\u0278\7")
        buf.write("\b\2\2\u0278\u0279\5\u0124\u0093\2\u0279\u027a\5\u0122")
        buf.write("\u0092\2\u027a\u027c\7\5\2\2\u027b\u027d\7\u0097\2\2\u027c")
        buf.write("\u027b\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027e\3\2\2\2")
        buf.write("\u027e\u027f\7\6\2\2\u027f\u0293\3\2\2\2\u0280\u0282\7")
        buf.write("\5\2\2\u0281\u0283\7\u0097\2\2\u0282\u0281\3\2\2\2\u0282")
        buf.write("\u0283\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0285\7\6\2\2")
        buf.write("\u0285\u0286\5\u0120\u0091\2\u0286\u0287\5\u0124\u0093")
        buf.write("\2\u0287\u0288\7\7\2\2\u0288\u0289\5\u0104\u0083\2\u0289")
        buf.write("\u028a\5\u00a6T\2\u028a\u028b\7\b\2\2\u028b\u028c\5\u0124")
        buf.write("\u0093\2\u028c\u028e\7\5\2\2\u028d\u028f\7\u0097\2\2\u028e")
        buf.write("\u028d\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0290\3\2\2\2")
        buf.write("\u0290\u0291\7\6\2\2\u0291\u0293\3\2\2\2\u0292\u025d\3")
        buf.write("\2\2\2\u0292\u026e\3\2\2\2\u0292\u0280\3\2\2\2\u0293E")
        buf.write("\3\2\2\2\u0294\u0295\7B\2\2\u0295\u0296\7\u0097\2\2\u0296")
        buf.write("\u0297\7C\2\2\u0297\u029c\7\u0097\2\2\u0298\u0299\7D\2")
        buf.write("\2\u0299\u029a\7\u0097\2\2\u029a\u029b\7E\2\2\u029b\u029d")
        buf.write("\7\u0097\2\2\u029c\u0298\3\2\2\2\u029c\u029d\3\2\2\2\u029d")
        buf.write("\u029e\3\2\2\2\u029e\u029f\7F\2\2\u029f\u02a0\7\u0097")
        buf.write("\2\2\u02a0\u02a1\5\u00b6\\\2\u02a1\u02a2\7\u0097\2\2\u02a2")
        buf.write("\u02a3\7G\2\2\u02a3\u02a4\7\u0097\2\2\u02a4\u02a5\5\u0104")
        buf.write("\u0083\2\u02a5\u02a9\7\u0097\2\2\u02a6\u02a7\7H\2\2\u02a7")
        buf.write("\u02a8\7\u0097\2\2\u02a8\u02aa\7\u008a\2\2\u02a9\u02a6")
        buf.write("\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aaG\3\2\2\2\u02ab\u02ac")
        buf.write("\7I\2\2\u02ac\u02ae\7\u0097\2\2\u02ad\u02ab\3\2\2\2\u02ad")
        buf.write("\u02ae\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b1\7J\2\2")
        buf.write("\u02b0\u02b2\7\u0097\2\2\u02b1\u02b0\3\2\2\2\u02b1\u02b2")
        buf.write("\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3\u02b7\5\u0090I\2\u02b4")
        buf.write("\u02b6\5z>\2\u02b5\u02b4\3\2\2\2\u02b6\u02b9\3\2\2\2\u02b7")
        buf.write("\u02b5\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02be\3\2\2\2")
        buf.write("\u02b9\u02b7\3\2\2\2\u02ba\u02bc\7\u0097\2\2\u02bb\u02ba")
        buf.write("\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd")
        buf.write("\u02bf\5\u008eH\2\u02be\u02bb\3\2\2\2\u02be\u02bf\3\2")
        buf.write("\2\2\u02bfI\3\2\2\2\u02c0\u02c2\7K\2\2\u02c1\u02c3\7\u0097")
        buf.write("\2\2\u02c2\u02c1\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c4")
        buf.write("\3\2\2\2\u02c4\u02c5\5\u00b6\\\2\u02c5\u02c6\7\u0097\2")
        buf.write("\2\u02c6\u02c7\7G\2\2\u02c7\u02c8\7\u0097\2\2\u02c8\u02c9")
        buf.write("\5\u0104\u0083\2\u02c9K\3\2\2\2\u02ca\u02cc\7L\2\2\u02cb")
        buf.write("\u02cd\7\u0097\2\2\u02cc\u02cb\3\2\2\2\u02cc\u02cd\3\2")
        buf.write("\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02d3\5\u0092J\2\u02cf")
        buf.write("\u02d0\7\u0097\2\2\u02d0\u02d2\5N(\2\u02d1\u02cf\3\2\2")
        buf.write("\2\u02d2\u02d5\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d3\u02d4")
        buf.write("\3\2\2\2\u02d4M\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d6\u02d7")
        buf.write("\7<\2\2\u02d7\u02d8\7\u0097\2\2\u02d8\u02d9\7J\2\2\u02d9")
        buf.write("\u02da\7\u0097\2\2\u02da\u02e1\5T+\2\u02db\u02dc\7<\2")
        buf.write("\2\u02dc\u02dd\7\u0097\2\2\u02dd\u02de\79\2\2\u02de\u02df")
        buf.write("\7\u0097\2\2\u02df\u02e1\5T+\2\u02e0\u02d6\3\2\2\2\u02e0")
        buf.write("\u02db\3\2\2\2\u02e1O\3\2\2\2\u02e2\u02e4\79\2\2\u02e3")
        buf.write("\u02e5\7\u0097\2\2\u02e4\u02e3\3\2\2\2\u02e4\u02e5\3\2")
        buf.write("\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7\5\u0090I\2\u02e7")
        buf.write("Q\3\2\2\2\u02e8\u02e9\79\2\2\u02e9\u02ea\7\u0097\2\2\u02ea")
        buf.write("\u02ec\7@\2\2\u02eb\u02ed\7\u0097\2\2\u02ec\u02eb\3\2")
        buf.write("\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02ef")
        buf.write("\5\u0090I\2\u02efS\3\2\2\2\u02f0\u02f2\7M\2\2\u02f1\u02f3")
        buf.write("\7\u0097\2\2\u02f2\u02f1\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3")
        buf.write("\u02f4\3\2\2\2\u02f4\u02ff\5V,\2\u02f5\u02f7\7\u0097\2")
        buf.write("\2\u02f6\u02f5\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f8")
        buf.write("\3\2\2\2\u02f8\u02fa\7\t\2\2\u02f9\u02fb\7\u0097\2\2\u02fa")
        buf.write("\u02f9\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fc\3\2\2\2")
        buf.write("\u02fc\u02fe\5V,\2\u02fd\u02f6\3\2\2\2\u02fe\u0301\3\2")
        buf.write("\2\2\u02ff\u02fd\3\2\2\2\u02ff\u0300\3\2\2\2\u0300U\3")
        buf.write("\2\2\2\u0301\u02ff\3\2\2\2\u0302\u0304\5\u00b4[\2\u0303")
        buf.write("\u0305\7\u0097\2\2\u0304\u0303\3\2\2\2\u0304\u0305\3\2")
        buf.write("\2\2\u0305\u0306\3\2\2\2\u0306\u0308\7\4\2\2\u0307\u0309")
        buf.write("\7\u0097\2\2\u0308\u0307\3\2\2\2\u0308\u0309\3\2\2\2\u0309")
        buf.write("\u030a\3\2\2\2\u030a\u030b\5\u00b6\\\2\u030b\u0327\3\2")
        buf.write("\2\2\u030c\u030e\5\u0104\u0083\2\u030d\u030f\7\u0097\2")
        buf.write("\2\u030e\u030d\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0310")
        buf.write("\3\2\2\2\u0310\u0312\7\4\2\2\u0311\u0313\7\u0097\2\2\u0312")
        buf.write("\u0311\3\2\2\2\u0312\u0313\3\2\2\2\u0313\u0314\3\2\2\2")
        buf.write("\u0314\u0315\5\u00b6\\\2\u0315\u0327\3\2\2\2\u0316\u0318")
        buf.write("\5\u0104\u0083\2\u0317\u0319\7\u0097\2\2\u0318\u0317\3")
        buf.write("\2\2\2\u0318\u0319\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031c")
        buf.write("\7\n\2\2\u031b\u031d\7\u0097\2\2\u031c\u031b\3\2\2\2\u031c")
        buf.write("\u031d\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u031f\5\u00b6")
        buf.write("\\\2\u031f\u0327\3\2\2\2\u0320\u0322\5\u0104\u0083\2\u0321")
        buf.write("\u0323\7\u0097\2\2\u0322\u0321\3\2\2\2\u0322\u0323\3\2")
        buf.write("\2\2\u0323\u0324\3\2\2\2\u0324\u0325\5\u00aaV\2\u0325")
        buf.write("\u0327\3\2\2\2\u0326\u0302\3\2\2\2\u0326\u030c\3\2\2\2")
        buf.write("\u0326\u0316\3\2\2\2\u0326\u0320\3\2\2\2\u0327W\3\2\2")
        buf.write("\2\u0328\u0329\7N\2\2\u0329\u032b\7\u0097\2\2\u032a\u0328")
        buf.write("\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u032c\3\2\2\2\u032c")
        buf.write("\u032e\7O\2\2\u032d\u032f\7\u0097\2\2\u032e\u032d\3\2")
        buf.write("\2\2\u032e\u032f\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u033b")
        buf.write("\5\u00b6\\\2\u0331\u0333\7\u0097\2\2\u0332\u0331\3\2\2")
        buf.write("\2\u0332\u0333\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0336")
        buf.write("\7\t\2\2\u0335\u0337\7\u0097\2\2\u0336\u0335\3\2\2\2\u0336")
        buf.write("\u0337\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u033a\5\u00b6")
        buf.write("\\\2\u0339\u0332\3\2\2\2\u033a\u033d\3\2\2\2\u033b\u0339")
        buf.write("\3\2\2\2\u033b\u033c\3\2\2\2\u033cY\3\2\2\2\u033d\u033b")
        buf.write("\3\2\2\2\u033e\u033f\7P\2\2\u033f\u0340\7\u0097\2\2\u0340")
        buf.write("\u034b\5\\/\2\u0341\u0343\7\u0097\2\2\u0342\u0341\3\2")
        buf.write("\2\2\u0342\u0343\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0346")
        buf.write("\7\t\2\2\u0345\u0347\7\u0097\2\2\u0346\u0345\3\2\2\2\u0346")
        buf.write("\u0347\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u034a\5\\/\2")
        buf.write("\u0349\u0342\3\2\2\2\u034a\u034d\3\2\2\2\u034b\u0349\3")
        buf.write("\2\2\2\u034b\u034c\3\2\2\2\u034c[\3\2\2\2\u034d\u034b")
        buf.write("\3\2\2\2\u034e\u034f\5\u0104\u0083\2\u034f\u0350\5\u00aa")
        buf.write("V\2\u0350\u0353\3\2\2\2\u0351\u0353\5\u00b4[\2\u0352\u034e")
        buf.write("\3\2\2\2\u0352\u0351\3\2\2\2\u0353]\3\2\2\2\u0354\u0356")
        buf.write("\7Q\2\2\u0355\u0357\7\u0097\2\2\u0356\u0355\3\2\2\2\u0356")
        buf.write("\u0357\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u035a\7\5\2\2")
        buf.write("\u0359\u035b\7\u0097\2\2\u035a\u0359\3\2\2\2\u035a\u035b")
        buf.write("\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d\5\u0104\u0083")
        buf.write("\2\u035d\u035e\7\u0097\2\2\u035e\u035f\7R\2\2\u035f\u0360")
        buf.write("\7\u0097\2\2\u0360\u0362\5\u00b6\\\2\u0361\u0363\7\u0097")
        buf.write("\2\2\u0362\u0361\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0364")
        buf.write("\3\2\2\2\u0364\u0367\7\13\2\2\u0365\u0366\7\u0097\2\2")
        buf.write("\u0366\u0368\5&\24\2\u0367\u0365\3\2\2\2\u0368\u0369\3")
        buf.write("\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036c")
        buf.write("\3\2\2\2\u036b\u036d\7\u0097\2\2\u036c\u036b\3\2\2\2\u036c")
        buf.write("\u036d\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u036f\7\6\2\2")
        buf.write("\u036f_\3\2\2\2\u0370\u0371\7S\2\2\u0371\u0372\7\u0097")
        buf.write("\2\2\u0372\u0379\5\u00fa~\2\u0373\u0375\7\u0097\2\2\u0374")
        buf.write("\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0376\3\2\2\2")
        buf.write("\u0376\u0377\7T\2\2\u0377\u0378\7\u0097\2\2\u0378\u037a")
        buf.write("\5d\63\2\u0379\u0374\3\2\2\2\u0379\u037a\3\2\2\2\u037a")
        buf.write("a\3\2\2\2\u037b\u037c\7S\2\2\u037c\u037f\7\u0097\2\2\u037d")
        buf.write("\u0380\5\u00fa~\2\u037e\u0380\5\u00fc\177\2\u037f\u037d")
        buf.write("\3\2\2\2\u037f\u037e\3\2\2\2\u0380\u038a\3\2\2\2\u0381")
        buf.write("\u0383\7\u0097\2\2\u0382\u0381\3\2\2\2\u0382\u0383\3\2")
        buf.write("\2\2\u0383\u0384\3\2\2\2\u0384\u0385\7T\2\2\u0385\u0388")
        buf.write("\7\u0097\2\2\u0386\u0389\7\f\2\2\u0387\u0389\5d\63\2\u0388")
        buf.write("\u0386\3\2\2\2\u0388\u0387\3\2\2\2\u0389\u038b\3\2\2\2")
        buf.write("\u038a\u0382\3\2\2\2\u038a\u038b\3\2\2\2\u038bc\3\2\2")
        buf.write("\2\u038c\u0397\5f\64\2\u038d\u038f\7\u0097\2\2\u038e\u038d")
        buf.write("\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390\3\2\2\2\u0390")
        buf.write("\u0392\7\t\2\2\u0391\u0393\7\u0097\2\2\u0392\u0391\3\2")
        buf.write("\2\2\u0392\u0393\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0396")
        buf.write("\5f\64\2\u0395\u038e\3\2\2\2\u0396\u0399\3\2\2\2\u0397")
        buf.write("\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039e\3\2\2\2")
        buf.write("\u0399\u0397\3\2\2\2\u039a\u039c\7\u0097\2\2\u039b\u039a")
        buf.write("\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u039f\5\u008eH\2\u039e\u039b\3\2\2\2\u039e\u039f\3\2")
        buf.write("\2\2\u039fe\3\2\2\2\u03a0\u03a1\5\u00fe\u0080\2\u03a1")
        buf.write("\u03a2\7\u0097\2\2\u03a2\u03a3\7G\2\2\u03a3\u03a4\7\u0097")
        buf.write("\2\2\u03a4\u03a6\3\2\2\2\u03a5\u03a0\3\2\2\2\u03a5\u03a6")
        buf.write("\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a8\5\u0104\u0083")
        buf.write("\2\u03a8g\3\2\2\2\u03a9\u03aa\7D\2\2\u03aa\u03af\5l\67")
        buf.write("\2\u03ab\u03ad\7\u0097\2\2\u03ac\u03ab\3\2\2\2\u03ac\u03ad")
        buf.write("\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03b0\5\u008eH\2\u03af")
        buf.write("\u03ac\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0i\3\2\2\2\u03b1")
        buf.write("\u03b2\7U\2\2\u03b2\u03b3\5l\67\2\u03b3k\3\2\2\2\u03b4")
        buf.write("\u03b6\7\u0097\2\2\u03b5\u03b4\3\2\2\2\u03b5\u03b6\3\2")
        buf.write("\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b9\7V\2\2\u03b8\u03b5")
        buf.write("\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba")
        buf.write("\u03bb\7\u0097\2\2\u03bb\u03be\5n8\2\u03bc\u03bd\7\u0097")
        buf.write("\2\2\u03bd\u03bf\5r:\2\u03be\u03bc\3\2\2\2\u03be\u03bf")
        buf.write("\3\2\2\2\u03bf\u03c2\3\2\2\2\u03c0\u03c1\7\u0097\2\2\u03c1")
        buf.write("\u03c3\5t;\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3")
        buf.write("\u03c6\3\2\2\2\u03c4\u03c5\7\u0097\2\2\u03c5\u03c7\5v")
        buf.write("<\2\u03c6\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7m\3\2")
        buf.write("\2\2\u03c8\u03d3\7\f\2\2\u03c9\u03cb\7\u0097\2\2\u03ca")
        buf.write("\u03c9\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cc\3\2\2\2")
        buf.write("\u03cc\u03ce\7\t\2\2\u03cd\u03cf\7\u0097\2\2\u03ce\u03cd")
        buf.write("\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0")
        buf.write("\u03d2\5p9\2\u03d1\u03ca\3\2\2\2\u03d2\u03d5\3\2\2\2\u03d3")
        buf.write("\u03d1\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03e5\3\2\2\2")
        buf.write("\u03d5\u03d3\3\2\2\2\u03d6\u03e1\5p9\2\u03d7\u03d9\7\u0097")
        buf.write("\2\2\u03d8\u03d7\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03da")
        buf.write("\3\2\2\2\u03da\u03dc\7\t\2\2\u03db\u03dd\7\u0097\2\2\u03dc")
        buf.write("\u03db\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03de\3\2\2\2")
        buf.write("\u03de\u03e0\5p9\2\u03df\u03d8\3\2\2\2\u03e0\u03e3\3\2")
        buf.write("\2\2\u03e1\u03df\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e5")
        buf.write("\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e4\u03c8\3\2\2\2\u03e4")
        buf.write("\u03d6\3\2\2\2\u03e5o\3\2\2\2\u03e6\u03e7\5\u00b6\\\2")
        buf.write("\u03e7\u03e8\7\u0097\2\2\u03e8\u03e9\7G\2\2\u03e9\u03ea")
        buf.write("\7\u0097\2\2\u03ea\u03eb\5\u0104\u0083\2\u03eb\u03ee\3")
        buf.write("\2\2\2\u03ec\u03ee\5\u00b6\\\2\u03ed\u03e6\3\2\2\2\u03ed")
        buf.write("\u03ec\3\2\2\2\u03eeq\3\2\2\2\u03ef\u03f0\7W\2\2\u03f0")
        buf.write("\u03f1\7\u0097\2\2\u03f1\u03f2\7X\2\2\u03f2\u03f3\7\u0097")
        buf.write("\2\2\u03f3\u03fb\5x=\2\u03f4\u03f6\7\t\2\2\u03f5\u03f7")
        buf.write("\7\u0097\2\2\u03f6\u03f5\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7")
        buf.write("\u03f8\3\2\2\2\u03f8\u03fa\5x=\2\u03f9\u03f4\3\2\2\2\u03fa")
        buf.write("\u03fd\3\2\2\2\u03fb\u03f9\3\2\2\2\u03fb\u03fc\3\2\2\2")
        buf.write("\u03fcs\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fe\u03ff\7Y\2\2")
        buf.write("\u03ff\u0400\7\u0097\2\2\u0400\u0401\5\u00b6\\\2\u0401")
        buf.write("u\3\2\2\2\u0402\u0403\7Z\2\2\u0403\u0404\7\u0097\2\2\u0404")
        buf.write("\u0405\5\u00b6\\\2\u0405w\3\2\2\2\u0406\u040b\5\u00b6")
        buf.write("\\\2\u0407\u0409\7\u0097\2\2\u0408\u0407\3\2\2\2\u0408")
        buf.write("\u0409\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040c\t\2\2\2")
        buf.write("\u040b\u0408\3\2\2\2\u040b\u040c\3\2\2\2\u040cy\3\2\2")
        buf.write("\2\u040d\u040f\7\u0097\2\2\u040e\u040d\3\2\2\2\u040e\u040f")
        buf.write("\3\2\2\2\u040f\u0435\3\2\2\2\u0410\u0411\7\64\2\2\u0411")
        buf.write("\u0412\7\u0097\2\2\u0412\u0413\7;\2\2\u0413\u0414\7\u0097")
        buf.write("\2\2\u0414\u0415\5\u0104\u0083\2\u0415\u0416\5\u00acW")
        buf.write("\2\u0416\u0417\7\5\2\2\u0417\u0418\5\u0114\u008b\2\u0418")
        buf.write("\u0419\7\6\2\2\u0419\u0436\3\2\2\2\u041a\u041b\7\64\2")
        buf.write("\2\u041b\u041c\7\u0097\2\2\u041c\u041d\7_\2\2\u041d\u041e")
        buf.write("\7\u0097\2\2\u041e\u041f\7<\2\2\u041f\u0420\7\u0097\2")
        buf.write("\2\u0420\u042b\5\u0104\u0083\2\u0421\u0423\7\u0097\2\2")
        buf.write("\u0422\u0421\3\2\2\2\u0422\u0423\3\2\2\2\u0423\u0424\3")
        buf.write("\2\2\2\u0424\u0426\7\t\2\2\u0425\u0427\7\u0097\2\2\u0426")
        buf.write("\u0425\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0428\3\2\2\2")
        buf.write("\u0428\u042a\5\u0104\u0083\2\u0429\u0422\3\2\2\2\u042a")
        buf.write("\u042d\3\2\2\2\u042b\u0429\3\2\2\2\u042b\u042c\3\2\2\2")
        buf.write("\u042c\u0436\3\2\2\2\u042d\u042b\3\2\2\2\u042e\u042f\7")
        buf.write("\64\2\2\u042f\u0430\7\u0097\2\2\u0430\u0431\7`\2\2\u0431")
        buf.write("\u0432\7\u0097\2\2\u0432\u0433\5\u0104\u0083\2\u0433\u0434")
        buf.write("\5\u00acW\2\u0434\u0436\3\2\2\2\u0435\u0410\3\2\2\2\u0435")
        buf.write("\u041a\3\2\2\2\u0435\u042e\3\2\2\2\u0436{\3\2\2\2\u0437")
        buf.write("\u0438\7a\2\2\u0438\u0439\7\u0097\2\2\u0439\u0444\5~@")
        buf.write("\2\u043a\u043c\7\u0097\2\2\u043b\u043a\3\2\2\2\u043b\u043c")
        buf.write("\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u043f\7\t\2\2\u043e")
        buf.write("\u0440\7\u0097\2\2\u043f\u043e\3\2\2\2\u043f\u0440\3\2")
        buf.write("\2\2\u0440\u0441\3\2\2\2\u0441\u0443\5~@\2\u0442\u043b")
        buf.write("\3\2\2\2\u0443\u0446\3\2\2\2\u0444\u0442\3\2\2\2\u0444")
        buf.write("\u0445\3\2\2\2\u0445\u0448\3\2\2\2\u0446\u0444\3\2\2\2")
        buf.write("\u0447\u0449\5\u008eH\2\u0448\u0447\3\2\2\2\u0448\u0449")
        buf.write("\3\2\2\2\u0449}\3\2\2\2\u044a\u044c\5\u0104\u0083\2\u044b")
        buf.write("\u044d\7\u0097\2\2\u044c\u044b\3\2\2\2\u044c\u044d\3\2")
        buf.write("\2\2\u044d\u044e\3\2\2\2\u044e\u0450\7\4\2\2\u044f\u0451")
        buf.write("\7\u0097\2\2\u0450\u044f\3\2\2\2\u0450\u0451\3\2\2\2\u0451")
        buf.write("\u0452\3\2\2\2\u0452\u0453\5\u0080A\2\u0453\177\3\2\2")
        buf.write("\2\u0454\u0457\5\u0082B\2\u0455\u0457\5\u0084C\2\u0456")
        buf.write("\u0454\3\2\2\2\u0456\u0455\3\2\2\2\u0457\u0081\3\2\2\2")
        buf.write("\u0458\u045a\7b\2\2\u0459\u045b\7\u0097\2\2\u045a\u0459")
        buf.write("\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u045f\3\2\2\2\u045c")
        buf.write("\u0460\5\u0086D\2\u045d\u0460\5\u0088E\2\u045e\u0460\5")
        buf.write("\u008aF\2\u045f\u045c\3\2\2\2\u045f\u045d\3\2\2\2\u045f")
        buf.write("\u045e\3\2\2\2\u0460\u0083\3\2\2\2\u0461\u0465\t\3\2\2")
        buf.write("\u0462\u0466\5\u0086D\2\u0463\u0466\5\u0088E\2\u0464\u0466")
        buf.write("\5\u008aF\2\u0465\u0462\3\2\2\2\u0465\u0463\3\2\2\2\u0465")
        buf.write("\u0464\3\2\2\2\u0466\u0085\3\2\2\2\u0467\u0468\7\r\2\2")
        buf.write("\u0468\u0469\5\u011e\u0090\2\u0469\u046a\7\5\2\2\u046a")
        buf.write("\u046b\5\u011e\u0090\2\u046b\u046e\7\4\2\2\u046c\u046f")
        buf.write("\7\u008a\2\2\u046d\u046f\5\u0116\u008c\2\u046e\u046c\3")
        buf.write("\2\2\2\u046e\u046d\3\2\2\2\u046f\u0470\3\2\2\2\u0470\u0471")
        buf.write("\7\6\2\2\u0471\u0087\3\2\2\2\u0472\u0473\7\r\2\2\u0473")
        buf.write("\u0474\5\u011e\u0090\2\u0474\u0477\7\5\2\2\u0475\u0478")
        buf.write("\7\u008a\2\2\u0476\u0478\5\u0116\u008c\2\u0477\u0475\3")
        buf.write("\2\2\2\u0477\u0476\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047a")
        buf.write("\7\6\2\2\u047a\u0089\3\2\2\2\u047b\u047f\7\5\2\2\u047c")
        buf.write("\u0480\5\u008cG\2\u047d\u0480\5\u0116\u008c\2\u047e\u0480")
        buf.write("\7\f\2\2\u047f\u047c\3\2\2\2\u047f\u047d\3\2\2\2\u047f")
        buf.write("\u047e\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0482\7\6\2\2")
        buf.write("\u0482\u008b\3\2\2\2\u0483\u048e\5\u010c\u0087\2\u0484")
        buf.write("\u0486\7\u0097\2\2\u0485\u0484\3\2\2\2\u0485\u0486\3\2")
        buf.write("\2\2\u0486\u0487\3\2\2\2\u0487\u0489\7\t\2\2\u0488\u048a")
        buf.write("\7\u0097\2\2\u0489\u0488\3\2\2\2\u0489\u048a\3\2\2\2\u048a")
        buf.write("\u048b\3\2\2\2\u048b\u048d\5\u010c\u0087\2\u048c\u0485")
        buf.write("\3\2\2\2\u048d\u0490\3\2\2\2\u048e\u048c\3\2\2\2\u048e")
        buf.write("\u048f\3\2\2\2\u048f\u008d\3\2\2\2\u0490\u048e\3\2\2\2")
        buf.write("\u0491\u0492\7e\2\2\u0492\u0493\7\u0097\2\2\u0493\u0494")
        buf.write("\5\u00b6\\\2\u0494\u008f\3\2\2\2\u0495\u04a0\5\u0092J")
        buf.write("\2\u0496\u0498\7\u0097\2\2\u0497\u0496\3\2\2\2\u0497\u0498")
        buf.write("\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049b\7\t\2\2\u049a")
        buf.write("\u049c\7\u0097\2\2\u049b\u049a\3\2\2\2\u049b\u049c\3\2")
        buf.write("\2\2\u049c\u049d\3\2\2\2\u049d\u049f\5\u0092J\2\u049e")
        buf.write("\u0497\3\2\2\2\u049f\u04a2\3\2\2\2\u04a0\u049e\3\2\2\2")
        buf.write("\u04a0\u04a1\3\2\2\2\u04a1\u0091\3\2\2\2\u04a2\u04a0\3")
        buf.write("\2\2\2\u04a3\u04a5\5\u0104\u0083\2\u04a4\u04a6\7\u0097")
        buf.write("\2\2\u04a5\u04a4\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04a7")
        buf.write("\3\2\2\2\u04a7\u04a9\7\4\2\2\u04a8\u04aa\7\u0097\2\2\u04a9")
        buf.write("\u04a8\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ab\3\2\2\2")
        buf.write("\u04ab\u04ac\5\u0094K\2\u04ac\u04af\3\2\2\2\u04ad\u04af")
        buf.write("\5\u0094K\2\u04ae\u04a3\3\2\2\2\u04ae\u04ad\3\2\2\2\u04af")
        buf.write("\u0093\3\2\2\2\u04b0\u04b3\5\u0096L\2\u04b1\u04b3\5\u0098")
        buf.write("M\2\u04b2\u04b0\3\2\2\2\u04b2\u04b1\3\2\2\2\u04b3\u0095")
        buf.write("\3\2\2\2\u04b4\u04b5\7f\2\2\u04b5\u04b6\7\5\2\2\u04b6")
        buf.write("\u04b7\5\u0098M\2\u04b7\u04b8\7\6\2\2\u04b8\u04bf\3\2")
        buf.write("\2\2\u04b9\u04ba\7g\2\2\u04ba\u04bb\7\5\2\2\u04bb\u04bc")
        buf.write("\5\u0098M\2\u04bc\u04bd\7\6\2\2\u04bd\u04bf\3\2\2\2\u04be")
        buf.write("\u04b4\3\2\2\2\u04be\u04b9\3\2\2\2\u04bf\u0097\3\2\2\2")
        buf.write("\u04c0\u04c7\5\u009cO\2\u04c1\u04c3\7\u0097\2\2\u04c2")
        buf.write("\u04c1\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u04c4\3\2\2\2")
        buf.write("\u04c4\u04c6\5\u009eP\2\u04c5\u04c2\3\2\2\2\u04c6\u04c9")
        buf.write("\3\2\2\2\u04c7\u04c5\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8")
        buf.write("\u04cf\3\2\2\2\u04c9\u04c7\3\2\2\2\u04ca\u04cb\7\5\2\2")
        buf.write("\u04cb\u04cc\5\u0098M\2\u04cc\u04cd\7\6\2\2\u04cd\u04cf")
        buf.write("\3\2\2\2\u04ce\u04c0\3\2\2\2\u04ce\u04ca\3\2\2\2\u04cf")
        buf.write("\u0099\3\2\2\2\u04d0\u04d5\5\u009cO\2\u04d1\u04d3\7\u0097")
        buf.write("\2\2\u04d2\u04d1\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d4")
        buf.write("\3\2\2\2\u04d4\u04d6\5\u009eP\2\u04d5\u04d2\3\2\2\2\u04d6")
        buf.write("\u04d7\3\2\2\2\u04d7\u04d5\3\2\2\2\u04d7\u04d8\3\2\2\2")
        buf.write("\u04d8\u009b\3\2\2\2\u04d9\u04db\7\5\2\2\u04da\u04dc\7")
        buf.write("\u0097\2\2\u04db\u04da\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc")
        buf.write("\u04e1\3\2\2\2\u04dd\u04df\5\u0104\u0083\2\u04de\u04e0")
        buf.write("\7\u0097\2\2\u04df\u04de\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0")
        buf.write("\u04e2\3\2\2\2\u04e1\u04dd\3\2\2\2\u04e1\u04e2\3\2\2\2")
        buf.write("\u04e2\u04e7\3\2\2\2\u04e3\u04e5\5\u00aaV\2\u04e4\u04e6")
        buf.write("\7\u0097\2\2\u04e5\u04e4\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6")
        buf.write("\u04e8\3\2\2\2\u04e7\u04e3\3\2\2\2\u04e7\u04e8\3\2\2\2")
        buf.write("\u04e8\u04ed\3\2\2\2\u04e9\u04eb\5\u00a4S\2\u04ea\u04ec")
        buf.write("\7\u0097\2\2\u04eb\u04ea\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ec")
        buf.write("\u04ee\3\2\2\2\u04ed\u04e9\3\2\2\2\u04ed\u04ee\3\2\2\2")
        buf.write("\u04ee\u04ef\3\2\2\2\u04ef\u04f0\7\6\2\2\u04f0\u009d\3")
        buf.write("\2\2\2\u04f1\u04f3\5\u00a0Q\2\u04f2\u04f4\7\u0097\2\2")
        buf.write("\u04f3\u04f2\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f5\3")
        buf.write("\2\2\2\u04f5\u04f6\5\u009cO\2\u04f6\u009f\3\2\2\2\u04f7")
        buf.write("\u04f9\5\u0120\u0091\2\u04f8\u04fa\7\u0097\2\2\u04f9\u04f8")
        buf.write("\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb")
        buf.write("\u04fd\5\u0124\u0093\2\u04fc\u04fe\7\u0097\2\2\u04fd\u04fc")
        buf.write("\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0500\3\2\2\2\u04ff")
        buf.write("\u0501\5\u00a2R\2\u0500\u04ff\3\2\2\2\u0500\u0501\3\2")
        buf.write("\2\2\u0501\u0503\3\2\2\2\u0502\u0504\7\u0097\2\2\u0503")
        buf.write("\u0502\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0505\3\2\2\2")
        buf.write("\u0505\u0507\5\u0124\u0093\2\u0506\u0508\7\u0097\2\2\u0507")
        buf.write("\u0506\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u0509\3\2\2\2")
        buf.write("\u0509\u050a\5\u0122\u0092\2\u050a\u0538\3\2\2\2\u050b")
        buf.write("\u050d\5\u0120\u0091\2\u050c\u050e\7\u0097\2\2\u050d\u050c")
        buf.write("\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u050f\3\2\2\2\u050f")
        buf.write("\u0511\5\u0124\u0093\2\u0510\u0512\7\u0097\2\2\u0511\u0510")
        buf.write("\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0514\3\2\2\2\u0513")
        buf.write("\u0515\5\u00a2R\2\u0514\u0513\3\2\2\2\u0514\u0515\3\2")
        buf.write("\2\2\u0515\u0517\3\2\2\2\u0516\u0518\7\u0097\2\2\u0517")
        buf.write("\u0516\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519\3\2\2\2")
        buf.write("\u0519\u051a\5\u0124\u0093\2\u051a\u0538\3\2\2\2\u051b")
        buf.write("\u051d\5\u0124\u0093\2\u051c\u051e\7\u0097\2\2\u051d\u051c")
        buf.write("\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u0520\3\2\2\2\u051f")
        buf.write("\u0521\5\u00a2R\2\u0520\u051f\3\2\2\2\u0520\u0521\3\2")
        buf.write("\2\2\u0521\u0523\3\2\2\2\u0522\u0524\7\u0097\2\2\u0523")
        buf.write("\u0522\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0525\3\2\2\2")
        buf.write("\u0525\u0527\5\u0124\u0093\2\u0526\u0528\7\u0097\2\2\u0527")
        buf.write("\u0526\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u0529\3\2\2\2")
        buf.write("\u0529\u052a\5\u0122\u0092\2\u052a\u0538\3\2\2\2\u052b")
        buf.write("\u052d\5\u0124\u0093\2\u052c\u052e\7\u0097\2\2\u052d\u052c")
        buf.write("\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u0530\3\2\2\2\u052f")
        buf.write("\u0531\5\u00a2R\2\u0530\u052f\3\2\2\2\u0530\u0531\3\2")
        buf.write("\2\2\u0531\u0533\3\2\2\2\u0532\u0534\7\u0097\2\2\u0533")
        buf.write("\u0532\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u0535\3\2\2\2")
        buf.write("\u0535\u0536\5\u0124\u0093\2\u0536\u0538\3\2\2\2\u0537")
        buf.write("\u04f7\3\2\2\2\u0537\u050b\3\2\2\2\u0537\u051b\3\2\2\2")
        buf.write("\u0537\u052b\3\2\2\2\u0538\u00a1\3\2\2\2\u0539\u053b\7")
        buf.write("\7\2\2\u053a\u053c\7\u0097\2\2\u053b\u053a\3\2\2\2\u053b")
        buf.write("\u053c\3\2\2\2\u053c\u0541\3\2\2\2\u053d\u053f\5\u0104")
        buf.write("\u0083\2\u053e\u0540\7\u0097\2\2\u053f\u053e\3\2\2\2\u053f")
        buf.write("\u0540\3\2\2\2\u0540\u0542\3\2\2\2\u0541\u053d\3\2\2\2")
        buf.write("\u0541\u0542\3\2\2\2\u0542\u0547\3\2\2\2\u0543\u0545\5")
        buf.write("\u00a8U\2\u0544\u0546\7\u0097\2\2\u0545\u0544\3\2\2\2")
        buf.write("\u0545\u0546\3\2\2\2\u0546\u0548\3\2\2\2\u0547\u0543\3")
        buf.write("\2\2\2\u0547\u0548\3\2\2\2\u0548\u054a\3\2\2\2\u0549\u054b")
        buf.write("\5\u00aeX\2\u054a\u0549\3\2\2\2\u054a\u054b\3\2\2\2\u054b")
        buf.write("\u0550\3\2\2\2\u054c\u054e\5\u00a4S\2\u054d\u054f\7\u0097")
        buf.write("\2\2\u054e\u054d\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0551")
        buf.write("\3\2\2\2\u0550\u054c\3\2\2\2\u0550\u0551\3\2\2\2\u0551")
        buf.write("\u0552\3\2\2\2\u0552\u0553\7\b\2\2\u0553\u00a3\3\2\2\2")
        buf.write("\u0554\u0558\5\u0112\u008a\2\u0555\u0558\5\u0118\u008d")
        buf.write("\2\u0556\u0558\5\u0116\u008c\2\u0557\u0554\3\2\2\2\u0557")
        buf.write("\u0555\3\2\2\2\u0557\u0556\3\2\2\2\u0558\u00a5\3\2\2\2")
        buf.write("\u0559\u055b\7\r\2\2\u055a\u055c\7\u0097\2\2\u055b\u055a")
        buf.write("\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u055d\3\2\2\2\u055d")
        buf.write("\u055e\5\u00b2Z\2\u055e\u00a7\3\2\2\2\u055f\u0561\7\r")
        buf.write("\2\2\u0560\u0562\7\u0097\2\2\u0561\u0560\3\2\2\2\u0561")
        buf.write("\u0562\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u0571\5\u00b2")
        buf.write("Z\2\u0564\u0566\7\u0097\2\2\u0565\u0564\3\2\2\2\u0565")
        buf.write("\u0566\3\2\2\2\u0566\u0567\3\2\2\2\u0567\u0569\7\13\2")
        buf.write("\2\u0568\u056a\7\r\2\2\u0569\u0568\3\2\2\2\u0569\u056a")
        buf.write("\3\2\2\2\u056a\u056c\3\2\2\2\u056b\u056d\7\u0097\2\2\u056c")
        buf.write("\u056b\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056e\3\2\2\2")
        buf.write("\u056e\u0570\5\u00b2Z\2\u056f\u0565\3\2\2\2\u0570\u0573")
        buf.write("\3\2\2\2\u0571\u056f\3\2\2\2\u0571\u0572\3\2\2\2\u0572")
        buf.write("\u00a9\3\2\2\2\u0573\u0571\3\2\2\2\u0574\u057b\5\u00ac")
        buf.write("W\2\u0575\u0577\7\u0097\2\2\u0576\u0575\3\2\2\2\u0576")
        buf.write("\u0577\3\2\2\2\u0577\u0578\3\2\2\2\u0578\u057a\5\u00ac")
        buf.write("W\2\u0579\u0576\3\2\2\2\u057a\u057d\3\2\2\2\u057b\u0579")
        buf.write("\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u00ab\3\2\2\2\u057d")
        buf.write("\u057b\3\2\2\2\u057e\u0580\7\r\2\2\u057f\u0581\7\u0097")
        buf.write("\2\2\u0580\u057f\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0582")
        buf.write("\3\2\2\2\u0582\u0583\5\u00b0Y\2\u0583\u00ad\3\2\2\2\u0584")
        buf.write("\u0586\7\f\2\2\u0585\u0587\7\u0097\2\2\u0586\u0585\3\2")
        buf.write("\2\2\u0586\u0587\3\2\2\2\u0587\u058c\3\2\2\2\u0588\u058a")
        buf.write("\5\u010c\u0087\2\u0589\u058b\7\u0097\2\2\u058a\u0589\3")
        buf.write("\2\2\2\u058a\u058b\3\2\2\2\u058b\u058d\3\2\2\2\u058c\u0588")
        buf.write("\3\2\2\2\u058c\u058d\3\2\2\2\u058d\u0598\3\2\2\2\u058e")
        buf.write("\u0590\7\16\2\2\u058f\u0591\7\u0097\2\2\u0590\u058f\3")
        buf.write("\2\2\2\u0590\u0591\3\2\2\2\u0591\u0596\3\2\2\2\u0592\u0594")
        buf.write("\5\u010c\u0087\2\u0593\u0595\7\u0097\2\2\u0594\u0593\3")
        buf.write("\2\2\2\u0594\u0595\3\2\2\2\u0595\u0597\3\2\2\2\u0596\u0592")
        buf.write("\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u0599\3\2\2\2\u0598")
        buf.write("\u058e\3\2\2\2\u0598\u0599\3\2\2\2\u0599\u00af\3\2\2\2")
        buf.write("\u059a\u059b\5\u011a\u008e\2\u059b\u00b1\3\2\2\2\u059c")
        buf.write("\u059d\5\u011a\u008e\2\u059d\u00b3\3\2\2\2\u059e\u05a3")
        buf.write("\5\u00dco\2\u059f\u05a1\7\u0097\2\2\u05a0\u059f\3\2\2")
        buf.write("\2\u05a0\u05a1\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a4")
        buf.write("\5\u00dan\2\u05a3\u05a0\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5")
        buf.write("\u05a3\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u00b5\3\2\2\2")
        buf.write("\u05a7\u05a8\5\u00b8]\2\u05a8\u00b7\3\2\2\2\u05a9\u05b0")
        buf.write("\5\u00ba^\2\u05aa\u05ab\7\u0097\2\2\u05ab\u05ac\7h\2\2")
        buf.write("\u05ac\u05ad\7\u0097\2\2\u05ad\u05af\5\u00ba^\2\u05ae")
        buf.write("\u05aa\3\2\2\2\u05af\u05b2\3\2\2\2\u05b0\u05ae\3\2\2\2")
        buf.write("\u05b0\u05b1\3\2\2\2\u05b1\u00b9\3\2\2\2\u05b2\u05b0\3")
        buf.write("\2\2\2\u05b3\u05ba\5\u00bc_\2\u05b4\u05b5\7\u0097\2\2")
        buf.write("\u05b5\u05b6\7i\2\2\u05b6\u05b7\7\u0097\2\2\u05b7\u05b9")
        buf.write("\5\u00bc_\2\u05b8\u05b4\3\2\2\2\u05b9\u05bc\3\2\2\2\u05ba")
        buf.write("\u05b8\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u00bb\3\2\2\2")
        buf.write("\u05bc\u05ba\3\2\2\2\u05bd\u05c4\5\u00be`\2\u05be\u05bf")
        buf.write("\7\u0097\2\2\u05bf\u05c0\7j\2\2\u05c0\u05c1\7\u0097\2")
        buf.write("\2\u05c1\u05c3\5\u00be`\2\u05c2\u05be\3\2\2\2\u05c3\u05c6")
        buf.write("\3\2\2\2\u05c4\u05c2\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5")
        buf.write("\u00bd\3\2\2\2\u05c6\u05c4\3\2\2\2\u05c7\u05c9\7k\2\2")
        buf.write("\u05c8\u05ca\7\u0097\2\2\u05c9\u05c8\3\2\2\2\u05c9\u05ca")
        buf.write("\3\2\2\2\u05ca\u05cc\3\2\2\2\u05cb\u05c7\3\2\2\2\u05cc")
        buf.write("\u05cf\3\2\2\2\u05cd\u05cb\3\2\2\2\u05cd\u05ce\3\2\2\2")
        buf.write("\u05ce\u05d0\3\2\2\2\u05cf\u05cd\3\2\2\2\u05d0\u05d1\5")
        buf.write("\u00c0a\2\u05d1\u00bf\3\2\2\2\u05d2\u05d9\5\u00c4c\2\u05d3")
        buf.write("\u05d5\7\u0097\2\2\u05d4\u05d3\3\2\2\2\u05d4\u05d5\3\2")
        buf.write("\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d8\5\u00c2b\2\u05d7")
        buf.write("\u05d4\3\2\2\2\u05d8\u05db\3\2\2\2\u05d9\u05d7\3\2\2\2")
        buf.write("\u05d9\u05da\3\2\2\2\u05da\u00c1\3\2\2\2\u05db\u05d9\3")
        buf.write("\2\2\2\u05dc\u05de\7\4\2\2\u05dd\u05df\7\u0097\2\2\u05de")
        buf.write("\u05dd\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e0\3\2\2\2")
        buf.write("\u05e0\u05fb\5\u00c4c\2\u05e1\u05e3\7\17\2\2\u05e2\u05e4")
        buf.write("\7\u0097\2\2\u05e3\u05e2\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4")
        buf.write("\u05e5\3\2\2\2\u05e5\u05fb\5\u00c4c\2\u05e6\u05e8\7\20")
        buf.write("\2\2\u05e7\u05e9\7\u0097\2\2\u05e8\u05e7\3\2\2\2\u05e8")
        buf.write("\u05e9\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05fb\5\u00c4")
        buf.write("c\2\u05eb\u05ed\7\21\2\2\u05ec\u05ee\7\u0097\2\2\u05ed")
        buf.write("\u05ec\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05ef\3\2\2\2")
        buf.write("\u05ef\u05fb\5\u00c4c\2\u05f0\u05f2\7\22\2\2\u05f1\u05f3")
        buf.write("\7\u0097\2\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3")
        buf.write("\u05f4\3\2\2\2\u05f4\u05fb\5\u00c4c\2\u05f5\u05f7\7\23")
        buf.write("\2\2\u05f6\u05f8\7\u0097\2\2\u05f7\u05f6\3\2\2\2\u05f7")
        buf.write("\u05f8\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fb\5\u00c4")
        buf.write("c\2\u05fa\u05dc\3\2\2\2\u05fa\u05e1\3\2\2\2\u05fa\u05e6")
        buf.write("\3\2\2\2\u05fa\u05eb\3\2\2\2\u05fa\u05f0\3\2\2\2\u05fa")
        buf.write("\u05f5\3\2\2\2\u05fb\u00c3\3\2\2\2\u05fc\u0602\5\u00ce")
        buf.write("h\2\u05fd\u0601\5\u00c6d\2\u05fe\u0601\5\u00c8e\2\u05ff")
        buf.write("\u0601\5\u00caf\2\u0600\u05fd\3\2\2\2\u0600\u05fe\3\2")
        buf.write("\2\2\u0600\u05ff\3\2\2\2\u0601\u0604\3\2\2\2\u0602\u0600")
        buf.write("\3\2\2\2\u0602\u0603\3\2\2\2\u0603\u00c5\3\2\2\2\u0604")
        buf.write("\u0602\3\2\2\2\u0605\u0611\5\u00ccg\2\u0606\u0607\7\u0097")
        buf.write("\2\2\u0607\u0608\7l\2\2\u0608\u0609\7\u0097\2\2\u0609")
        buf.write("\u0611\7D\2\2\u060a\u060b\7\u0097\2\2\u060b\u060c\7m\2")
        buf.write("\2\u060c\u060d\7\u0097\2\2\u060d\u0611\7D\2\2\u060e\u060f")
        buf.write("\7\u0097\2\2\u060f\u0611\7n\2\2\u0610\u0605\3\2\2\2\u0610")
        buf.write("\u0606\3\2\2\2\u0610\u060a\3\2\2\2\u0610\u060e\3\2\2\2")
        buf.write("\u0611\u0613\3\2\2\2\u0612\u0614\7\u0097\2\2\u0613\u0612")
        buf.write("\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0615\3\2\2\2\u0615")
        buf.write("\u0616\5\u00ceh\2\u0616\u00c7\3\2\2\2\u0617\u0618\7\u0097")
        buf.write("\2\2\u0618\u061a\7R\2\2\u0619\u061b\7\u0097\2\2\u061a")
        buf.write("\u0619\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061c\3\2\2\2")
        buf.write("\u061c\u061d\5\u00ceh\2\u061d\u00c9\3\2\2\2\u061e\u061f")
        buf.write("\7\u0097\2\2\u061f\u0620\7?\2\2\u0620\u0621\7\u0097\2")
        buf.write("\2\u0621\u0629\7o\2\2\u0622\u0623\7\u0097\2\2\u0623\u0624")
        buf.write("\7?\2\2\u0624\u0625\7\u0097\2\2\u0625\u0626\7k\2\2\u0626")
        buf.write("\u0627\7\u0097\2\2\u0627\u0629\7o\2\2\u0628\u061e\3\2")
        buf.write("\2\2\u0628\u0622\3\2\2\2\u0629\u00cb\3\2\2\2\u062a\u062c")
        buf.write("\7\u0097\2\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2\2\u062c")
        buf.write("\u062d\3\2\2\2\u062d\u062e\7\24\2\2\u062e\u00cd\3\2\2")
        buf.write("\2\u062f\u0642\5\u00d0i\2\u0630\u0632\7\u0097\2\2\u0631")
        buf.write("\u0630\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0633\3\2\2\2")
        buf.write("\u0633\u0635\7\25\2\2\u0634\u0636\7\u0097\2\2\u0635\u0634")
        buf.write("\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0637\3\2\2\2\u0637")
        buf.write("\u0641\5\u00d0i\2\u0638\u063a\7\u0097\2\2\u0639\u0638")
        buf.write("\3\2\2\2\u0639\u063a\3\2\2\2\u063a\u063b\3\2\2\2\u063b")
        buf.write("\u063d\7\26\2\2\u063c\u063e\7\u0097\2\2\u063d\u063c\3")
        buf.write("\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0641")
        buf.write("\5\u00d0i\2\u0640\u0631\3\2\2\2\u0640\u0639\3\2\2\2\u0641")
        buf.write("\u0644\3\2\2\2\u0642\u0640\3\2\2\2\u0642\u0643\3\2\2\2")
        buf.write("\u0643\u00cf\3\2\2\2\u0644\u0642\3\2\2\2\u0645\u0660\5")
        buf.write("\u00d2j\2\u0646\u0648\7\u0097\2\2\u0647\u0646\3\2\2\2")
        buf.write("\u0647\u0648\3\2\2\2\u0648\u0649\3\2\2\2\u0649\u064b\7")
        buf.write("\f\2\2\u064a\u064c\7\u0097\2\2\u064b\u064a\3\2\2\2\u064b")
        buf.write("\u064c\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u065f\5\u00d2")
        buf.write("j\2\u064e\u0650\7\u0097\2\2\u064f\u064e\3\2\2\2\u064f")
        buf.write("\u0650\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0653\7\27\2")
        buf.write("\2\u0652\u0654\7\u0097\2\2\u0653\u0652\3\2\2\2\u0653\u0654")
        buf.write("\3\2\2\2\u0654\u0655\3\2\2\2\u0655\u065f\5\u00d2j\2\u0656")
        buf.write("\u0658\7\u0097\2\2\u0657\u0656\3\2\2\2\u0657\u0658\3\2")
        buf.write("\2\2\u0658\u0659\3\2\2\2\u0659\u065b\7\30\2\2\u065a\u065c")
        buf.write("\7\u0097\2\2\u065b\u065a\3\2\2\2\u065b\u065c\3\2\2\2\u065c")
        buf.write("\u065d\3\2\2\2\u065d\u065f\5\u00d2j\2\u065e\u0647\3\2")
        buf.write("\2\2\u065e\u064f\3\2\2\2\u065e\u0657\3\2\2\2\u065f\u0662")
        buf.write("\3\2\2\2\u0660\u065e\3\2\2\2\u0660\u0661\3\2\2\2\u0661")
        buf.write("\u00d1\3\2\2\2\u0662\u0660\3\2\2\2\u0663\u066e\5\u00d4")
        buf.write("k\2\u0664\u0666\7\u0097\2\2\u0665\u0664\3\2\2\2\u0665")
        buf.write("\u0666\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u0669\7\31\2")
        buf.write("\2\u0668\u066a\7\u0097\2\2\u0669\u0668\3\2\2\2\u0669\u066a")
        buf.write("\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u066d\5\u00d4k\2\u066c")
        buf.write("\u0665\3\2\2\2\u066d\u0670\3\2\2\2\u066e\u066c\3\2\2\2")
        buf.write("\u066e\u066f\3\2\2\2\u066f\u00d3\3\2\2\2\u0670\u066e\3")
        buf.write("\2\2\2\u0671\u0678\5\u00d6l\2\u0672\u0674\t\4\2\2\u0673")
        buf.write("\u0675\7\u0097\2\2\u0674\u0673\3\2\2\2\u0674\u0675\3\2")
        buf.write("\2\2\u0675\u0676\3\2\2\2\u0676\u0678\5\u00d6l\2\u0677")
        buf.write("\u0671\3\2\2\2\u0677\u0672\3\2\2\2\u0678\u00d5\3\2\2\2")
        buf.write("\u0679\u0684\5\u00dco\2\u067a\u067c\7\u0097\2\2\u067b")
        buf.write("\u067a\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067d\3\2\2\2")
        buf.write("\u067d\u0683\5\u00d8m\2\u067e\u0680\7\u0097\2\2\u067f")
        buf.write("\u067e\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0681\3\2\2\2")
        buf.write("\u0681\u0683\5\u00dan\2\u0682\u067b\3\2\2\2\u0682\u067f")
        buf.write("\3\2\2\2\u0683\u0686\3\2\2\2\u0684\u0682\3\2\2\2\u0684")
        buf.write("\u0685\3\2\2\2\u0685\u068b\3\2\2\2\u0686\u0684\3\2\2\2")
        buf.write("\u0687\u0689\7\u0097\2\2\u0688\u0687\3\2\2\2\u0688\u0689")
        buf.write("\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u068c\5\u00aaV\2\u068b")
        buf.write("\u0688\3\2\2\2\u068b\u068c\3\2\2\2\u068c\u00d7\3\2\2\2")
        buf.write("\u068d\u068e\7\7\2\2\u068e\u068f\5\u00b6\\\2\u068f\u0690")
        buf.write("\7\b\2\2\u0690\u069b\3\2\2\2\u0691\u0693\7\7\2\2\u0692")
        buf.write("\u0694\5\u00b6\\\2\u0693\u0692\3\2\2\2\u0693\u0694\3\2")
        buf.write("\2\2\u0694\u0695\3\2\2\2\u0695\u0697\7\16\2\2\u0696\u0698")
        buf.write("\5\u00b6\\\2\u0697\u0696\3\2\2\2\u0697\u0698\3\2\2\2\u0698")
        buf.write("\u0699\3\2\2\2\u0699\u069b\7\b\2\2\u069a\u068d\3\2\2\2")
        buf.write("\u069a\u0691\3\2\2\2\u069b\u00d9\3\2\2\2\u069c\u069e\7")
        buf.write("\32\2\2\u069d\u069f\7\u0097\2\2\u069e\u069d\3\2\2\2\u069e")
        buf.write("\u069f\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0\u06a1\5\u0114")
        buf.write("\u008b\2\u06a1\u00db\3\2\2\2\u06a2\u06bf\5\u0106\u0084")
        buf.write("\2\u06a3\u06bf\5\u0118\u008d\2\u06a4\u06bf\5\u0116\u008c")
        buf.write("\2\u06a5\u06bf\5\u00dep\2\u06a6\u06a8\7p\2\2\u06a7\u06a9")
        buf.write("\7\u0097\2\2\u06a8\u06a7\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9")
        buf.write("\u06aa\3\2\2\2\u06aa\u06ac\7\5\2\2\u06ab\u06ad\7\u0097")
        buf.write("\2\2\u06ac\u06ab\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad\u06ae")
        buf.write("\3\2\2\2\u06ae\u06b0\7\f\2\2\u06af\u06b1\7\u0097\2\2\u06b0")
        buf.write("\u06af\3\2\2\2\u06b0\u06b1\3\2\2\2\u06b1\u06b2\3\2\2\2")
        buf.write("\u06b2\u06bf\7\6\2\2\u06b3\u06bf\5\u00e2r\2\u06b4\u06bf")
        buf.write("\5\u00e4s\2\u06b5\u06bf\5\u00e6t\2\u06b6\u06bf\5\u00e8")
        buf.write("u\2\u06b7\u06bf\5\u00eav\2\u06b8\u06bf\5\u0096L\2\u06b9")
        buf.write("\u06bf\5\u00eex\2\u06ba\u06bf\5\u00f0y\2\u06bb\u06bf\5")
        buf.write("\u00f4{\2\u06bc\u06bf\5\u00f8}\2\u06bd\u06bf\5\u0104\u0083")
        buf.write("\2\u06be\u06a2\3\2\2\2\u06be\u06a3\3\2\2\2\u06be\u06a4")
        buf.write("\3\2\2\2\u06be\u06a5\3\2\2\2\u06be\u06a6\3\2\2\2\u06be")
        buf.write("\u06b3\3\2\2\2\u06be\u06b4\3\2\2\2\u06be\u06b5\3\2\2\2")
        buf.write("\u06be\u06b6\3\2\2\2\u06be\u06b7\3\2\2\2\u06be\u06b8\3")
        buf.write("\2\2\2\u06be\u06b9\3\2\2\2\u06be\u06ba\3\2\2\2\u06be\u06bb")
        buf.write("\3\2\2\2\u06be\u06bc\3\2\2\2\u06be\u06bd\3\2\2\2\u06bf")
        buf.write("\u00dd\3\2\2\2\u06c0\u06c5\7q\2\2\u06c1\u06c3\7\u0097")
        buf.write("\2\2\u06c2\u06c1\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c4")
        buf.write("\3\2\2\2\u06c4\u06c6\5\u00e0q\2\u06c5\u06c2\3\2\2\2\u06c6")
        buf.write("\u06c7\3\2\2\2\u06c7\u06c5\3\2\2\2\u06c7\u06c8\3\2\2\2")
        buf.write("\u06c8\u06d7\3\2\2\2\u06c9\u06cb\7q\2\2\u06ca\u06cc\7")
        buf.write("\u0097\2\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc")
        buf.write("\u06cd\3\2\2\2\u06cd\u06d2\5\u00b6\\\2\u06ce\u06d0\7\u0097")
        buf.write("\2\2\u06cf\u06ce\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d1")
        buf.write("\3\2\2\2\u06d1\u06d3\5\u00e0q\2\u06d2\u06cf\3\2\2\2\u06d3")
        buf.write("\u06d4\3\2\2\2\u06d4\u06d2\3\2\2\2\u06d4\u06d5\3\2\2\2")
        buf.write("\u06d5\u06d7\3\2\2\2\u06d6\u06c0\3\2\2\2\u06d6\u06c9\3")
        buf.write("\2\2\2\u06d7\u06e0\3\2\2\2\u06d8\u06da\7\u0097\2\2\u06d9")
        buf.write("\u06d8\3\2\2\2\u06d9\u06da\3\2\2\2\u06da\u06db\3\2\2\2")
        buf.write("\u06db\u06dd\7r\2\2\u06dc\u06de\7\u0097\2\2\u06dd\u06dc")
        buf.write("\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u06df\3\2\2\2\u06df")
        buf.write("\u06e1\5\u00b6\\\2\u06e0\u06d9\3\2\2\2\u06e0\u06e1\3\2")
        buf.write("\2\2\u06e1\u06e3\3\2\2\2\u06e2\u06e4\7\u0097\2\2\u06e3")
        buf.write("\u06e2\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e5\3\2\2\2")
        buf.write("\u06e5\u06e6\7s\2\2\u06e6\u00df\3\2\2\2\u06e7\u06e9\7")
        buf.write("t\2\2\u06e8\u06ea\7\u0097\2\2\u06e9\u06e8\3\2\2\2\u06e9")
        buf.write("\u06ea\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb\u06ed\5\u00b6")
        buf.write("\\\2\u06ec\u06ee\7\u0097\2\2\u06ed\u06ec\3\2\2\2\u06ed")
        buf.write("\u06ee\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f1\7u\2\2")
        buf.write("\u06f0\u06f2\7\u0097\2\2\u06f1\u06f0\3\2\2\2\u06f1\u06f2")
        buf.write("\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f4\5\u00b6\\\2\u06f4")
        buf.write("\u00e1\3\2\2\2\u06f5\u06f7\7\7\2\2\u06f6\u06f8\7\u0097")
        buf.write("\2\2\u06f7\u06f6\3\2\2\2\u06f7\u06f8\3\2\2\2\u06f8\u06f9")
        buf.write("\3\2\2\2\u06f9\u0702\5\u00ecw\2\u06fa\u06fc\7\u0097\2")
        buf.write("\2\u06fb\u06fa\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u06fd")
        buf.write("\3\2\2\2\u06fd\u06ff\7\13\2\2\u06fe\u0700\7\u0097\2\2")
        buf.write("\u06ff\u06fe\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\3")
        buf.write("\2\2\2\u0701\u0703\5\u00b6\\\2\u0702\u06fb\3\2\2\2\u0702")
        buf.write("\u0703\3\2\2\2\u0703\u0705\3\2\2\2\u0704\u0706\7\u0097")
        buf.write("\2\2\u0705\u0704\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0707")
        buf.write("\3\2\2\2\u0707\u0708\7\b\2\2\u0708\u00e3\3\2\2\2\u0709")
        buf.write("\u070b\7\7\2\2\u070a\u070c\7\u0097\2\2\u070b\u070a\3\2")
        buf.write("\2\2\u070b\u070c\3\2\2\2\u070c\u0715\3\2\2\2\u070d\u070f")
        buf.write("\5\u0104\u0083\2\u070e\u0710\7\u0097\2\2\u070f\u070e\3")
        buf.write("\2\2\2\u070f\u0710\3\2\2\2\u0710\u0711\3\2\2\2\u0711\u0713")
        buf.write("\7\4\2\2\u0712\u0714\7\u0097\2\2\u0713\u0712\3\2\2\2\u0713")
        buf.write("\u0714\3\2\2\2\u0714\u0716\3\2\2\2\u0715\u070d\3\2\2\2")
        buf.write("\u0715\u0716\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u0719\5")
        buf.write("\u009aN\2\u0718\u071a\7\u0097\2\2\u0719\u0718\3\2\2\2")
        buf.write("\u0719\u071a\3\2\2\2\u071a\u071f\3\2\2\2\u071b\u071d\5")
        buf.write("\u008eH\2\u071c\u071e\7\u0097\2\2\u071d\u071c\3\2\2\2")
        buf.write("\u071d\u071e\3\2\2\2\u071e\u0720\3\2\2\2\u071f\u071b\3")
        buf.write("\2\2\2\u071f\u0720\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u0723")
        buf.write("\7\13\2\2\u0722\u0724\7\u0097\2\2\u0723\u0722\3\2\2\2")
        buf.write("\u0723\u0724\3\2\2\2\u0724\u0725\3\2\2\2\u0725\u0727\5")
        buf.write("\u00b6\\\2\u0726\u0728\7\u0097\2\2\u0727\u0726\3\2\2\2")
        buf.write("\u0727\u0728\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u072a\7")
        buf.write("\b\2\2\u072a\u00e5\3\2\2\2\u072b\u072d\7v\2\2\u072c\u072e")
        buf.write("\7\u0097\2\2\u072d\u072c\3\2\2\2\u072d\u072e\3\2\2\2\u072e")
        buf.write("\u072f\3\2\2\2\u072f\u0731\7\5\2\2\u0730\u0732\7\u0097")
        buf.write("\2\2\u0731\u0730\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u0733")
        buf.write("\3\2\2\2\u0733\u0735\5\u00ecw\2\u0734\u0736\7\u0097\2")
        buf.write("\2\u0735\u0734\3\2\2\2\u0735\u0736\3\2\2\2\u0736\u0737")
        buf.write("\3\2\2\2\u0737\u0738\7\6\2\2\u0738\u074f\3\2\2\2\u0739")
        buf.write("\u073b\7w\2\2\u073a\u073c\7\u0097\2\2\u073b\u073a\3\2")
        buf.write("\2\2\u073b\u073c\3\2\2\2\u073c\u073d\3\2\2\2\u073d\u073f")
        buf.write("\7\5\2\2\u073e\u0740\7\u0097\2\2\u073f\u073e\3\2\2\2\u073f")
        buf.write("\u0740\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0743\5\u00ec")
        buf.write("w\2\u0742\u0744\7\u0097\2\2\u0743\u0742\3\2\2\2\u0743")
        buf.write("\u0744\3\2\2\2\u0744\u074a\3\2\2\2\u0745\u0747\7\u0097")
        buf.write("\2\2\u0746\u0745\3\2\2\2\u0746\u0747\3\2\2\2\u0747\u0748")
        buf.write("\3\2\2\2\u0748\u0749\7\13\2\2\u0749\u074b\5\u00b6\\\2")
        buf.write("\u074a\u0746\3\2\2\2\u074a\u074b\3\2\2\2\u074b\u074c\3")
        buf.write("\2\2\2\u074c\u074d\7\6\2\2\u074d\u074f\3\2\2\2\u074e\u072b")
        buf.write("\3\2\2\2\u074e\u0739\3\2\2\2\u074f\u00e7\3\2\2\2\u0750")
        buf.write("\u0752\7x\2\2\u0751\u0753\7\u0097\2\2\u0752\u0751\3\2")
        buf.write("\2\2\u0752\u0753\3\2\2\2\u0753\u0754\3\2\2\2\u0754\u0755")
        buf.write("\7\5\2\2\u0755\u0756\5\u0104\u0083\2\u0756\u0757\7\4\2")
        buf.write("\2\u0757\u0758\5\u00b6\\\2\u0758\u0759\7\t\2\2\u0759\u075a")
        buf.write("\5\u00f2z\2\u075a\u075b\7\13\2\2\u075b\u075c\5\u00b6\\")
        buf.write("\2\u075c\u075d\7\6\2\2\u075d\u00e9\3\2\2\2\u075e\u0760")
        buf.write("\78\2\2\u075f\u0761\7\u0097\2\2\u0760\u075f\3\2\2\2\u0760")
        buf.write("\u0761\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u0764\7\5\2\2")
        buf.write("\u0763\u0765\7\u0097\2\2\u0764\u0763\3\2\2\2\u0764\u0765")
        buf.write("\3\2\2\2\u0765\u0766\3\2\2\2\u0766\u0768\5\u00ecw\2\u0767")
        buf.write("\u0769\7\u0097\2\2\u0768\u0767\3\2\2\2\u0768\u0769\3\2")
        buf.write("\2\2\u0769\u076a\3\2\2\2\u076a\u076b\7\6\2\2\u076b\u0797")
        buf.write("\3\2\2\2\u076c\u076e\7y\2\2\u076d\u076f\7\u0097\2\2\u076e")
        buf.write("\u076d\3\2\2\2\u076e\u076f\3\2\2\2\u076f\u0770\3\2\2\2")
        buf.write("\u0770\u0772\7\5\2\2\u0771\u0773\7\u0097\2\2\u0772\u0771")
        buf.write("\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0774\3\2\2\2\u0774")
        buf.write("\u0776\5\u00ecw\2\u0775\u0777\7\u0097\2\2\u0776\u0775")
        buf.write("\3\2\2\2\u0776\u0777\3\2\2\2\u0777\u0778\3\2\2\2\u0778")
        buf.write("\u0779\7\6\2\2\u0779\u0797\3\2\2\2\u077a\u077c\7z\2\2")
        buf.write("\u077b\u077d\7\u0097\2\2\u077c\u077b\3\2\2\2\u077c\u077d")
        buf.write("\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u0780\7\5\2\2\u077f")
        buf.write("\u0781\7\u0097\2\2\u0780\u077f\3\2\2\2\u0780\u0781\3\2")
        buf.write("\2\2\u0781\u0782\3\2\2\2\u0782\u0784\5\u00ecw\2\u0783")
        buf.write("\u0785\7\u0097\2\2\u0784\u0783\3\2\2\2\u0784\u0785\3\2")
        buf.write("\2\2\u0785\u0786\3\2\2\2\u0786\u0787\7\6\2\2\u0787\u0797")
        buf.write("\3\2\2\2\u0788\u078a\7{\2\2\u0789\u078b\7\u0097\2\2\u078a")
        buf.write("\u0789\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078c\3\2\2\2")
        buf.write("\u078c\u078e\7\5\2\2\u078d\u078f\7\u0097\2\2\u078e\u078d")
        buf.write("\3\2\2\2\u078e\u078f\3\2\2\2\u078f\u0790\3\2\2\2\u0790")
        buf.write("\u0792\5\u00ecw\2\u0791\u0793\7\u0097\2\2\u0792\u0791")
        buf.write("\3\2\2\2\u0792\u0793\3\2\2\2\u0793\u0794\3\2\2\2\u0794")
        buf.write("\u0795\7\6\2\2\u0795\u0797\3\2\2\2\u0796\u075e\3\2\2\2")
        buf.write("\u0796\u076c\3\2\2\2\u0796\u077a\3\2\2\2\u0796\u0788\3")
        buf.write("\2\2\2\u0797\u00eb\3\2\2\2\u0798\u079d\5\u00f2z\2\u0799")
        buf.write("\u079b\7\u0097\2\2\u079a\u0799\3\2\2\2\u079a\u079b\3\2")
        buf.write("\2\2\u079b\u079c\3\2\2\2\u079c\u079e\5\u008eH\2\u079d")
        buf.write("\u079a\3\2\2\2\u079d\u079e\3\2\2\2\u079e\u00ed\3\2\2\2")
        buf.write("\u079f\u07a0\5\u009aN\2\u07a0\u00ef\3\2\2\2\u07a1\u07a3")
        buf.write("\7\5\2\2\u07a2\u07a4\7\u0097\2\2\u07a3\u07a2\3\2\2\2\u07a3")
        buf.write("\u07a4\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a7\5\u00b6")
        buf.write("\\\2\u07a6\u07a8\7\u0097\2\2\u07a7\u07a6\3\2\2\2\u07a7")
        buf.write("\u07a8\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07aa\7\6\2\2")
        buf.write("\u07aa\u00f1\3\2\2\2\u07ab\u07ac\5\u0104\u0083\2\u07ac")
        buf.write("\u07ad\7\u0097\2\2\u07ad\u07ae\7R\2\2\u07ae\u07af\7\u0097")
        buf.write("\2\2\u07af\u07b0\5\u00b6\\\2\u07b0\u00f3\3\2\2\2\u07b1")
        buf.write("\u07b3\5\u00f6|\2\u07b2\u07b4\7\u0097\2\2\u07b3\u07b2")
        buf.write("\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5")
        buf.write("\u07b7\7\5\2\2\u07b6\u07b8\7\u0097\2\2\u07b7\u07b6\3\2")
        buf.write("\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07bd\3\2\2\2\u07b9\u07bb")
        buf.write("\7V\2\2\u07ba\u07bc\7\u0097\2\2\u07bb\u07ba\3\2\2\2\u07bb")
        buf.write("\u07bc\3\2\2\2\u07bc\u07be\3\2\2\2\u07bd\u07b9\3\2\2\2")
        buf.write("\u07bd\u07be\3\2\2\2\u07be\u07d0\3\2\2\2\u07bf\u07c1\5")
        buf.write("\u00b6\\\2\u07c0\u07c2\7\u0097\2\2\u07c1\u07c0\3\2\2\2")
        buf.write("\u07c1\u07c2\3\2\2\2\u07c2\u07cd\3\2\2\2\u07c3\u07c5\7")
        buf.write("\t\2\2\u07c4\u07c6\7\u0097\2\2\u07c5\u07c4\3\2\2\2\u07c5")
        buf.write("\u07c6\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07c9\5\u00b6")
        buf.write("\\\2\u07c8\u07ca\7\u0097\2\2\u07c9\u07c8\3\2\2\2\u07c9")
        buf.write("\u07ca\3\2\2\2\u07ca\u07cc\3\2\2\2\u07cb\u07c3\3\2\2\2")
        buf.write("\u07cc\u07cf\3\2\2\2\u07cd\u07cb\3\2\2\2\u07cd\u07ce\3")
        buf.write("\2\2\2\u07ce\u07d1\3\2\2\2\u07cf\u07cd\3\2\2\2\u07d0\u07bf")
        buf.write("\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u07d2\3\2\2\2\u07d2")
        buf.write("\u07d3\7\6\2\2\u07d3\u00f5\3\2\2\2\u07d4\u07d5\5\u0102")
        buf.write("\u0082\2\u07d5\u07d6\5\u011e\u0090\2\u07d6\u00f7\3\2\2")
        buf.write("\2\u07d7\u07d9\7A\2\2\u07d8\u07da\7\u0097\2\2\u07d9\u07d8")
        buf.write("\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07db\3\2\2\2\u07db")
        buf.write("\u07dd\7\33\2\2\u07dc\u07de\7\u0097\2\2\u07dd\u07dc\3")
        buf.write("\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07e7\3\2\2\2\u07df\u07e8")
        buf.write("\5\26\f\2\u07e0\u07e5\5\u0090I\2\u07e1\u07e3\7\u0097\2")
        buf.write("\2\u07e2\u07e1\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e4")
        buf.write("\3\2\2\2\u07e4\u07e6\5\u008eH\2\u07e5\u07e2\3\2\2\2\u07e5")
        buf.write("\u07e6\3\2\2\2\u07e6\u07e8\3\2\2\2\u07e7\u07df\3\2\2\2")
        buf.write("\u07e7\u07e0\3\2\2\2\u07e8\u07ea\3\2\2\2\u07e9\u07eb\7")
        buf.write("\u0097\2\2\u07ea\u07e9\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb")
        buf.write("\u07ec\3\2\2\2\u07ec\u07ed\7\34\2\2\u07ed\u00f9\3\2\2")
        buf.write("\2\u07ee\u07f0\5\u0100\u0081\2\u07ef\u07f1\7\u0097\2\2")
        buf.write("\u07f0\u07ef\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f2\3")
        buf.write("\2\2\2\u07f2\u07f4\7\5\2\2\u07f3\u07f5\7\u0097\2\2\u07f4")
        buf.write("\u07f3\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u0807\3\2\2\2")
        buf.write("\u07f6\u07f8\5\u00b6\\\2\u07f7\u07f9\7\u0097\2\2\u07f8")
        buf.write("\u07f7\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u0804\3\2\2\2")
        buf.write("\u07fa\u07fc\7\t\2\2\u07fb\u07fd\7\u0097\2\2\u07fc\u07fb")
        buf.write("\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe")
        buf.write("\u0800\5\u00b6\\\2\u07ff\u0801\7\u0097\2\2\u0800\u07ff")
        buf.write("\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0803\3\2\2\2\u0802")
        buf.write("\u07fa\3\2\2\2\u0803\u0806\3\2\2\2\u0804\u0802\3\2\2\2")
        buf.write("\u0804\u0805\3\2\2\2\u0805\u0808\3\2\2\2\u0806\u0804\3")
        buf.write("\2\2\2\u0807\u07f6\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u0809")
        buf.write("\3\2\2\2\u0809\u080a\7\6\2\2\u080a\u00fb\3\2\2\2\u080b")
        buf.write("\u080c\5\u0100\u0081\2\u080c\u00fd\3\2\2\2\u080d\u080e")
        buf.write("\5\u011e\u0090\2\u080e\u00ff\3\2\2\2\u080f\u0810\5\u0102")
        buf.write("\u0082\2\u0810\u0811\5\u011e\u0090\2\u0811\u0101\3\2\2")
        buf.write("\2\u0812\u0813\5\u011e\u0090\2\u0813\u0814\7\32\2\2\u0814")
        buf.write("\u0816\3\2\2\2\u0815\u0812\3\2\2\2\u0816\u0819\3\2\2\2")
        buf.write("\u0817\u0815\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u0103\3")
        buf.write("\2\2\2\u0819\u0817\3\2\2\2\u081a\u081b\5\u011e\u0090\2")
        buf.write("\u081b\u0105\3\2\2\2\u081c\u0823\5\u0108\u0085\2\u081d")
        buf.write("\u0823\7o\2\2\u081e\u0823\5\u010a\u0086\2\u081f\u0823")
        buf.write("\7\u008a\2\2\u0820\u0823\5\u0110\u0089\2\u0821\u0823\5")
        buf.write("\u0112\u008a\2\u0822\u081c\3\2\2\2\u0822\u081d\3\2\2\2")
        buf.write("\u0822\u081e\3\2\2\2\u0822\u081f\3\2\2\2\u0822\u0820\3")
        buf.write("\2\2\2\u0822\u0821\3\2\2\2\u0823\u0107\3\2\2\2\u0824\u0825")
        buf.write("\t\5\2\2\u0825\u0109\3\2\2\2\u0826\u0829\5\u010e\u0088")
        buf.write("\2\u0827\u0829\5\u010c\u0087\2\u0828\u0826\3\2\2\2\u0828")
        buf.write("\u0827\3\2\2\2\u0829\u010b\3\2\2\2\u082a\u082b\t\6\2\2")
        buf.write("\u082b\u010d\3\2\2\2\u082c\u082d\t\7\2\2\u082d\u010f\3")
        buf.write("\2\2\2\u082e\u0830\7\7\2\2\u082f\u0831\7\u0097\2\2\u0830")
        buf.write("\u082f\3\2\2\2\u0830\u0831\3\2\2\2\u0831\u0843\3\2\2\2")
        buf.write("\u0832\u0834\5\u00b6\\\2\u0833\u0835\7\u0097\2\2\u0834")
        buf.write("\u0833\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0840\3\2\2\2")
        buf.write("\u0836\u0838\7\t\2\2\u0837\u0839\7\u0097\2\2\u0838\u0837")
        buf.write("\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u083a\3\2\2\2\u083a")
        buf.write("\u083c\5\u00b6\\\2\u083b\u083d\7\u0097\2\2\u083c\u083b")
        buf.write("\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u083f\3\2\2\2\u083e")
        buf.write("\u0836\3\2\2\2\u083f\u0842\3\2\2\2\u0840\u083e\3\2\2\2")
        buf.write("\u0840\u0841\3\2\2\2\u0841\u0844\3\2\2\2\u0842\u0840\3")
        buf.write("\2\2\2\u0843\u0832\3\2\2\2\u0843\u0844\3\2\2\2\u0844\u0845")
        buf.write("\3\2\2\2\u0845\u0846\7\b\2\2\u0846\u0111\3\2\2\2\u0847")
        buf.write("\u0849\7\33\2\2\u0848\u084a\7\u0097\2\2\u0849\u0848\3")
        buf.write("\2\2\2\u0849\u084a\3\2\2\2\u084a\u086c\3\2\2\2\u084b\u084d")
        buf.write("\5\u0114\u008b\2\u084c\u084e\7\u0097\2\2\u084d\u084c\3")
        buf.write("\2\2\2\u084d\u084e\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0851")
        buf.write("\7\r\2\2\u0850\u0852\7\u0097\2\2\u0851\u0850\3\2\2\2\u0851")
        buf.write("\u0852\3\2\2\2\u0852\u0853\3\2\2\2\u0853\u0855\5\u00b6")
        buf.write("\\\2\u0854\u0856\7\u0097\2\2\u0855\u0854\3\2\2\2\u0855")
        buf.write("\u0856\3\2\2\2\u0856\u0869\3\2\2\2\u0857\u0859\7\t\2\2")
        buf.write("\u0858\u085a\7\u0097\2\2\u0859\u0858\3\2\2\2\u0859\u085a")
        buf.write("\3\2\2\2\u085a\u085b\3\2\2\2\u085b\u085d\5\u0114\u008b")
        buf.write("\2\u085c\u085e\7\u0097\2\2\u085d\u085c\3\2\2\2\u085d\u085e")
        buf.write("\3\2\2\2\u085e\u085f\3\2\2\2\u085f\u0861\7\r\2\2\u0860")
        buf.write("\u0862\7\u0097\2\2\u0861\u0860\3\2\2\2\u0861\u0862\3\2")
        buf.write("\2\2\u0862\u0863\3\2\2\2\u0863\u0865\5\u00b6\\\2\u0864")
        buf.write("\u0866\7\u0097\2\2\u0865\u0864\3\2\2\2\u0865\u0866\3\2")
        buf.write("\2\2\u0866\u0868\3\2\2\2\u0867\u0857\3\2\2\2\u0868\u086b")
        buf.write("\3\2\2\2\u0869\u0867\3\2\2\2\u0869\u086a\3\2\2\2\u086a")
        buf.write("\u086d\3\2\2\2\u086b\u0869\3\2\2\2\u086c\u084b\3\2\2\2")
        buf.write("\u086c\u086d\3\2\2\2\u086d\u086e\3\2\2\2\u086e\u086f\7")
        buf.write("\34\2\2\u086f\u0113\3\2\2\2\u0870\u0871\5\u011a\u008e")
        buf.write("\2\u0871\u0115\3\2\2\2\u0872\u0874\7\33\2\2\u0873\u0875")
        buf.write("\7\u0097\2\2\u0874\u0873\3\2\2\2\u0874\u0875\3\2\2\2\u0875")
        buf.write("\u0878\3\2\2\2\u0876\u0879\5\u011e\u0090\2\u0877\u0879")
        buf.write("\7\177\2\2\u0878\u0876\3\2\2\2\u0878\u0877\3\2\2\2\u0879")
        buf.write("\u087b\3\2\2\2\u087a\u087c\7\u0097\2\2\u087b\u087a\3\2")
        buf.write("\2\2\u087b\u087c\3\2\2\2\u087c\u087d\3\2\2\2\u087d\u087e")
        buf.write("\7\34\2\2\u087e\u0117\3\2\2\2\u087f\u0882\7\35\2\2\u0880")
        buf.write("\u0883\5\u011e\u0090\2\u0881\u0883\7\177\2\2\u0882\u0880")
        buf.write("\3\2\2\2\u0882\u0881\3\2\2\2\u0883\u0119\3\2\2\2\u0884")
        buf.write("\u0887\5\u011e\u0090\2\u0885\u0887\5\u011c\u008f\2\u0886")
        buf.write("\u0884\3\2\2\2\u0886\u0885\3\2\2\2\u0887\u011b\3\2\2\2")
        buf.write("\u0888\u0889\t\b\2\2\u0889\u011d\3\2\2\2\u088a\u088b\t")
        buf.write("\t\2\2\u088b\u011f\3\2\2\2\u088c\u088d\t\n\2\2\u088d\u0121")
        buf.write("\3\2\2\2\u088e\u088f\t\13\2\2\u088f\u0123\3\2\2\2\u0890")
        buf.write("\u0891\t\f\2\2\u0891\u0125\3\2\2\2\u016f\u0127\u012c\u012f")
        buf.write("\u0132\u0138\u013c\u0142\u0147\u014d\u0158\u015c\u0162")
        buf.write("\u0167\u016b\u0170\u0175\u0180\u0189\u018e\u0191\u0195")
        buf.write("\u0199\u019d\u01a3\u01a7\u01ac\u01b1\u01b5\u01b8\u01ba")
        buf.write("\u01be\u01c2\u01c7\u01cb\u01d0\u01d4\u01df\u01e6\u01f0")
        buf.write("\u0216\u0221\u0228\u0236\u023d\u0243\u024d\u0251\u0257")
        buf.write("\u025f\u026a\u0270\u027c\u0282\u028e\u0292\u029c\u02a9")
        buf.write("\u02ad\u02b1\u02b7\u02bb\u02be\u02c2\u02cc\u02d3\u02e0")
        buf.write("\u02e4\u02ec\u02f2\u02f6\u02fa\u02ff\u0304\u0308\u030e")
        buf.write("\u0312\u0318\u031c\u0322\u0326\u032a\u032e\u0332\u0336")
        buf.write("\u033b\u0342\u0346\u034b\u0352\u0356\u035a\u0362\u0369")
        buf.write("\u036c\u0374\u0379\u037f\u0382\u0388\u038a\u038e\u0392")
        buf.write("\u0397\u039b\u039e\u03a5\u03ac\u03af\u03b5\u03b8\u03be")
        buf.write("\u03c2\u03c6\u03ca\u03ce\u03d3\u03d8\u03dc\u03e1\u03e4")
        buf.write("\u03ed\u03f6\u03fb\u0408\u040b\u040e\u0422\u0426\u042b")
        buf.write("\u0435\u043b\u043f\u0444\u0448\u044c\u0450\u0456\u045a")
        buf.write("\u045f\u0465\u046e\u0477\u047f\u0485\u0489\u048e\u0497")
        buf.write("\u049b\u04a0\u04a5\u04a9\u04ae\u04b2\u04be\u04c2\u04c7")
        buf.write("\u04ce\u04d2\u04d7\u04db\u04df\u04e1\u04e5\u04e7\u04eb")
        buf.write("\u04ed\u04f3\u04f9\u04fd\u0500\u0503\u0507\u050d\u0511")
        buf.write("\u0514\u0517\u051d\u0520\u0523\u0527\u052d\u0530\u0533")
        buf.write("\u0537\u053b\u053f\u0541\u0545\u0547\u054a\u054e\u0550")
        buf.write("\u0557\u055b\u0561\u0565\u0569\u056c\u0571\u0576\u057b")
        buf.write("\u0580\u0586\u058a\u058c\u0590\u0594\u0596\u0598\u05a0")
        buf.write("\u05a5\u05b0\u05ba\u05c4\u05c9\u05cd\u05d4\u05d9\u05de")
        buf.write("\u05e3\u05e8\u05ed\u05f2\u05f7\u05fa\u0600\u0602\u0610")
        buf.write("\u0613\u061a\u0628\u062b\u0631\u0635\u0639\u063d\u0640")
        buf.write("\u0642\u0647\u064b\u064f\u0653\u0657\u065b\u065e\u0660")
        buf.write("\u0665\u0669\u066e\u0674\u0677\u067b\u067f\u0682\u0684")
        buf.write("\u0688\u068b\u0693\u0697\u069a\u069e\u06a8\u06ac\u06b0")
        buf.write("\u06be\u06c2\u06c7\u06cb\u06cf\u06d4\u06d6\u06d9\u06dd")
        buf.write("\u06e0\u06e3\u06e9\u06ed\u06f1\u06f7\u06fb\u06ff\u0702")
        buf.write("\u0705\u070b\u070f\u0713\u0715\u0719\u071d\u071f\u0723")
        buf.write("\u0727\u072d\u0731\u0735\u073b\u073f\u0743\u0746\u074a")
        buf.write("\u074e\u0752\u0760\u0764\u0768\u076e\u0772\u0776\u077c")
        buf.write("\u0780\u0784\u078a\u078e\u0792\u0796\u079a\u079d\u07a3")
        buf.write("\u07a7\u07b3\u07b7\u07bb\u07bd\u07c1\u07c5\u07c9\u07cd")
        buf.write("\u07d0\u07d9\u07dd\u07e2\u07e5\u07e7\u07ea\u07f0\u07f4")
        buf.write("\u07f8\u07fc\u0800\u0804\u0807\u0817\u0822\u0828\u0830")
        buf.write("\u0834\u0838\u083c\u0840\u0843\u0849\u084d\u0851\u0855")
        buf.write("\u0859\u085d\u0861\u0865\u0869\u086c\u0874\u0878\u087b")
        buf.write("\u0882\u0886")
        return buf.getvalue()


class CypherParser ( Parser ):

    grammarFileName = "Cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'='", "'('", "')'", "'['", "']'", 
                     "','", "'+='", "'|'", "'*'", "':'", "'..'", "'<>'", 
                     "'<'", "'>'", "'<='", "'>='", "'=~'", "'+'", "'-'", 
                     "'/'", "'%'", "'^'", "'.'", "'{'", "'}'", "'$'", "'\u27E8'", 
                     "'\u3008'", "'\uFE64'", "'\uFF1C'", "'\u27E9'", "'\u3009'", 
                     "'\uFE65'", "'\uFF1E'", "'\u00AD'", "'\u2010'", "'\u2011'", 
                     "'\u2012'", "'\u2013'", "'\u2014'", "'\u2015'", "'\u2212'", 
                     "'\uFE58'", "'\uFE63'", "'\uFF0D'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "CYPHER", "EXPLAIN", 
                      "PROFILE", "USING", "PERIODIC", "COMMIT", "UNION", 
                      "ALL", "CREATE", "DROP", "INDEX", "ON", "CONSTRAINT", 
                      "ASSERT", "IS", "UNIQUE", "EXISTS", "LOAD", "CSV", 
                      "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", 
                      "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", "DETACH", 
                      "DELETE", "REMOVE", "FOREACH", "IN", "CALL", "YIELD", 
                      "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", "LIMIT", 
                      "ASCENDING", "ASC", "DESCENDING", "DESC", "JOIN", 
                      "SCAN", "START", "NODE", "RELATIONSHIP", "REL", "WHERE", 
                      "SHORTESTPATH", "ALLSHORTESTPATHS", "OR", "XOR", "AND", 
                      "NOT", "STARTS", "ENDS", "CONTAINS", "NULL", "COUNT", 
                      "CASE", "ELSE", "END", "WHEN", "THEN", "FILTER", "EXTRACT", 
                      "REDUCE", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", 
                      "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", 
                      "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", 
                      "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", 
                      "StringLiteral", "EscapedChar", "DO", "FOR", "REQUIRE", 
                      "MANDATORY", "SCALAR", "OF", "ADD", "UnescapedSymbolicName", 
                      "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", 
                      "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Cypher = 0
    RULE_oC_QueryOptions = 1
    RULE_oC_AnyCypherOption = 2
    RULE_oC_CypherOption = 3
    RULE_oC_VersionNumber = 4
    RULE_oC_Explain = 5
    RULE_oC_Profile = 6
    RULE_oC_ConfigurationOption = 7
    RULE_oC_Statement = 8
    RULE_oC_Query = 9
    RULE_oC_RegularQuery = 10
    RULE_oC_BulkImportQuery = 11
    RULE_oC_PeriodicCommitHint = 12
    RULE_oC_LoadCSVQuery = 13
    RULE_oC_Union = 14
    RULE_oC_SingleQuery = 15
    RULE_oC_SinglePartQuery = 16
    RULE_oC_MultiPartQuery = 17
    RULE_oC_UpdatingClause = 18
    RULE_oC_ReadingClause = 19
    RULE_oC_Command = 20
    RULE_oC_CreateUniqueConstraint = 21
    RULE_oC_CreateNodePropertyExistenceConstraint = 22
    RULE_oC_CreateRelationshipPropertyExistenceConstraint = 23
    RULE_oC_CreateIndex = 24
    RULE_oC_DropUniqueConstraint = 25
    RULE_oC_DropNodePropertyExistenceConstraint = 26
    RULE_oC_DropRelationshipPropertyExistenceConstraint = 27
    RULE_oC_DropIndex = 28
    RULE_oC_Index = 29
    RULE_oC_UniqueConstraint = 30
    RULE_oC_NodePropertyExistenceConstraint = 31
    RULE_oC_RelationshipPropertyExistenceConstraint = 32
    RULE_oC_RelationshipPatternSyntax = 33
    RULE_oC_LoadCSV = 34
    RULE_oC_Match = 35
    RULE_oC_Unwind = 36
    RULE_oC_Merge = 37
    RULE_oC_MergeAction = 38
    RULE_oC_Create = 39
    RULE_oC_CreateUnique = 40
    RULE_oC_Set = 41
    RULE_oC_SetItem = 42
    RULE_oC_Delete = 43
    RULE_oC_Remove = 44
    RULE_oC_RemoveItem = 45
    RULE_oC_Foreach = 46
    RULE_oC_InQueryCall = 47
    RULE_oC_StandaloneCall = 48
    RULE_oC_YieldItems = 49
    RULE_oC_YieldItem = 50
    RULE_oC_With = 51
    RULE_oC_Return = 52
    RULE_oC_ProjectionBody = 53
    RULE_oC_ProjectionItems = 54
    RULE_oC_ProjectionItem = 55
    RULE_oC_Order = 56
    RULE_oC_Skip = 57
    RULE_oC_Limit = 58
    RULE_oC_SortItem = 59
    RULE_oC_Hint = 60
    RULE_oC_Start = 61
    RULE_oC_StartPoint = 62
    RULE_oC_Lookup = 63
    RULE_oC_NodeLookup = 64
    RULE_oC_RelationshipLookup = 65
    RULE_oC_IdentifiedIndexLookup = 66
    RULE_oC_IndexQuery = 67
    RULE_oC_IdLookup = 68
    RULE_oC_LiteralIds = 69
    RULE_oC_Where = 70
    RULE_oC_Pattern = 71
    RULE_oC_PatternPart = 72
    RULE_oC_AnonymousPatternPart = 73
    RULE_oC_ShortestPathPattern = 74
    RULE_oC_PatternElement = 75
    RULE_oC_RelationshipsPattern = 76
    RULE_oC_NodePattern = 77
    RULE_oC_PatternElementChain = 78
    RULE_oC_RelationshipPattern = 79
    RULE_oC_RelationshipDetail = 80
    RULE_oC_Properties = 81
    RULE_oC_RelType = 82
    RULE_oC_RelationshipTypes = 83
    RULE_oC_NodeLabels = 84
    RULE_oC_NodeLabel = 85
    RULE_oC_RangeLiteral = 86
    RULE_oC_LabelName = 87
    RULE_oC_RelTypeName = 88
    RULE_oC_PropertyExpression = 89
    RULE_oC_Expression = 90
    RULE_oC_OrExpression = 91
    RULE_oC_XorExpression = 92
    RULE_oC_AndExpression = 93
    RULE_oC_NotExpression = 94
    RULE_oC_ComparisonExpression = 95
    RULE_oC_PartialComparisonExpression = 96
    RULE_oC_StringListNullPredicateExpression = 97
    RULE_oC_StringPredicateExpression = 98
    RULE_oC_ListPredicateExpression = 99
    RULE_oC_NullPredicateExpression = 100
    RULE_oC_RegularExpression = 101
    RULE_oC_AddOrSubtractExpression = 102
    RULE_oC_MultiplyDivideModuloExpression = 103
    RULE_oC_PowerOfExpression = 104
    RULE_oC_UnaryAddOrSubtractExpression = 105
    RULE_oC_NonArithmeticOperatorExpression = 106
    RULE_oC_ListOperatorExpression = 107
    RULE_oC_PropertyLookup = 108
    RULE_oC_Atom = 109
    RULE_oC_CaseExpression = 110
    RULE_oC_CaseAlternative = 111
    RULE_oC_ListComprehension = 112
    RULE_oC_PatternComprehension = 113
    RULE_oC_LegacyListExpression = 114
    RULE_oC_Reduce = 115
    RULE_oC_Quantifier = 116
    RULE_oC_FilterExpression = 117
    RULE_oC_PatternPredicate = 118
    RULE_oC_ParenthesizedExpression = 119
    RULE_oC_IdInColl = 120
    RULE_oC_FunctionInvocation = 121
    RULE_oC_FunctionName = 122
    RULE_oC_ExistentialSubquery = 123
    RULE_oC_ExplicitProcedureInvocation = 124
    RULE_oC_ImplicitProcedureInvocation = 125
    RULE_oC_ProcedureResultField = 126
    RULE_oC_ProcedureName = 127
    RULE_oC_Namespace = 128
    RULE_oC_Variable = 129
    RULE_oC_Literal = 130
    RULE_oC_BooleanLiteral = 131
    RULE_oC_NumberLiteral = 132
    RULE_oC_IntegerLiteral = 133
    RULE_oC_DoubleLiteral = 134
    RULE_oC_ListLiteral = 135
    RULE_oC_MapLiteral = 136
    RULE_oC_PropertyKeyName = 137
    RULE_oC_LegacyParameter = 138
    RULE_oC_Parameter = 139
    RULE_oC_SchemaName = 140
    RULE_oC_ReservedWord = 141
    RULE_oC_SymbolicName = 142
    RULE_oC_LeftArrowHead = 143
    RULE_oC_RightArrowHead = 144
    RULE_oC_Dash = 145

    ruleNames =  [ "oC_Cypher", "oC_QueryOptions", "oC_AnyCypherOption", 
                   "oC_CypherOption", "oC_VersionNumber", "oC_Explain", 
                   "oC_Profile", "oC_ConfigurationOption", "oC_Statement", 
                   "oC_Query", "oC_RegularQuery", "oC_BulkImportQuery", 
                   "oC_PeriodicCommitHint", "oC_LoadCSVQuery", "oC_Union", 
                   "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_UpdatingClause", "oC_ReadingClause", "oC_Command", 
                   "oC_CreateUniqueConstraint", "oC_CreateNodePropertyExistenceConstraint", 
                   "oC_CreateRelationshipPropertyExistenceConstraint", "oC_CreateIndex", 
                   "oC_DropUniqueConstraint", "oC_DropNodePropertyExistenceConstraint", 
                   "oC_DropRelationshipPropertyExistenceConstraint", "oC_DropIndex", 
                   "oC_Index", "oC_UniqueConstraint", "oC_NodePropertyExistenceConstraint", 
                   "oC_RelationshipPropertyExistenceConstraint", "oC_RelationshipPatternSyntax", 
                   "oC_LoadCSV", "oC_Match", "oC_Unwind", "oC_Merge", "oC_MergeAction", 
                   "oC_Create", "oC_CreateUnique", "oC_Set", "oC_SetItem", 
                   "oC_Delete", "oC_Remove", "oC_RemoveItem", "oC_Foreach", 
                   "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Hint", "oC_Start", 
                   "oC_StartPoint", "oC_Lookup", "oC_NodeLookup", "oC_RelationshipLookup", 
                   "oC_IdentifiedIndexLookup", "oC_IndexQuery", "oC_IdLookup", 
                   "oC_LiteralIds", "oC_Where", "oC_Pattern", "oC_PatternPart", 
                   "oC_AnonymousPatternPart", "oC_ShortestPathPattern", 
                   "oC_PatternElement", "oC_RelationshipsPattern", "oC_NodePattern", 
                   "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
                   "oC_Properties", "oC_RelType", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringListNullPredicateExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_RegularExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_NonArithmeticOperatorExpression", 
                   "oC_ListOperatorExpression", "oC_PropertyLookup", "oC_Atom", 
                   "oC_CaseExpression", "oC_CaseAlternative", "oC_ListComprehension", 
                   "oC_PatternComprehension", "oC_LegacyListExpression", 
                   "oC_Reduce", "oC_Quantifier", "oC_FilterExpression", 
                   "oC_PatternPredicate", "oC_ParenthesizedExpression", 
                   "oC_IdInColl", "oC_FunctionInvocation", "oC_FunctionName", 
                   "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_LegacyParameter", "oC_Parameter", 
                   "oC_SchemaName", "oC_ReservedWord", "oC_SymbolicName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    CYPHER=47
    EXPLAIN=48
    PROFILE=49
    USING=50
    PERIODIC=51
    COMMIT=52
    UNION=53
    ALL=54
    CREATE=55
    DROP=56
    INDEX=57
    ON=58
    CONSTRAINT=59
    ASSERT=60
    IS=61
    UNIQUE=62
    EXISTS=63
    LOAD=64
    CSV=65
    WITH=66
    HEADERS=67
    FROM=68
    AS=69
    FIELDTERMINATOR=70
    OPTIONAL=71
    MATCH=72
    UNWIND=73
    MERGE=74
    SET=75
    DETACH=76
    DELETE=77
    REMOVE=78
    FOREACH=79
    IN=80
    CALL=81
    YIELD=82
    RETURN=83
    DISTINCT=84
    ORDER=85
    BY=86
    L_SKIP=87
    LIMIT=88
    ASCENDING=89
    ASC=90
    DESCENDING=91
    DESC=92
    JOIN=93
    SCAN=94
    START=95
    NODE=96
    RELATIONSHIP=97
    REL=98
    WHERE=99
    SHORTESTPATH=100
    ALLSHORTESTPATHS=101
    OR=102
    XOR=103
    AND=104
    NOT=105
    STARTS=106
    ENDS=107
    CONTAINS=108
    NULL=109
    COUNT=110
    CASE=111
    ELSE=112
    END=113
    WHEN=114
    THEN=115
    FILTER=116
    EXTRACT=117
    REDUCE=118
    ANY=119
    NONE=120
    SINGLE=121
    TRUE=122
    FALSE=123
    HexInteger=124
    DecimalInteger=125
    OctalInteger=126
    HexLetter=127
    HexDigit=128
    Digit=129
    NonZeroDigit=130
    NonZeroOctDigit=131
    OctDigit=132
    ZeroDigit=133
    ExponentDecimalReal=134
    RegularDecimalReal=135
    StringLiteral=136
    EscapedChar=137
    DO=138
    FOR=139
    REQUIRE=140
    MANDATORY=141
    SCALAR=142
    OF=143
    ADD=144
    UnescapedSymbolicName=145
    IdentifierStart=146
    IdentifierPart=147
    EscapedSymbolicName=148
    SP=149
    WHITESPACE=150
    Comment=151

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_QueryOptions(self):
            return self.getTypedRuleContext(CypherParser.OC_QueryOptionsContext,0)


        def oC_Statement(self):
            return self.getTypedRuleContext(CypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(CypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = CypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 292
                self.match(CypherParser.SP)


            self.state = 295
            self.oC_QueryOptions()
            self.state = 296
            self.oC_Statement()
            self.state = 301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 297
                    self.match(CypherParser.SP)


                self.state = 300
                self.match(CypherParser.T__0)


            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 303
                self.match(CypherParser.SP)


            self.state = 306
            self.match(CypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QueryOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AnyCypherOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_AnyCypherOptionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_AnyCypherOptionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_QueryOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_QueryOptions" ):
                listener.enterOC_QueryOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_QueryOptions" ):
                listener.exitOC_QueryOptions(self)




    def oC_QueryOptions(self):

        localctx = CypherParser.OC_QueryOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_QueryOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.CYPHER) | (1 << CypherParser.EXPLAIN) | (1 << CypherParser.PROFILE))) != 0):
                self.state = 308
                self.oC_AnyCypherOption()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 309
                    self.match(CypherParser.SP)


                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnyCypherOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_CypherOption(self):
            return self.getTypedRuleContext(CypherParser.OC_CypherOptionContext,0)


        def oC_Explain(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplainContext,0)


        def oC_Profile(self):
            return self.getTypedRuleContext(CypherParser.OC_ProfileContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_AnyCypherOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnyCypherOption" ):
                listener.enterOC_AnyCypherOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnyCypherOption" ):
                listener.exitOC_AnyCypherOption(self)




    def oC_AnyCypherOption(self):

        localctx = CypherParser.OC_AnyCypherOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_AnyCypherOption)
        try:
            self.state = 320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.CYPHER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.oC_CypherOption()
                pass
            elif token in [CypherParser.EXPLAIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.oC_Explain()
                pass
            elif token in [CypherParser.PROFILE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 319
                self.oC_Profile()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CypherOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CYPHER(self):
            return self.getToken(CypherParser.CYPHER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_VersionNumber(self):
            return self.getTypedRuleContext(CypherParser.OC_VersionNumberContext,0)


        def oC_ConfigurationOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ConfigurationOptionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ConfigurationOptionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CypherOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CypherOption" ):
                listener.enterOC_CypherOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CypherOption" ):
                listener.exitOC_CypherOption(self)




    def oC_CypherOption(self):

        localctx = CypherParser.OC_CypherOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_CypherOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(CypherParser.CYPHER)
            self.state = 325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 323
                self.match(CypherParser.SP)
                self.state = 324
                self.oC_VersionNumber()


            self.state = 331
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 327
                    self.match(CypherParser.SP)
                    self.state = 328
                    self.oC_ConfigurationOption() 
                self.state = 333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VersionNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RegularDecimalReal(self):
            return self.getToken(CypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_VersionNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_VersionNumber" ):
                listener.enterOC_VersionNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_VersionNumber" ):
                listener.exitOC_VersionNumber(self)




    def oC_VersionNumber(self):

        localctx = CypherParser.OC_VersionNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_oC_VersionNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(CypherParser.RegularDecimalReal)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(CypherParser.EXPLAIN, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Explain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Explain" ):
                listener.enterOC_Explain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Explain" ):
                listener.exitOC_Explain(self)




    def oC_Explain(self):

        localctx = CypherParser.OC_ExplainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_oC_Explain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(CypherParser.EXPLAIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProfileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROFILE(self):
            return self.getToken(CypherParser.PROFILE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Profile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Profile" ):
                listener.enterOC_Profile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Profile" ):
                listener.exitOC_Profile(self)




    def oC_Profile(self):

        localctx = CypherParser.OC_ProfileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_Profile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(CypherParser.PROFILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ConfigurationOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ConfigurationOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ConfigurationOption" ):
                listener.enterOC_ConfigurationOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ConfigurationOption" ):
                listener.exitOC_ConfigurationOption(self)




    def oC_ConfigurationOption(self):

        localctx = CypherParser.OC_ConfigurationOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_oC_ConfigurationOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.oC_SymbolicName()
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 341
                self.match(CypherParser.SP)


            self.state = 344
            self.match(CypherParser.T__1)
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 345
                self.match(CypherParser.SP)


            self.state = 348
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Command(self):
            return self.getTypedRuleContext(CypherParser.OC_CommandContext,0)


        def oC_Query(self):
            return self.getTypedRuleContext(CypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = CypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_Statement)
        try:
            self.state = 352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 350
                self.oC_Command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 351
                self.oC_Query()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(CypherParser.OC_StandaloneCallContext,0)


        def oC_BulkImportQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_BulkImportQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = CypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_oC_Query)
        try:
            self.state = 357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 354
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 355
                self.oC_StandaloneCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 356
                self.oC_BulkImportQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = CypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.oC_SingleQuery()
            self.state = 366
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 360
                        self.match(CypherParser.SP)


                    self.state = 363
                    self.oC_Union() 
                self.state = 368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BulkImportQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PeriodicCommitHint(self):
            return self.getTypedRuleContext(CypherParser.OC_PeriodicCommitHintContext,0)


        def oC_LoadCSVQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_LoadCSVQueryContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_BulkImportQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BulkImportQuery" ):
                listener.enterOC_BulkImportQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BulkImportQuery" ):
                listener.exitOC_BulkImportQuery(self)




    def oC_BulkImportQuery(self):

        localctx = CypherParser.OC_BulkImportQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_BulkImportQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.oC_PeriodicCommitHint()
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 370
                self.match(CypherParser.SP)


            self.state = 373
            self.oC_LoadCSVQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PeriodicCommitHintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(CypherParser.USING, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def PERIODIC(self):
            return self.getToken(CypherParser.PERIODIC, 0)

        def COMMIT(self):
            return self.getToken(CypherParser.COMMIT, 0)

        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PeriodicCommitHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PeriodicCommitHint" ):
                listener.enterOC_PeriodicCommitHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PeriodicCommitHint" ):
                listener.exitOC_PeriodicCommitHint(self)




    def oC_PeriodicCommitHint(self):

        localctx = CypherParser.OC_PeriodicCommitHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_oC_PeriodicCommitHint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(CypherParser.USING)
            self.state = 376
            self.match(CypherParser.SP)
            self.state = 377
            self.match(CypherParser.PERIODIC)
            self.state = 378
            self.match(CypherParser.SP)
            self.state = 379
            self.match(CypherParser.COMMIT)
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 380
                self.match(CypherParser.SP)
                self.state = 381
                self.oC_IntegerLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LoadCSVQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LoadCSV(self):
            return self.getTypedRuleContext(CypherParser.OC_LoadCSVContext,0)


        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LoadCSVQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LoadCSVQuery" ):
                listener.enterOC_LoadCSVQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LoadCSVQuery" ):
                listener.exitOC_LoadCSVQuery(self)




    def oC_LoadCSVQuery(self):

        localctx = CypherParser.OC_LoadCSVQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_oC_LoadCSVQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.oC_LoadCSV()
            self.state = 385
            self.oC_SingleQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = CypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 387
                self.match(CypherParser.UNION)
                self.state = 388
                self.match(CypherParser.SP)
                self.state = 389
                self.match(CypherParser.ALL)
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 390
                    self.match(CypherParser.SP)


                self.state = 393
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 394
                self.match(CypherParser.UNION)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 395
                    self.match(CypherParser.SP)


                self.state = 398
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = CypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_SingleQuery)
        try:
            self.state = 403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 401
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 402
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(CypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = CypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CypherParser.LOAD - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.CALL - 64)) | (1 << (CypherParser.START - 64)))) != 0):
                    self.state = 405
                    self.oC_ReadingClause()
                    self.state = 407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 406
                        self.match(CypherParser.SP)


                    self.state = 413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 414
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CypherParser.LOAD - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.CALL - 64)) | (1 << (CypherParser.START - 64)))) != 0):
                    self.state = 415
                    self.oC_ReadingClause()
                    self.state = 417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 416
                        self.match(CypherParser.SP)


                    self.state = 423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 424
                self.oC_UpdatingClause()
                self.state = 431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 426
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 425
                            self.match(CypherParser.SP)


                        self.state = 428
                        self.oC_UpdatingClause() 
                    self.state = 433
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                self.state = 438
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 434
                        self.match(CypherParser.SP)


                    self.state = 437
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_WithContext,i)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = CypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_MultiPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CypherParser.LOAD - 64)) | (1 << (CypherParser.OPTIONAL - 64)) | (1 << (CypherParser.MATCH - 64)) | (1 << (CypherParser.UNWIND - 64)) | (1 << (CypherParser.CALL - 64)) | (1 << (CypherParser.START - 64)))) != 0):
                        self.state = 442
                        self.oC_ReadingClause()
                        self.state = 444
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 443
                            self.match(CypherParser.SP)


                        self.state = 450
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CypherParser.CREATE - 55)) | (1 << (CypherParser.MERGE - 55)) | (1 << (CypherParser.SET - 55)) | (1 << (CypherParser.DETACH - 55)) | (1 << (CypherParser.DELETE - 55)) | (1 << (CypherParser.REMOVE - 55)) | (1 << (CypherParser.FOREACH - 55)))) != 0):
                        self.state = 451
                        self.oC_UpdatingClause()
                        self.state = 453
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 452
                            self.match(CypherParser.SP)


                        self.state = 459
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 460
                    self.oC_With()
                    self.state = 462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 461
                        self.match(CypherParser.SP)



                else:
                    raise NoViableAltException(self)
                self.state = 466 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 468
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(CypherParser.OC_MergeContext,0)


        def oC_CreateUnique(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateUniqueContext,0)


        def oC_Foreach(self):
            return self.getTypedRuleContext(CypherParser.OC_ForeachContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(CypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(CypherParser.OC_RemoveContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = CypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_oC_UpdatingClause)
        try:
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                self.oC_Create()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.oC_Merge()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 472
                self.oC_CreateUnique()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 473
                self.oC_Foreach()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 474
                self.oC_Delete()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 475
                self.oC_Set()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 476
                self.oC_Remove()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LoadCSV(self):
            return self.getTypedRuleContext(CypherParser.OC_LoadCSVContext,0)


        def oC_Start(self):
            return self.getTypedRuleContext(CypherParser.OC_StartContext,0)


        def oC_Match(self):
            return self.getTypedRuleContext(CypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(CypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(CypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = CypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_ReadingClause)
        try:
            self.state = 484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.LOAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 479
                self.oC_LoadCSV()
                pass
            elif token in [CypherParser.START]:
                self.enterOuterAlt(localctx, 2)
                self.state = 480
                self.oC_Start()
                pass
            elif token in [CypherParser.OPTIONAL, CypherParser.MATCH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 481
                self.oC_Match()
                pass
            elif token in [CypherParser.UNWIND]:
                self.enterOuterAlt(localctx, 4)
                self.state = 482
                self.oC_Unwind()
                pass
            elif token in [CypherParser.CALL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 483
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_CreateIndex(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateIndexContext,0)


        def oC_DropIndex(self):
            return self.getTypedRuleContext(CypherParser.OC_DropIndexContext,0)


        def oC_CreateUniqueConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateUniqueConstraintContext,0)


        def oC_DropUniqueConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_DropUniqueConstraintContext,0)


        def oC_CreateNodePropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateNodePropertyExistenceConstraintContext,0)


        def oC_DropNodePropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_DropNodePropertyExistenceConstraintContext,0)


        def oC_CreateRelationshipPropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateRelationshipPropertyExistenceConstraintContext,0)


        def oC_DropRelationshipPropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_DropRelationshipPropertyExistenceConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Command" ):
                listener.enterOC_Command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Command" ):
                listener.exitOC_Command(self)




    def oC_Command(self):

        localctx = CypherParser.OC_CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_Command)
        try:
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.oC_CreateIndex()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.oC_DropIndex()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 488
                self.oC_CreateUniqueConstraint()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 489
                self.oC_DropUniqueConstraint()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 490
                self.oC_CreateNodePropertyExistenceConstraint()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 491
                self.oC_DropNodePropertyExistenceConstraint()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 492
                self.oC_CreateRelationshipPropertyExistenceConstraint()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 493
                self.oC_DropRelationshipPropertyExistenceConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateUniqueConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_UniqueConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_UniqueConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CreateUniqueConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CreateUniqueConstraint" ):
                listener.enterOC_CreateUniqueConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CreateUniqueConstraint" ):
                listener.exitOC_CreateUniqueConstraint(self)




    def oC_CreateUniqueConstraint(self):

        localctx = CypherParser.OC_CreateUniqueConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_CreateUniqueConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(CypherParser.CREATE)
            self.state = 497
            self.match(CypherParser.SP)
            self.state = 498
            self.oC_UniqueConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateNodePropertyExistenceConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_NodePropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePropertyExistenceConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CreateNodePropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CreateNodePropertyExistenceConstraint" ):
                listener.enterOC_CreateNodePropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CreateNodePropertyExistenceConstraint" ):
                listener.exitOC_CreateNodePropertyExistenceConstraint(self)




    def oC_CreateNodePropertyExistenceConstraint(self):

        localctx = CypherParser.OC_CreateNodePropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_CreateNodePropertyExistenceConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(CypherParser.CREATE)
            self.state = 501
            self.match(CypherParser.SP)
            self.state = 502
            self.oC_NodePropertyExistenceConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateRelationshipPropertyExistenceConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_RelationshipPropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPropertyExistenceConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CreateRelationshipPropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CreateRelationshipPropertyExistenceConstraint" ):
                listener.enterOC_CreateRelationshipPropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CreateRelationshipPropertyExistenceConstraint" ):
                listener.exitOC_CreateRelationshipPropertyExistenceConstraint(self)




    def oC_CreateRelationshipPropertyExistenceConstraint(self):

        localctx = CypherParser.OC_CreateRelationshipPropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_oC_CreateRelationshipPropertyExistenceConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(CypherParser.CREATE)
            self.state = 505
            self.match(CypherParser.SP)
            self.state = 506
            self.oC_RelationshipPropertyExistenceConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Index(self):
            return self.getTypedRuleContext(CypherParser.OC_IndexContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CreateIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CreateIndex" ):
                listener.enterOC_CreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CreateIndex" ):
                listener.exitOC_CreateIndex(self)




    def oC_CreateIndex(self):

        localctx = CypherParser.OC_CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_CreateIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(CypherParser.CREATE)
            self.state = 509
            self.match(CypherParser.SP)
            self.state = 510
            self.oC_Index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DropUniqueConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_UniqueConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_UniqueConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_DropUniqueConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DropUniqueConstraint" ):
                listener.enterOC_DropUniqueConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DropUniqueConstraint" ):
                listener.exitOC_DropUniqueConstraint(self)




    def oC_DropUniqueConstraint(self):

        localctx = CypherParser.OC_DropUniqueConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_DropUniqueConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(CypherParser.DROP)
            self.state = 513
            self.match(CypherParser.SP)
            self.state = 514
            self.oC_UniqueConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DropNodePropertyExistenceConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_NodePropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePropertyExistenceConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_DropNodePropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DropNodePropertyExistenceConstraint" ):
                listener.enterOC_DropNodePropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DropNodePropertyExistenceConstraint" ):
                listener.exitOC_DropNodePropertyExistenceConstraint(self)




    def oC_DropNodePropertyExistenceConstraint(self):

        localctx = CypherParser.OC_DropNodePropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_DropNodePropertyExistenceConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(CypherParser.DROP)
            self.state = 517
            self.match(CypherParser.SP)
            self.state = 518
            self.oC_NodePropertyExistenceConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DropRelationshipPropertyExistenceConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_RelationshipPropertyExistenceConstraint(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPropertyExistenceConstraintContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_DropRelationshipPropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DropRelationshipPropertyExistenceConstraint" ):
                listener.enterOC_DropRelationshipPropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DropRelationshipPropertyExistenceConstraint" ):
                listener.exitOC_DropRelationshipPropertyExistenceConstraint(self)




    def oC_DropRelationshipPropertyExistenceConstraint(self):

        localctx = CypherParser.OC_DropRelationshipPropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_DropRelationshipPropertyExistenceConstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(CypherParser.DROP)
            self.state = 521
            self.match(CypherParser.SP)
            self.state = 522
            self.oC_RelationshipPropertyExistenceConstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DropIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Index(self):
            return self.getTypedRuleContext(CypherParser.OC_IndexContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_DropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DropIndex" ):
                listener.enterOC_DropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DropIndex" ):
                listener.exitOC_DropIndex(self)




    def oC_DropIndex(self):

        localctx = CypherParser.OC_DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_DropIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(CypherParser.DROP)
            self.state = 525
            self.match(CypherParser.SP)
            self.state = 526
            self.oC_Index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def oC_NodeLabel(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Index" ):
                listener.enterOC_Index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Index" ):
                listener.exitOC_Index(self)




    def oC_Index(self):

        localctx = CypherParser.OC_IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_Index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(CypherParser.INDEX)
            self.state = 529
            self.match(CypherParser.SP)
            self.state = 530
            self.match(CypherParser.ON)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 531
                self.match(CypherParser.SP)


            self.state = 534
            self.oC_NodeLabel()
            self.state = 535
            self.match(CypherParser.T__2)
            self.state = 536
            self.oC_PropertyKeyName()
            self.state = 537
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UniqueConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabel(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,0)


        def ASSERT(self):
            return self.getToken(CypherParser.ASSERT, 0)

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_UniqueConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UniqueConstraint" ):
                listener.enterOC_UniqueConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UniqueConstraint" ):
                listener.exitOC_UniqueConstraint(self)




    def oC_UniqueConstraint(self):

        localctx = CypherParser.OC_UniqueConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_UniqueConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(CypherParser.CONSTRAINT)
            self.state = 540
            self.match(CypherParser.SP)
            self.state = 541
            self.match(CypherParser.ON)
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 542
                self.match(CypherParser.SP)


            self.state = 545
            self.match(CypherParser.T__2)
            self.state = 546
            self.oC_Variable()
            self.state = 547
            self.oC_NodeLabel()
            self.state = 548
            self.match(CypherParser.T__3)
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 549
                self.match(CypherParser.SP)


            self.state = 552
            self.match(CypherParser.ASSERT)
            self.state = 553
            self.match(CypherParser.SP)
            self.state = 554
            self.oC_PropertyExpression()
            self.state = 555
            self.match(CypherParser.SP)
            self.state = 556
            self.match(CypherParser.IS)
            self.state = 557
            self.match(CypherParser.SP)
            self.state = 558
            self.match(CypherParser.UNIQUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePropertyExistenceConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabel(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,0)


        def ASSERT(self):
            return self.getToken(CypherParser.ASSERT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodePropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePropertyExistenceConstraint" ):
                listener.enterOC_NodePropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePropertyExistenceConstraint" ):
                listener.exitOC_NodePropertyExistenceConstraint(self)




    def oC_NodePropertyExistenceConstraint(self):

        localctx = CypherParser.OC_NodePropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_NodePropertyExistenceConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(CypherParser.CONSTRAINT)
            self.state = 561
            self.match(CypherParser.SP)
            self.state = 562
            self.match(CypherParser.ON)
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 563
                self.match(CypherParser.SP)


            self.state = 566
            self.match(CypherParser.T__2)
            self.state = 567
            self.oC_Variable()
            self.state = 568
            self.oC_NodeLabel()
            self.state = 569
            self.match(CypherParser.T__3)
            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 570
                self.match(CypherParser.SP)


            self.state = 573
            self.match(CypherParser.ASSERT)
            self.state = 574
            self.match(CypherParser.SP)
            self.state = 575
            self.match(CypherParser.EXISTS)
            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 576
                self.match(CypherParser.SP)


            self.state = 579
            self.match(CypherParser.T__2)
            self.state = 580
            self.oC_PropertyExpression()
            self.state = 581
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPropertyExistenceConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def oC_RelationshipPatternSyntax(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPatternSyntaxContext,0)


        def ASSERT(self):
            return self.getToken(CypherParser.ASSERT, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipPropertyExistenceConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPropertyExistenceConstraint" ):
                listener.enterOC_RelationshipPropertyExistenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPropertyExistenceConstraint" ):
                listener.exitOC_RelationshipPropertyExistenceConstraint(self)




    def oC_RelationshipPropertyExistenceConstraint(self):

        localctx = CypherParser.OC_RelationshipPropertyExistenceConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_RelationshipPropertyExistenceConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(CypherParser.CONSTRAINT)
            self.state = 584
            self.match(CypherParser.SP)
            self.state = 585
            self.match(CypherParser.ON)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 586
                self.match(CypherParser.SP)


            self.state = 589
            self.oC_RelationshipPatternSyntax()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 590
                self.match(CypherParser.SP)


            self.state = 593
            self.match(CypherParser.ASSERT)
            self.state = 594
            self.match(CypherParser.SP)
            self.state = 595
            self.match(CypherParser.EXISTS)
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 596
                self.match(CypherParser.SP)


            self.state = 599
            self.match(CypherParser.T__2)
            self.state = 600
            self.oC_PropertyExpression()
            self.state = 601
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternSyntaxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_DashContext,i)


        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_RelType(self):
            return self.getTypedRuleContext(CypherParser.OC_RelTypeContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_RightArrowHeadContext,0)


        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_LeftArrowHeadContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipPatternSyntax

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPatternSyntax" ):
                listener.enterOC_RelationshipPatternSyntax(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPatternSyntax" ):
                listener.exitOC_RelationshipPatternSyntax(self)




    def oC_RelationshipPatternSyntax(self):

        localctx = CypherParser.OC_RelationshipPatternSyntaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_RelationshipPatternSyntax)
        self._la = 0 # Token type
        try:
            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 603
                self.match(CypherParser.T__2)
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 604
                    self.match(CypherParser.SP)


                self.state = 607
                self.match(CypherParser.T__3)
                self.state = 608
                self.oC_Dash()
                self.state = 609
                self.match(CypherParser.T__4)
                self.state = 610
                self.oC_Variable()
                self.state = 611
                self.oC_RelType()
                self.state = 612
                self.match(CypherParser.T__5)
                self.state = 613
                self.oC_Dash()
                self.state = 614
                self.match(CypherParser.T__2)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 615
                    self.match(CypherParser.SP)


                self.state = 618
                self.match(CypherParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 620
                self.match(CypherParser.T__2)
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 621
                    self.match(CypherParser.SP)


                self.state = 624
                self.match(CypherParser.T__3)
                self.state = 625
                self.oC_Dash()
                self.state = 626
                self.match(CypherParser.T__4)
                self.state = 627
                self.oC_Variable()
                self.state = 628
                self.oC_RelType()
                self.state = 629
                self.match(CypherParser.T__5)
                self.state = 630
                self.oC_Dash()
                self.state = 631
                self.oC_RightArrowHead()
                self.state = 632
                self.match(CypherParser.T__2)
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 633
                    self.match(CypherParser.SP)


                self.state = 636
                self.match(CypherParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 638
                self.match(CypherParser.T__2)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 639
                    self.match(CypherParser.SP)


                self.state = 642
                self.match(CypherParser.T__3)
                self.state = 643
                self.oC_LeftArrowHead()
                self.state = 644
                self.oC_Dash()
                self.state = 645
                self.match(CypherParser.T__4)
                self.state = 646
                self.oC_Variable()
                self.state = 647
                self.oC_RelType()
                self.state = 648
                self.match(CypherParser.T__5)
                self.state = 649
                self.oC_Dash()
                self.state = 650
                self.match(CypherParser.T__2)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 651
                    self.match(CypherParser.SP)


                self.state = 654
                self.match(CypherParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LoadCSVContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(CypherParser.LOAD, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def CSV(self):
            return self.getToken(CypherParser.CSV, 0)

        def FROM(self):
            return self.getToken(CypherParser.FROM, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def HEADERS(self):
            return self.getToken(CypherParser.HEADERS, 0)

        def FIELDTERMINATOR(self):
            return self.getToken(CypherParser.FIELDTERMINATOR, 0)

        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_LoadCSV

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LoadCSV" ):
                listener.enterOC_LoadCSV(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LoadCSV" ):
                listener.exitOC_LoadCSV(self)




    def oC_LoadCSV(self):

        localctx = CypherParser.OC_LoadCSVContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_LoadCSV)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(CypherParser.LOAD)
            self.state = 659
            self.match(CypherParser.SP)
            self.state = 660
            self.match(CypherParser.CSV)
            self.state = 661
            self.match(CypherParser.SP)
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.WITH:
                self.state = 662
                self.match(CypherParser.WITH)
                self.state = 663
                self.match(CypherParser.SP)
                self.state = 664
                self.match(CypherParser.HEADERS)
                self.state = 665
                self.match(CypherParser.SP)


            self.state = 668
            self.match(CypherParser.FROM)
            self.state = 669
            self.match(CypherParser.SP)
            self.state = 670
            self.oC_Expression()
            self.state = 671
            self.match(CypherParser.SP)
            self.state = 672
            self.match(CypherParser.AS)
            self.state = 673
            self.match(CypherParser.SP)
            self.state = 674
            self.oC_Variable()
            self.state = 675
            self.match(CypherParser.SP)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.FIELDTERMINATOR:
                self.state = 676
                self.match(CypherParser.FIELDTERMINATOR)
                self.state = 677
                self.match(CypherParser.SP)
                self.state = 678
                self.match(CypherParser.StringLiteral)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_HintContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_HintContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = CypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.OPTIONAL:
                self.state = 681
                self.match(CypherParser.OPTIONAL)
                self.state = 682
                self.match(CypherParser.SP)


            self.state = 685
            self.match(CypherParser.MATCH)
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 686
                self.match(CypherParser.SP)


            self.state = 689
            self.oC_Pattern()
            self.state = 693
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 690
                    self.oC_Hint() 
                self.state = 695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 696
                    self.match(CypherParser.SP)


                self.state = 699
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = CypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(CypherParser.UNWIND)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 703
                self.match(CypherParser.SP)


            self.state = 706
            self.oC_Expression()
            self.state = 707
            self.match(CypherParser.SP)
            self.state = 708
            self.match(CypherParser.AS)
            self.state = 709
            self.match(CypherParser.SP)
            self.state = 710
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = CypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(CypherParser.MERGE)
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 713
                self.match(CypherParser.SP)


            self.state = 716
            self.oC_PatternPart()
            self.state = 721
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 717
                    self.match(CypherParser.SP)
                    self.state = 718
                    self.oC_MergeAction() 
                self.state = 723
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = CypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_MergeAction)
        try:
            self.state = 734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.match(CypherParser.ON)
                self.state = 725
                self.match(CypherParser.SP)
                self.state = 726
                self.match(CypherParser.MATCH)
                self.state = 727
                self.match(CypherParser.SP)
                self.state = 728
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 729
                self.match(CypherParser.ON)
                self.state = 730
                self.match(CypherParser.SP)
                self.state = 731
                self.match(CypherParser.CREATE)
                self.state = 732
                self.match(CypherParser.SP)
                self.state = 733
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = CypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(CypherParser.CREATE)
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 737
                self.match(CypherParser.SP)


            self.state = 740
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateUniqueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CreateUnique

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CreateUnique" ):
                listener.enterOC_CreateUnique(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CreateUnique" ):
                listener.exitOC_CreateUnique(self)




    def oC_CreateUnique(self):

        localctx = CypherParser.OC_CreateUniqueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_CreateUnique)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(CypherParser.CREATE)
            self.state = 743
            self.match(CypherParser.SP)
            self.state = 744
            self.match(CypherParser.UNIQUE)
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 745
                self.match(CypherParser.SP)


            self.state = 748
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = CypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(CypherParser.SET)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 751
                self.match(CypherParser.SP)


            self.state = 754
            self.oC_SetItem()
            self.state = 765
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 755
                        self.match(CypherParser.SP)


                    self.state = 758
                    self.match(CypherParser.T__6)
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 759
                        self.match(CypherParser.SP)


                    self.state = 762
                    self.oC_SetItem() 
                self.state = 767
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = CypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.oC_PropertyExpression()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 769
                    self.match(CypherParser.SP)


                self.state = 772
                self.match(CypherParser.T__1)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 773
                    self.match(CypherParser.SP)


                self.state = 776
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.oC_Variable()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 779
                    self.match(CypherParser.SP)


                self.state = 782
                self.match(CypherParser.T__1)
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 783
                    self.match(CypherParser.SP)


                self.state = 786
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 788
                self.oC_Variable()
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 789
                    self.match(CypherParser.SP)


                self.state = 792
                self.match(CypherParser.T__7)
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 793
                    self.match(CypherParser.SP)


                self.state = 796
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 798
                self.oC_Variable()
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 799
                    self.match(CypherParser.SP)


                self.state = 802
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = CypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.DETACH:
                self.state = 806
                self.match(CypherParser.DETACH)
                self.state = 807
                self.match(CypherParser.SP)


            self.state = 810
            self.match(CypherParser.DELETE)
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 811
                self.match(CypherParser.SP)


            self.state = 814
            self.oC_Expression()
            self.state = 825
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 816
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 815
                        self.match(CypherParser.SP)


                    self.state = 818
                    self.match(CypherParser.T__6)
                    self.state = 820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 819
                        self.match(CypherParser.SP)


                    self.state = 822
                    self.oC_Expression() 
                self.state = 827
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = CypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(CypherParser.REMOVE)
            self.state = 829
            self.match(CypherParser.SP)
            self.state = 830
            self.oC_RemoveItem()
            self.state = 841
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 831
                        self.match(CypherParser.SP)


                    self.state = 834
                    self.match(CypherParser.T__6)
                    self.state = 836
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 835
                        self.match(CypherParser.SP)


                    self.state = 838
                    self.oC_RemoveItem() 
                self.state = 843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = CypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_RemoveItem)
        try:
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.oC_Variable()
                self.state = 845
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 847
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(CypherParser.FOREACH, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Foreach" ):
                listener.enterOC_Foreach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Foreach" ):
                listener.exitOC_Foreach(self)




    def oC_Foreach(self):

        localctx = CypherParser.OC_ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_Foreach)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(CypherParser.FOREACH)
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 851
                self.match(CypherParser.SP)


            self.state = 854
            self.match(CypherParser.T__2)
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 855
                self.match(CypherParser.SP)


            self.state = 858
            self.oC_Variable()
            self.state = 859
            self.match(CypherParser.SP)
            self.state = 860
            self.match(CypherParser.IN)
            self.state = 861
            self.match(CypherParser.SP)
            self.state = 862
            self.oC_Expression()
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 863
                self.match(CypherParser.SP)


            self.state = 866
            self.match(CypherParser.T__8)
            self.state = 869 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 867
                    self.match(CypherParser.SP)
                    self.state = 868
                    self.oC_UpdatingClause()

                else:
                    raise NoViableAltException(self)
                self.state = 871 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 873
                self.match(CypherParser.SP)


            self.state = 876
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = CypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(CypherParser.CALL)
            self.state = 879
            self.match(CypherParser.SP)
            self.state = 880
            self.oC_ExplicitProcedureInvocation()
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 881
                    self.match(CypherParser.SP)


                self.state = 884
                self.match(CypherParser.YIELD)
                self.state = 885
                self.match(CypherParser.SP)
                self.state = 886
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = CypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(CypherParser.CALL)
            self.state = 890
            self.match(CypherParser.SP)
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 891
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 892
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 895
                    self.match(CypherParser.SP)


                self.state = 898
                self.match(CypherParser.YIELD)
                self.state = 899
                self.match(CypherParser.SP)
                self.state = 902
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CypherParser.T__9]:
                    self.state = 900
                    self.match(CypherParser.T__9)
                    pass
                elif token in [CypherParser.COUNT, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                    self.state = 901
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = CypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.oC_YieldItem()
            self.state = 917
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 907
                        self.match(CypherParser.SP)


                    self.state = 910
                    self.match(CypherParser.T__6)
                    self.state = 912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 911
                        self.match(CypherParser.SP)


                    self.state = 914
                    self.oC_YieldItem() 
                self.state = 919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 920
                    self.match(CypherParser.SP)


                self.state = 923
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = CypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 926
                self.oC_ProcedureResultField()
                self.state = 927
                self.match(CypherParser.SP)
                self.state = 928
                self.match(CypherParser.AS)
                self.state = 929
                self.match(CypherParser.SP)


            self.state = 933
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = CypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(CypherParser.WITH)
            self.state = 936
            self.oC_ProjectionBody()
            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 937
                    self.match(CypherParser.SP)


                self.state = 940
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = CypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(CypherParser.RETURN)
            self.state = 944
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(CypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(CypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(CypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = CypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 946
                    self.match(CypherParser.SP)


                self.state = 949
                self.match(CypherParser.DISTINCT)


            self.state = 952
            self.match(CypherParser.SP)
            self.state = 953
            self.oC_ProjectionItems()
            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 954
                self.match(CypherParser.SP)
                self.state = 955
                self.oC_Order()


            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 958
                self.match(CypherParser.SP)
                self.state = 959
                self.oC_Skip()


            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 962
                self.match(CypherParser.SP)
                self.state = 963
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = CypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 966
                self.match(CypherParser.T__9)
                self.state = 977
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 968
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 967
                            self.match(CypherParser.SP)


                        self.state = 970
                        self.match(CypherParser.T__6)
                        self.state = 972
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 971
                            self.match(CypherParser.SP)


                        self.state = 974
                        self.oC_ProjectionItem() 
                    self.state = 979
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                pass
            elif token in [CypherParser.T__2, CypherParser.T__4, CypherParser.T__18, CypherParser.T__19, CypherParser.T__24, CypherParser.T__26, CypherParser.ALL, CypherParser.EXISTS, CypherParser.SHORTESTPATH, CypherParser.ALLSHORTESTPATHS, CypherParser.NOT, CypherParser.NULL, CypherParser.COUNT, CypherParser.CASE, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.REDUCE, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.TRUE, CypherParser.FALSE, CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger, CypherParser.HexLetter, CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal, CypherParser.StringLiteral, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 2)
                self.state = 980
                self.oC_ProjectionItem()
                self.state = 991
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 982
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 981
                            self.match(CypherParser.SP)


                        self.state = 984
                        self.match(CypherParser.T__6)
                        self.state = 986
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 985
                            self.match(CypherParser.SP)


                        self.state = 988
                        self.oC_ProjectionItem() 
                    self.state = 993
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = CypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_ProjectionItem)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.oC_Expression()
                self.state = 997
                self.match(CypherParser.SP)
                self.state = 998
                self.match(CypherParser.AS)
                self.state = 999
                self.match(CypherParser.SP)
                self.state = 1000
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1002
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = CypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(CypherParser.ORDER)
            self.state = 1006
            self.match(CypherParser.SP)
            self.state = 1007
            self.match(CypherParser.BY)
            self.state = 1008
            self.match(CypherParser.SP)
            self.state = 1009
            self.oC_SortItem()
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.T__6:
                self.state = 1010
                self.match(CypherParser.T__6)
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1011
                    self.match(CypherParser.SP)


                self.state = 1014
                self.oC_SortItem()
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = CypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(CypherParser.L_SKIP)
            self.state = 1021
            self.match(CypherParser.SP)
            self.state = 1022
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = CypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(CypherParser.LIMIT)
            self.state = 1025
            self.match(CypherParser.SP)
            self.state = 1026
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = CypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.oC_Expression()
            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1029
                    self.match(CypherParser.SP)


                self.state = 1032
                _la = self._input.LA(1)
                if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (CypherParser.ASCENDING - 89)) | (1 << (CypherParser.ASC - 89)) | (1 << (CypherParser.DESCENDING - 89)) | (1 << (CypherParser.DESC - 89)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def USING(self):
            return self.getToken(CypherParser.USING, 0)

        def INDEX(self):
            return self.getToken(CypherParser.INDEX, 0)

        def oC_Variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_VariableContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_VariableContext,i)


        def oC_NodeLabel(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,0)


        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,0)


        def JOIN(self):
            return self.getToken(CypherParser.JOIN, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def SCAN(self):
            return self.getToken(CypherParser.SCAN, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Hint" ):
                listener.enterOC_Hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Hint" ):
                listener.exitOC_Hint(self)




    def oC_Hint(self):

        localctx = CypherParser.OC_HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_Hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1035
                self.match(CypherParser.SP)


            self.state = 1075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.state = 1038
                self.match(CypherParser.USING)
                self.state = 1039
                self.match(CypherParser.SP)
                self.state = 1040
                self.match(CypherParser.INDEX)
                self.state = 1041
                self.match(CypherParser.SP)
                self.state = 1042
                self.oC_Variable()
                self.state = 1043
                self.oC_NodeLabel()
                self.state = 1044
                self.match(CypherParser.T__2)
                self.state = 1045
                self.oC_PropertyKeyName()
                self.state = 1046
                self.match(CypherParser.T__3)
                pass

            elif la_ == 2:
                self.state = 1048
                self.match(CypherParser.USING)
                self.state = 1049
                self.match(CypherParser.SP)
                self.state = 1050
                self.match(CypherParser.JOIN)
                self.state = 1051
                self.match(CypherParser.SP)
                self.state = 1052
                self.match(CypherParser.ON)
                self.state = 1053
                self.match(CypherParser.SP)
                self.state = 1054
                self.oC_Variable()
                self.state = 1065
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1056
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1055
                            self.match(CypherParser.SP)


                        self.state = 1058
                        self.match(CypherParser.T__6)
                        self.state = 1060
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1059
                            self.match(CypherParser.SP)


                        self.state = 1062
                        self.oC_Variable() 
                    self.state = 1067
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                pass

            elif la_ == 3:
                self.state = 1068
                self.match(CypherParser.USING)
                self.state = 1069
                self.match(CypherParser.SP)
                self.state = 1070
                self.match(CypherParser.SCAN)
                self.state = 1071
                self.match(CypherParser.SP)
                self.state = 1072
                self.oC_Variable()
                self.state = 1073
                self.oC_NodeLabel()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(CypherParser.START, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_StartPoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_StartPointContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_StartPointContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Start" ):
                listener.enterOC_Start(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Start" ):
                listener.exitOC_Start(self)




    def oC_Start(self):

        localctx = CypherParser.OC_StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_Start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(CypherParser.START)
            self.state = 1078
            self.match(CypherParser.SP)
            self.state = 1079
            self.oC_StartPoint()
            self.state = 1090
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1080
                        self.match(CypherParser.SP)


                    self.state = 1083
                    self.match(CypherParser.T__6)
                    self.state = 1085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1084
                        self.match(CypherParser.SP)


                    self.state = 1087
                    self.oC_StartPoint() 
                self.state = 1092
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.WHERE:
                self.state = 1093
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StartPointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_Lookup(self):
            return self.getTypedRuleContext(CypherParser.OC_LookupContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_StartPoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StartPoint" ):
                listener.enterOC_StartPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StartPoint" ):
                listener.exitOC_StartPoint(self)




    def oC_StartPoint(self):

        localctx = CypherParser.OC_StartPointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_StartPoint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.oC_Variable()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1097
                self.match(CypherParser.SP)


            self.state = 1100
            self.match(CypherParser.T__1)
            self.state = 1102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1101
                self.match(CypherParser.SP)


            self.state = 1104
            self.oC_Lookup()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLookupContext,0)


        def oC_RelationshipLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipLookupContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Lookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Lookup" ):
                listener.enterOC_Lookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Lookup" ):
                listener.exitOC_Lookup(self)




    def oC_Lookup(self):

        localctx = CypherParser.OC_LookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_Lookup)
        try:
            self.state = 1108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.NODE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.oC_NodeLookup()
                pass
            elif token in [CypherParser.RELATIONSHIP, CypherParser.REL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.oC_RelationshipLookup()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NODE(self):
            return self.getToken(CypherParser.NODE, 0)

        def oC_IdentifiedIndexLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_IdentifiedIndexLookupContext,0)


        def oC_IndexQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_IndexQueryContext,0)


        def oC_IdLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_IdLookupContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLookup" ):
                listener.enterOC_NodeLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLookup" ):
                listener.exitOC_NodeLookup(self)




    def oC_NodeLookup(self):

        localctx = CypherParser.OC_NodeLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_NodeLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(CypherParser.NODE)
            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1111
                self.match(CypherParser.SP)


            self.state = 1117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1114
                self.oC_IdentifiedIndexLookup()
                pass

            elif la_ == 2:
                self.state = 1115
                self.oC_IndexQuery()
                pass

            elif la_ == 3:
                self.state = 1116
                self.oC_IdLookup()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELATIONSHIP(self):
            return self.getToken(CypherParser.RELATIONSHIP, 0)

        def REL(self):
            return self.getToken(CypherParser.REL, 0)

        def oC_IdentifiedIndexLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_IdentifiedIndexLookupContext,0)


        def oC_IndexQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_IndexQueryContext,0)


        def oC_IdLookup(self):
            return self.getTypedRuleContext(CypherParser.OC_IdLookupContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipLookup" ):
                listener.enterOC_RelationshipLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipLookup" ):
                listener.exitOC_RelationshipLookup(self)




    def oC_RelationshipLookup(self):

        localctx = CypherParser.OC_RelationshipLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_RelationshipLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            _la = self._input.LA(1)
            if not(_la==CypherParser.RELATIONSHIP or _la==CypherParser.REL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1120
                self.oC_IdentifiedIndexLookup()
                pass

            elif la_ == 2:
                self.state = 1121
                self.oC_IndexQuery()
                pass

            elif la_ == 3:
                self.state = 1122
                self.oC_IdLookup()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdentifiedIndexLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,i)


        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def oC_LegacyParameter(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IdentifiedIndexLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdentifiedIndexLookup" ):
                listener.enterOC_IdentifiedIndexLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdentifiedIndexLookup" ):
                listener.exitOC_IdentifiedIndexLookup(self)




    def oC_IdentifiedIndexLookup(self):

        localctx = CypherParser.OC_IdentifiedIndexLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_IdentifiedIndexLookup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(CypherParser.T__10)
            self.state = 1126
            self.oC_SymbolicName()
            self.state = 1127
            self.match(CypherParser.T__2)
            self.state = 1128
            self.oC_SymbolicName()
            self.state = 1129
            self.match(CypherParser.T__1)
            self.state = 1132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.StringLiteral]:
                self.state = 1130
                self.match(CypherParser.StringLiteral)
                pass
            elif token in [CypherParser.T__24]:
                self.state = 1131
                self.oC_LegacyParameter()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1134
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IndexQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def oC_LegacyParameter(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IndexQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IndexQuery" ):
                listener.enterOC_IndexQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IndexQuery" ):
                listener.exitOC_IndexQuery(self)




    def oC_IndexQuery(self):

        localctx = CypherParser.OC_IndexQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_IndexQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(CypherParser.T__10)
            self.state = 1137
            self.oC_SymbolicName()
            self.state = 1138
            self.match(CypherParser.T__2)
            self.state = 1141
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.StringLiteral]:
                self.state = 1139
                self.match(CypherParser.StringLiteral)
                pass
            elif token in [CypherParser.T__24]:
                self.state = 1140
                self.oC_LegacyParameter()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1143
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LiteralIds(self):
            return self.getTypedRuleContext(CypherParser.OC_LiteralIdsContext,0)


        def oC_LegacyParameter(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IdLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdLookup" ):
                listener.enterOC_IdLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdLookup" ):
                listener.exitOC_IdLookup(self)




    def oC_IdLookup(self):

        localctx = CypherParser.OC_IdLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_IdLookup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(CypherParser.T__2)
            self.state = 1149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger]:
                self.state = 1146
                self.oC_LiteralIds()
                pass
            elif token in [CypherParser.T__24]:
                self.state = 1147
                self.oC_LegacyParameter()
                pass
            elif token in [CypherParser.T__9]:
                self.state = 1148
                self.match(CypherParser.T__9)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1151
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralIdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_LiteralIds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LiteralIds" ):
                listener.enterOC_LiteralIds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LiteralIds" ):
                listener.exitOC_LiteralIds(self)




    def oC_LiteralIds(self):

        localctx = CypherParser.OC_LiteralIdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_LiteralIds)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.oC_IntegerLiteral()
            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.T__6 or _la==CypherParser.SP:
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1154
                    self.match(CypherParser.SP)


                self.state = 1157
                self.match(CypherParser.T__6)
                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1158
                    self.match(CypherParser.SP)


                self.state = 1161
                self.oC_IntegerLiteral()
                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = CypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(CypherParser.WHERE)
            self.state = 1168
            self.match(CypherParser.SP)
            self.state = 1169
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = CypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.oC_PatternPart()
            self.state = 1182
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1172
                        self.match(CypherParser.SP)


                    self.state = 1175
                    self.match(CypherParser.T__6)
                    self.state = 1177
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1176
                        self.match(CypherParser.SP)


                    self.state = 1179
                    self.oC_PatternPart() 
                self.state = 1184
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_AnonymousPatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = CypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 1196
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1185
                self.oC_Variable()
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1186
                    self.match(CypherParser.SP)


                self.state = 1189
                self.match(CypherParser.T__1)
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1190
                    self.match(CypherParser.SP)


                self.state = 1193
                self.oC_AnonymousPatternPart()
                pass
            elif token in [CypherParser.T__2, CypherParser.SHORTESTPATH, CypherParser.ALLSHORTESTPATHS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1195
                self.oC_AnonymousPatternPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ShortestPathPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_ShortestPathPatternContext,0)


        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = CypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_AnonymousPatternPart)
        try:
            self.state = 1200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.SHORTESTPATH, CypherParser.ALLSHORTESTPATHS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1198
                self.oC_ShortestPathPattern()
                pass
            elif token in [CypherParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1199
                self.oC_PatternElement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ShortestPathPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHORTESTPATH(self):
            return self.getToken(CypherParser.SHORTESTPATH, 0)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def ALLSHORTESTPATHS(self):
            return self.getToken(CypherParser.ALLSHORTESTPATHS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ShortestPathPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ShortestPathPattern" ):
                listener.enterOC_ShortestPathPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ShortestPathPattern" ):
                listener.exitOC_ShortestPathPattern(self)




    def oC_ShortestPathPattern(self):

        localctx = CypherParser.OC_ShortestPathPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_ShortestPathPattern)
        try:
            self.state = 1212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.SHORTESTPATH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self.match(CypherParser.SHORTESTPATH)
                self.state = 1203
                self.match(CypherParser.T__2)
                self.state = 1204
                self.oC_PatternElement()
                self.state = 1205
                self.match(CypherParser.T__3)
                pass
            elif token in [CypherParser.ALLSHORTESTPATHS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1207
                self.match(CypherParser.ALLSHORTESTPATHS)
                self.state = 1208
                self.match(CypherParser.T__2)
                self.state = 1209
                self.oC_PatternElement()
                self.state = 1210
                self.match(CypherParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = CypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 1228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1214
                self.oC_NodePattern()
                self.state = 1221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1216
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1215
                            self.match(CypherParser.SP)


                        self.state = 1218
                        self.oC_PatternElementChain() 
                    self.state = 1223
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1224
                self.match(CypherParser.T__2)
                self.state = 1225
                self.oC_PatternElement()
                self.state = 1226
                self.match(CypherParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = CypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self.oC_NodePattern()
            self.state = 1235 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1231
                        self.match(CypherParser.SP)


                    self.state = 1234
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1237 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = CypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(CypherParser.T__2)
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1240
                self.match(CypherParser.SP)


            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (CypherParser.COUNT - 110)) | (1 << (CypherParser.FILTER - 110)) | (1 << (CypherParser.EXTRACT - 110)) | (1 << (CypherParser.ANY - 110)) | (1 << (CypherParser.NONE - 110)) | (1 << (CypherParser.SINGLE - 110)) | (1 << (CypherParser.HexLetter - 110)) | (1 << (CypherParser.UnescapedSymbolicName - 110)) | (1 << (CypherParser.EscapedSymbolicName - 110)))) != 0):
                self.state = 1243
                self.oC_Variable()
                self.state = 1245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1244
                    self.match(CypherParser.SP)




            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__10:
                self.state = 1249
                self.oC_NodeLabels()
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1250
                    self.match(CypherParser.SP)




            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__24 or _la==CypherParser.T__26:
                self.state = 1255
                self.oC_Properties()
                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1256
                    self.match(CypherParser.SP)




            self.state = 1261
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = CypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self.oC_RelationshipPattern()
            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1264
                self.match(CypherParser.SP)


            self.state = 1267
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = CypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 1333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1269
                self.oC_LeftArrowHead()
                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1270
                    self.match(CypherParser.SP)


                self.state = 1273
                self.oC_Dash()
                self.state = 1275
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1274
                    self.match(CypherParser.SP)


                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__4:
                    self.state = 1277
                    self.oC_RelationshipDetail()


                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1280
                    self.match(CypherParser.SP)


                self.state = 1283
                self.oC_Dash()
                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1284
                    self.match(CypherParser.SP)


                self.state = 1287
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1289
                self.oC_LeftArrowHead()
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1290
                    self.match(CypherParser.SP)


                self.state = 1293
                self.oC_Dash()
                self.state = 1295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1294
                    self.match(CypherParser.SP)


                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__4:
                    self.state = 1297
                    self.oC_RelationshipDetail()


                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1300
                    self.match(CypherParser.SP)


                self.state = 1303
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1305
                self.oC_Dash()
                self.state = 1307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1306
                    self.match(CypherParser.SP)


                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__4:
                    self.state = 1309
                    self.oC_RelationshipDetail()


                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1312
                    self.match(CypherParser.SP)


                self.state = 1315
                self.oC_Dash()
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1316
                    self.match(CypherParser.SP)


                self.state = 1319
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1321
                self.oC_Dash()
                self.state = 1323
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1322
                    self.match(CypherParser.SP)


                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__4:
                    self.state = 1325
                    self.oC_RelationshipDetail()


                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1328
                    self.match(CypherParser.SP)


                self.state = 1331
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_RangeLiteralContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = CypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.match(CypherParser.T__4)
            self.state = 1337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1336
                self.match(CypherParser.SP)


            self.state = 1343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (CypherParser.COUNT - 110)) | (1 << (CypherParser.FILTER - 110)) | (1 << (CypherParser.EXTRACT - 110)) | (1 << (CypherParser.ANY - 110)) | (1 << (CypherParser.NONE - 110)) | (1 << (CypherParser.SINGLE - 110)) | (1 << (CypherParser.HexLetter - 110)) | (1 << (CypherParser.UnescapedSymbolicName - 110)) | (1 << (CypherParser.EscapedSymbolicName - 110)))) != 0):
                self.state = 1339
                self.oC_Variable()
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1340
                    self.match(CypherParser.SP)




            self.state = 1349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__10:
                self.state = 1345
                self.oC_RelationshipTypes()
                self.state = 1347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1346
                    self.match(CypherParser.SP)




            self.state = 1352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__9:
                self.state = 1351
                self.oC_RangeLiteral()


            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__24 or _la==CypherParser.T__26:
                self.state = 1354
                self.oC_Properties()
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1355
                    self.match(CypherParser.SP)




            self.state = 1360
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def oC_LegacyParameter(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = CypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_Properties)
        try:
            self.state = 1365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1362
                self.oC_MapLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1363
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1364
                self.oC_LegacyParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self):
            return self.getTypedRuleContext(CypherParser.OC_RelTypeNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelType" ):
                listener.enterOC_RelType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelType" ):
                listener.exitOC_RelType(self)




    def oC_RelType(self):

        localctx = CypherParser.OC_RelTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_RelType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self.match(CypherParser.T__10)
            self.state = 1369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1368
                self.match(CypherParser.SP)


            self.state = 1371
            self.oC_RelTypeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = CypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self.match(CypherParser.T__10)
            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1374
                self.match(CypherParser.SP)


            self.state = 1377
            self.oC_RelTypeName()
            self.state = 1391
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1378
                        self.match(CypherParser.SP)


                    self.state = 1381
                    self.match(CypherParser.T__8)
                    self.state = 1383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.T__10:
                        self.state = 1382
                        self.match(CypherParser.T__10)


                    self.state = 1386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1385
                        self.match(CypherParser.SP)


                    self.state = 1388
                    self.oC_RelTypeName() 
                self.state = 1393
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = CypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.oC_NodeLabel()
            self.state = 1401
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1395
                        self.match(CypherParser.SP)


                    self.state = 1398
                    self.oC_NodeLabel() 
                self.state = 1403
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(CypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = CypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.match(CypherParser.T__10)
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1405
                self.match(CypherParser.SP)


            self.state = 1408
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = CypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.match(CypherParser.T__9)
            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1411
                self.match(CypherParser.SP)


            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (CypherParser.HexInteger - 124)) | (1 << (CypherParser.DecimalInteger - 124)) | (1 << (CypherParser.OctalInteger - 124)))) != 0):
                self.state = 1414
                self.oC_IntegerLiteral()
                self.state = 1416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1415
                    self.match(CypherParser.SP)




            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__11:
                self.state = 1420
                self.match(CypherParser.T__11)
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1421
                    self.match(CypherParser.SP)


                self.state = 1428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (CypherParser.HexInteger - 124)) | (1 << (CypherParser.DecimalInteger - 124)) | (1 << (CypherParser.OctalInteger - 124)))) != 0):
                    self.state = 1424
                    self.oC_IntegerLiteral()
                    self.state = 1426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1425
                        self.match(CypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = CypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = CypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = CypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.oC_Atom()
            self.state = 1441 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1437
                        self.match(CypherParser.SP)


                    self.state = 1440
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1443 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = CypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.OR)
            else:
                return self.getToken(CypherParser.OR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = CypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.oC_XorExpression()
            self.state = 1454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1448
                    self.match(CypherParser.SP)
                    self.state = 1449
                    self.match(CypherParser.OR)
                    self.state = 1450
                    self.match(CypherParser.SP)
                    self.state = 1451
                    self.oC_XorExpression() 
                self.state = 1456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.XOR)
            else:
                return self.getToken(CypherParser.XOR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = CypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.oC_AndExpression()
            self.state = 1464
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1458
                    self.match(CypherParser.SP)
                    self.state = 1459
                    self.match(CypherParser.XOR)
                    self.state = 1460
                    self.match(CypherParser.SP)
                    self.state = 1461
                    self.oC_AndExpression() 
                self.state = 1466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.AND)
            else:
                return self.getToken(CypherParser.AND, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = CypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self.oC_NotExpression()
            self.state = 1474
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1468
                    self.match(CypherParser.SP)
                    self.state = 1469
                    self.match(CypherParser.AND)
                    self.state = 1470
                    self.match(CypherParser.SP)
                    self.state = 1471
                    self.oC_NotExpression() 
                self.state = 1476
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.NOT)
            else:
                return self.getToken(CypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = CypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.NOT:
                self.state = 1477
                self.match(CypherParser.NOT)
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1478
                    self.match(CypherParser.SP)


                self.state = 1485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1486
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = CypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self.oC_StringListNullPredicateExpression()
            self.state = 1495
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,217,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1489
                        self.match(CypherParser.SP)


                    self.state = 1492
                    self.oC_PartialComparisonExpression() 
                self.state = 1497
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = CypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1498
                self.match(CypherParser.T__1)
                self.state = 1500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1499
                    self.match(CypherParser.SP)


                self.state = 1502
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [CypherParser.T__12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1503
                self.match(CypherParser.T__12)
                self.state = 1505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1504
                    self.match(CypherParser.SP)


                self.state = 1507
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [CypherParser.T__13]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1508
                self.match(CypherParser.T__13)
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1509
                    self.match(CypherParser.SP)


                self.state = 1512
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [CypherParser.T__14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1513
                self.match(CypherParser.T__14)
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1514
                    self.match(CypherParser.SP)


                self.state = 1517
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [CypherParser.T__15]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1518
                self.match(CypherParser.T__15)
                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1519
                    self.match(CypherParser.SP)


                self.state = 1522
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [CypherParser.T__16]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1523
                self.match(CypherParser.T__16)
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1524
                    self.match(CypherParser.SP)


                self.state = 1527
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def oC_StringPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_StringPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_StringPredicateExpressionContext,i)


        def oC_ListPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ListPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ListPredicateExpressionContext,i)


        def oC_NullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NullPredicateExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = CypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            self.oC_AddOrSubtractExpression()
            self.state = 1536
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1534
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                    if la_ == 1:
                        self.state = 1531
                        self.oC_StringPredicateExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1532
                        self.oC_ListPredicateExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1533
                        self.oC_NullPredicateExpression()
                        pass

             
                self.state = 1538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def oC_RegularExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = CypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.state = 1539
                self.oC_RegularExpression()
                pass

            elif la_ == 2:
                self.state = 1540
                self.match(CypherParser.SP)
                self.state = 1541
                self.match(CypherParser.STARTS)
                self.state = 1542
                self.match(CypherParser.SP)
                self.state = 1543
                self.match(CypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1544
                self.match(CypherParser.SP)
                self.state = 1545
                self.match(CypherParser.ENDS)
                self.state = 1546
                self.match(CypherParser.SP)
                self.state = 1547
                self.match(CypherParser.WITH)
                pass

            elif la_ == 4:
                self.state = 1548
                self.match(CypherParser.SP)
                self.state = 1549
                self.match(CypherParser.CONTAINS)
                pass


            self.state = 1553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1552
                self.match(CypherParser.SP)


            self.state = 1555
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = CypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            self.match(CypherParser.SP)
            self.state = 1558
            self.match(CypherParser.IN)
            self.state = 1560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1559
                self.match(CypherParser.SP)


            self.state = 1562
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = CypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1564
                self.match(CypherParser.SP)
                self.state = 1565
                self.match(CypherParser.IS)
                self.state = 1566
                self.match(CypherParser.SP)
                self.state = 1567
                self.match(CypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1568
                self.match(CypherParser.SP)
                self.state = 1569
                self.match(CypherParser.IS)
                self.state = 1570
                self.match(CypherParser.SP)
                self.state = 1571
                self.match(CypherParser.NOT)
                self.state = 1572
                self.match(CypherParser.SP)
                self.state = 1573
                self.match(CypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RegularExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularExpression" ):
                listener.enterOC_RegularExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularExpression" ):
                listener.exitOC_RegularExpression(self)




    def oC_RegularExpression(self):

        localctx = CypherParser.OC_RegularExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_RegularExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1576
                self.match(CypherParser.SP)


            self.state = 1579
            self.match(CypherParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = CypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1600
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1598
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                    if la_ == 1:
                        self.state = 1583
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1582
                            self.match(CypherParser.SP)


                        self.state = 1585
                        self.match(CypherParser.T__18)
                        self.state = 1587
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1586
                            self.match(CypherParser.SP)


                        self.state = 1589
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1590
                            self.match(CypherParser.SP)


                        self.state = 1593
                        self.match(CypherParser.T__19)
                        self.state = 1595
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1594
                            self.match(CypherParser.SP)


                        self.state = 1597
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = CypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self.oC_PowerOfExpression()
            self.state = 1630
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1628
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                    if la_ == 1:
                        self.state = 1605
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1604
                            self.match(CypherParser.SP)


                        self.state = 1607
                        self.match(CypherParser.T__9)
                        self.state = 1609
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1608
                            self.match(CypherParser.SP)


                        self.state = 1611
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1613
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1612
                            self.match(CypherParser.SP)


                        self.state = 1615
                        self.match(CypherParser.T__20)
                        self.state = 1617
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1616
                            self.match(CypherParser.SP)


                        self.state = 1619
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1621
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1620
                            self.match(CypherParser.SP)


                        self.state = 1623
                        self.match(CypherParser.T__21)
                        self.state = 1625
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1624
                            self.match(CypherParser.SP)


                        self.state = 1627
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1632
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = CypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1634
                        self.match(CypherParser.SP)


                    self.state = 1637
                    self.match(CypherParser.T__22)
                    self.state = 1639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1638
                        self.match(CypherParser.SP)


                    self.state = 1641
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NonArithmeticOperatorExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_NonArithmeticOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = CypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__2, CypherParser.T__4, CypherParser.T__24, CypherParser.T__26, CypherParser.ALL, CypherParser.EXISTS, CypherParser.SHORTESTPATH, CypherParser.ALLSHORTESTPATHS, CypherParser.NULL, CypherParser.COUNT, CypherParser.CASE, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.REDUCE, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.TRUE, CypherParser.FALSE, CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger, CypherParser.HexLetter, CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal, CypherParser.StringLiteral, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1647
                self.oC_NonArithmeticOperatorExpression()
                pass
            elif token in [CypherParser.T__18, CypherParser.T__19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1648
                _la = self._input.LA(1)
                if not(_la==CypherParser.T__18 or _la==CypherParser.T__19):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1649
                    self.match(CypherParser.SP)


                self.state = 1652
                self.oC_NonArithmeticOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NonArithmeticOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_ListOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ListOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ListOperatorExpressionContext,i)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NonArithmeticOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NonArithmeticOperatorExpression" ):
                listener.enterOC_NonArithmeticOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NonArithmeticOperatorExpression" ):
                listener.exitOC_NonArithmeticOperatorExpression(self)




    def oC_NonArithmeticOperatorExpression(self):

        localctx = CypherParser.OC_NonArithmeticOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_oC_NonArithmeticOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.oC_Atom()
            self.state = 1666
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1664
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                    if la_ == 1:
                        self.state = 1657
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1656
                            self.match(CypherParser.SP)


                        self.state = 1659
                        self.oC_ListOperatorExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1661
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1660
                            self.match(CypherParser.SP)


                        self.state = 1663
                        self.oC_PropertyLookup()
                        pass

             
                self.state = 1668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

            self.state = 1673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1669
                    self.match(CypherParser.SP)


                self.state = 1672
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = CypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_oC_ListOperatorExpression)
        self._la = 0 # Token type
        try:
            self.state = 1688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1675
                self.match(CypherParser.T__4)
                self.state = 1676
                self.oC_Expression()
                self.state = 1677
                self.match(CypherParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1679
                self.match(CypherParser.T__4)
                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__18) | (1 << CypherParser.T__19) | (1 << CypherParser.T__24) | (1 << CypherParser.T__26) | (1 << CypherParser.ALL) | (1 << CypherParser.EXISTS))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (CypherParser.SHORTESTPATH - 100)) | (1 << (CypherParser.ALLSHORTESTPATHS - 100)) | (1 << (CypherParser.NOT - 100)) | (1 << (CypherParser.NULL - 100)) | (1 << (CypherParser.COUNT - 100)) | (1 << (CypherParser.CASE - 100)) | (1 << (CypherParser.FILTER - 100)) | (1 << (CypherParser.EXTRACT - 100)) | (1 << (CypherParser.REDUCE - 100)) | (1 << (CypherParser.ANY - 100)) | (1 << (CypherParser.NONE - 100)) | (1 << (CypherParser.SINGLE - 100)) | (1 << (CypherParser.TRUE - 100)) | (1 << (CypherParser.FALSE - 100)) | (1 << (CypherParser.HexInteger - 100)) | (1 << (CypherParser.DecimalInteger - 100)) | (1 << (CypherParser.OctalInteger - 100)) | (1 << (CypherParser.HexLetter - 100)) | (1 << (CypherParser.ExponentDecimalReal - 100)) | (1 << (CypherParser.RegularDecimalReal - 100)) | (1 << (CypherParser.StringLiteral - 100)) | (1 << (CypherParser.UnescapedSymbolicName - 100)) | (1 << (CypherParser.EscapedSymbolicName - 100)))) != 0):
                    self.state = 1680
                    self.oC_Expression()


                self.state = 1683
                self.match(CypherParser.T__11)
                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__18) | (1 << CypherParser.T__19) | (1 << CypherParser.T__24) | (1 << CypherParser.T__26) | (1 << CypherParser.ALL) | (1 << CypherParser.EXISTS))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (CypherParser.SHORTESTPATH - 100)) | (1 << (CypherParser.ALLSHORTESTPATHS - 100)) | (1 << (CypherParser.NOT - 100)) | (1 << (CypherParser.NULL - 100)) | (1 << (CypherParser.COUNT - 100)) | (1 << (CypherParser.CASE - 100)) | (1 << (CypherParser.FILTER - 100)) | (1 << (CypherParser.EXTRACT - 100)) | (1 << (CypherParser.REDUCE - 100)) | (1 << (CypherParser.ANY - 100)) | (1 << (CypherParser.NONE - 100)) | (1 << (CypherParser.SINGLE - 100)) | (1 << (CypherParser.TRUE - 100)) | (1 << (CypherParser.FALSE - 100)) | (1 << (CypherParser.HexInteger - 100)) | (1 << (CypherParser.DecimalInteger - 100)) | (1 << (CypherParser.OctalInteger - 100)) | (1 << (CypherParser.HexLetter - 100)) | (1 << (CypherParser.ExponentDecimalReal - 100)) | (1 << (CypherParser.RegularDecimalReal - 100)) | (1 << (CypherParser.StringLiteral - 100)) | (1 << (CypherParser.UnescapedSymbolicName - 100)) | (1 << (CypherParser.EscapedSymbolicName - 100)))) != 0):
                    self.state = 1684
                    self.oC_Expression()


                self.state = 1687
                self.match(CypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = CypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.match(CypherParser.T__23)
            self.state = 1692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1691
                self.match(CypherParser.SP)


            self.state = 1694
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(CypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def oC_LegacyParameter(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternComprehensionContext,0)


        def oC_LegacyListExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_LegacyListExpressionContext,0)


        def oC_Reduce(self):
            return self.getTypedRuleContext(CypherParser.OC_ReduceContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(CypherParser.OC_QuantifierContext,0)


        def oC_ShortestPathPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_ShortestPathPatternContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(CypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = CypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1696
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1697
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1698
                self.oC_LegacyParameter()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1699
                self.oC_CaseExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1700
                self.match(CypherParser.COUNT)
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1701
                    self.match(CypherParser.SP)


                self.state = 1704
                self.match(CypherParser.T__2)
                self.state = 1706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1705
                    self.match(CypherParser.SP)


                self.state = 1708
                self.match(CypherParser.T__9)
                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1709
                    self.match(CypherParser.SP)


                self.state = 1712
                self.match(CypherParser.T__3)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1713
                self.oC_ListComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1714
                self.oC_PatternComprehension()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1715
                self.oC_LegacyListExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1716
                self.oC_Reduce()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1717
                self.oC_Quantifier()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1718
                self.oC_ShortestPathPattern()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1719
                self.oC_PatternPredicate()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1720
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1721
                self.oC_FunctionInvocation()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1722
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1723
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = CypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 1726
                self.match(CypherParser.CASE)
                self.state = 1731 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1728
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1727
                            self.match(CypherParser.SP)


                        self.state = 1730
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1733 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,266,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1735
                self.match(CypherParser.CASE)
                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1736
                    self.match(CypherParser.SP)


                self.state = 1739
                self.oC_Expression()
                self.state = 1744 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1741
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1740
                            self.match(CypherParser.SP)


                        self.state = 1743
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1746 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

                pass


            self.state = 1758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 1751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1750
                    self.match(CypherParser.SP)


                self.state = 1753
                self.match(CypherParser.ELSE)
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1754
                    self.match(CypherParser.SP)


                self.state = 1757
                self.oC_Expression()


            self.state = 1761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1760
                self.match(CypherParser.SP)


            self.state = 1763
            self.match(CypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = CypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            self.match(CypherParser.WHEN)
            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1766
                self.match(CypherParser.SP)


            self.state = 1769
            self.oC_Expression()
            self.state = 1771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1770
                self.match(CypherParser.SP)


            self.state = 1773
            self.match(CypherParser.THEN)
            self.state = 1775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1774
                self.match(CypherParser.SP)


            self.state = 1777
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = CypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self.match(CypherParser.T__4)
            self.state = 1781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1780
                self.match(CypherParser.SP)


            self.state = 1783
            self.oC_FilterExpression()
            self.state = 1792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 1785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1784
                    self.match(CypherParser.SP)


                self.state = 1787
                self.match(CypherParser.T__8)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1788
                    self.match(CypherParser.SP)


                self.state = 1791
                self.oC_Expression()


            self.state = 1795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1794
                self.match(CypherParser.SP)


            self.state = 1797
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = CypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self.match(CypherParser.T__4)
            self.state = 1801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1800
                self.match(CypherParser.SP)


            self.state = 1811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (CypherParser.COUNT - 110)) | (1 << (CypherParser.FILTER - 110)) | (1 << (CypherParser.EXTRACT - 110)) | (1 << (CypherParser.ANY - 110)) | (1 << (CypherParser.NONE - 110)) | (1 << (CypherParser.SINGLE - 110)) | (1 << (CypherParser.HexLetter - 110)) | (1 << (CypherParser.UnescapedSymbolicName - 110)) | (1 << (CypherParser.EscapedSymbolicName - 110)))) != 0):
                self.state = 1803
                self.oC_Variable()
                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1804
                    self.match(CypherParser.SP)


                self.state = 1807
                self.match(CypherParser.T__1)
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1808
                    self.match(CypherParser.SP)




            self.state = 1813
            self.oC_RelationshipsPattern()
            self.state = 1815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1814
                self.match(CypherParser.SP)


            self.state = 1821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.WHERE:
                self.state = 1817
                self.oC_Where()
                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1818
                    self.match(CypherParser.SP)




            self.state = 1823
            self.match(CypherParser.T__8)
            self.state = 1825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1824
                self.match(CypherParser.SP)


            self.state = 1827
            self.oC_Expression()
            self.state = 1829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1828
                self.match(CypherParser.SP)


            self.state = 1831
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LegacyListExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(CypherParser.FILTER, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def EXTRACT(self):
            return self.getToken(CypherParser.EXTRACT, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LegacyListExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LegacyListExpression" ):
                listener.enterOC_LegacyListExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LegacyListExpression" ):
                listener.exitOC_LegacyListExpression(self)




    def oC_LegacyListExpression(self):

        localctx = CypherParser.OC_LegacyListExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_oC_LegacyListExpression)
        self._la = 0 # Token type
        try:
            self.state = 1868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.FILTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1833
                self.match(CypherParser.FILTER)
                self.state = 1835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1834
                    self.match(CypherParser.SP)


                self.state = 1837
                self.match(CypherParser.T__2)
                self.state = 1839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1838
                    self.match(CypherParser.SP)


                self.state = 1841
                self.oC_FilterExpression()
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1842
                    self.match(CypherParser.SP)


                self.state = 1845
                self.match(CypherParser.T__3)
                pass
            elif token in [CypherParser.EXTRACT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1847
                self.match(CypherParser.EXTRACT)
                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1848
                    self.match(CypherParser.SP)


                self.state = 1851
                self.match(CypherParser.T__2)
                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1852
                    self.match(CypherParser.SP)


                self.state = 1855
                self.oC_FilterExpression()
                self.state = 1857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 1856
                    self.match(CypherParser.SP)


                self.state = 1864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__8 or _la==CypherParser.SP:
                    self.state = 1860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1859
                        self.match(CypherParser.SP)


                    self.state = 1862
                    self.match(CypherParser.T__8)
                    self.state = 1863
                    self.oC_Expression()


                self.state = 1866
                self.match(CypherParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReduceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDUCE(self):
            return self.getToken(CypherParser.REDUCE, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def oC_IdInColl(self):
            return self.getTypedRuleContext(CypherParser.OC_IdInCollContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Reduce

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Reduce" ):
                listener.enterOC_Reduce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Reduce" ):
                listener.exitOC_Reduce(self)




    def oC_Reduce(self):

        localctx = CypherParser.OC_ReduceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_oC_Reduce)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1870
            self.match(CypherParser.REDUCE)
            self.state = 1872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1871
                self.match(CypherParser.SP)


            self.state = 1874
            self.match(CypherParser.T__2)
            self.state = 1875
            self.oC_Variable()
            self.state = 1876
            self.match(CypherParser.T__1)
            self.state = 1877
            self.oC_Expression()
            self.state = 1878
            self.match(CypherParser.T__6)
            self.state = 1879
            self.oC_IdInColl()
            self.state = 1880
            self.match(CypherParser.T__8)
            self.state = 1881
            self.oC_Expression()
            self.state = 1882
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = CypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1884
                self.match(CypherParser.ALL)
                self.state = 1886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1885
                    self.match(CypherParser.SP)


                self.state = 1888
                self.match(CypherParser.T__2)
                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1889
                    self.match(CypherParser.SP)


                self.state = 1892
                self.oC_FilterExpression()
                self.state = 1894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1893
                    self.match(CypherParser.SP)


                self.state = 1896
                self.match(CypherParser.T__3)
                pass
            elif token in [CypherParser.ANY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1898
                self.match(CypherParser.ANY)
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1899
                    self.match(CypherParser.SP)


                self.state = 1902
                self.match(CypherParser.T__2)
                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1903
                    self.match(CypherParser.SP)


                self.state = 1906
                self.oC_FilterExpression()
                self.state = 1908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1907
                    self.match(CypherParser.SP)


                self.state = 1910
                self.match(CypherParser.T__3)
                pass
            elif token in [CypherParser.NONE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1912
                self.match(CypherParser.NONE)
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1913
                    self.match(CypherParser.SP)


                self.state = 1916
                self.match(CypherParser.T__2)
                self.state = 1918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1917
                    self.match(CypherParser.SP)


                self.state = 1920
                self.oC_FilterExpression()
                self.state = 1922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1921
                    self.match(CypherParser.SP)


                self.state = 1924
                self.match(CypherParser.T__3)
                pass
            elif token in [CypherParser.SINGLE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1926
                self.match(CypherParser.SINGLE)
                self.state = 1928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1927
                    self.match(CypherParser.SP)


                self.state = 1930
                self.match(CypherParser.T__2)
                self.state = 1932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1931
                    self.match(CypherParser.SP)


                self.state = 1934
                self.oC_FilterExpression()
                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1935
                    self.match(CypherParser.SP)


                self.state = 1938
                self.match(CypherParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(CypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = CypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            self.oC_IdInColl()
            self.state = 1947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.state = 1944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1943
                    self.match(CypherParser.SP)


                self.state = 1946
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = CypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1949
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = CypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1951
            self.match(CypherParser.T__2)
            self.state = 1953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1952
                self.match(CypherParser.SP)


            self.state = 1955
            self.oC_Expression()
            self.state = 1957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1956
                self.match(CypherParser.SP)


            self.state = 1959
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = CypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1961
            self.oC_Variable()
            self.state = 1962
            self.match(CypherParser.SP)
            self.state = 1963
            self.match(CypherParser.IN)
            self.state = 1964
            self.match(CypherParser.SP)
            self.state = 1965
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = CypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1967
            self.oC_FunctionName()
            self.state = 1969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1968
                self.match(CypherParser.SP)


            self.state = 1971
            self.match(CypherParser.T__2)
            self.state = 1973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1972
                self.match(CypherParser.SP)


            self.state = 1979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.DISTINCT:
                self.state = 1975
                self.match(CypherParser.DISTINCT)
                self.state = 1977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1976
                    self.match(CypherParser.SP)




            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__18) | (1 << CypherParser.T__19) | (1 << CypherParser.T__24) | (1 << CypherParser.T__26) | (1 << CypherParser.ALL) | (1 << CypherParser.EXISTS))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (CypherParser.SHORTESTPATH - 100)) | (1 << (CypherParser.ALLSHORTESTPATHS - 100)) | (1 << (CypherParser.NOT - 100)) | (1 << (CypherParser.NULL - 100)) | (1 << (CypherParser.COUNT - 100)) | (1 << (CypherParser.CASE - 100)) | (1 << (CypherParser.FILTER - 100)) | (1 << (CypherParser.EXTRACT - 100)) | (1 << (CypherParser.REDUCE - 100)) | (1 << (CypherParser.ANY - 100)) | (1 << (CypherParser.NONE - 100)) | (1 << (CypherParser.SINGLE - 100)) | (1 << (CypherParser.TRUE - 100)) | (1 << (CypherParser.FALSE - 100)) | (1 << (CypherParser.HexInteger - 100)) | (1 << (CypherParser.DecimalInteger - 100)) | (1 << (CypherParser.OctalInteger - 100)) | (1 << (CypherParser.HexLetter - 100)) | (1 << (CypherParser.ExponentDecimalReal - 100)) | (1 << (CypherParser.RegularDecimalReal - 100)) | (1 << (CypherParser.StringLiteral - 100)) | (1 << (CypherParser.UnescapedSymbolicName - 100)) | (1 << (CypherParser.EscapedSymbolicName - 100)))) != 0):
                self.state = 1981
                self.oC_Expression()
                self.state = 1983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1982
                    self.match(CypherParser.SP)


                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__6:
                    self.state = 1985
                    self.match(CypherParser.T__6)
                    self.state = 1987
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1986
                        self.match(CypherParser.SP)


                    self.state = 1989
                    self.oC_Expression()
                    self.state = 1991
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1990
                        self.match(CypherParser.SP)


                    self.state = 1997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2000
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = CypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self.oC_Namespace()
            self.state = 2003
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = CypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self.match(CypherParser.EXISTS)
            self.state = 2007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2006
                self.match(CypherParser.SP)


            self.state = 2009
            self.match(CypherParser.T__24)
            self.state = 2011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2010
                self.match(CypherParser.SP)


            self.state = 2021
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.CREATE, CypherParser.LOAD, CypherParser.WITH, CypherParser.OPTIONAL, CypherParser.MATCH, CypherParser.UNWIND, CypherParser.MERGE, CypherParser.SET, CypherParser.DETACH, CypherParser.DELETE, CypherParser.REMOVE, CypherParser.FOREACH, CypherParser.CALL, CypherParser.RETURN, CypherParser.START]:
                self.state = 2013
                self.oC_RegularQuery()
                pass
            elif token in [CypherParser.T__2, CypherParser.SHORTESTPATH, CypherParser.ALLSHORTESTPATHS, CypherParser.COUNT, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.state = 2014
                self.oC_Pattern()
                self.state = 2019
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                if la_ == 1:
                    self.state = 2016
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2015
                        self.match(CypherParser.SP)


                    self.state = 2018
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2023
                self.match(CypherParser.SP)


            self.state = 2026
            self.match(CypherParser.T__25)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.oC_ProcedureName()
            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2029
                self.match(CypherParser.SP)


            self.state = 2032
            self.match(CypherParser.T__2)
            self.state = 2034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2033
                self.match(CypherParser.SP)


            self.state = 2053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__18) | (1 << CypherParser.T__19) | (1 << CypherParser.T__24) | (1 << CypherParser.T__26) | (1 << CypherParser.ALL) | (1 << CypherParser.EXISTS))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (CypherParser.SHORTESTPATH - 100)) | (1 << (CypherParser.ALLSHORTESTPATHS - 100)) | (1 << (CypherParser.NOT - 100)) | (1 << (CypherParser.NULL - 100)) | (1 << (CypherParser.COUNT - 100)) | (1 << (CypherParser.CASE - 100)) | (1 << (CypherParser.FILTER - 100)) | (1 << (CypherParser.EXTRACT - 100)) | (1 << (CypherParser.REDUCE - 100)) | (1 << (CypherParser.ANY - 100)) | (1 << (CypherParser.NONE - 100)) | (1 << (CypherParser.SINGLE - 100)) | (1 << (CypherParser.TRUE - 100)) | (1 << (CypherParser.FALSE - 100)) | (1 << (CypherParser.HexInteger - 100)) | (1 << (CypherParser.DecimalInteger - 100)) | (1 << (CypherParser.OctalInteger - 100)) | (1 << (CypherParser.HexLetter - 100)) | (1 << (CypherParser.ExponentDecimalReal - 100)) | (1 << (CypherParser.RegularDecimalReal - 100)) | (1 << (CypherParser.StringLiteral - 100)) | (1 << (CypherParser.UnescapedSymbolicName - 100)) | (1 << (CypherParser.EscapedSymbolicName - 100)))) != 0):
                self.state = 2036
                self.oC_Expression()
                self.state = 2038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 2037
                    self.match(CypherParser.SP)


                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__6:
                    self.state = 2040
                    self.match(CypherParser.T__6)
                    self.state = 2042
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2041
                        self.match(CypherParser.SP)


                    self.state = 2044
                    self.oC_Expression()
                    self.state = 2046
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2045
                        self.match(CypherParser.SP)


                    self.state = 2052
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2055
            self.match(CypherParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = CypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = CypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2061
            self.oC_Namespace()
            self.state = 2062
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = CypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2069
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,341,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2064
                    self.oC_SymbolicName()
                    self.state = 2065
                    self.match(CypherParser.T__23) 
                self.state = 2071
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,341,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = CypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2072
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = CypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_oC_Literal)
        try:
            self.state = 2080
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.TRUE, CypherParser.FALSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2074
                self.oC_BooleanLiteral()
                pass
            elif token in [CypherParser.NULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2075
                self.match(CypherParser.NULL)
                pass
            elif token in [CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger, CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2076
                self.oC_NumberLiteral()
                pass
            elif token in [CypherParser.StringLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2077
                self.match(CypherParser.StringLiteral)
                pass
            elif token in [CypherParser.T__4]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2078
                self.oC_ListLiteral()
                pass
            elif token in [CypherParser.T__24]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2079
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = CypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2082
            _la = self._input.LA(1)
            if not(_la==CypherParser.TRUE or _la==CypherParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = CypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_oC_NumberLiteral)
        try:
            self.state = 2086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2084
                self.oC_DoubleLiteral()
                pass
            elif token in [CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2085
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(CypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(CypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = CypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2088
            _la = self._input.LA(1)
            if not(((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (CypherParser.HexInteger - 124)) | (1 << (CypherParser.DecimalInteger - 124)) | (1 << (CypherParser.OctalInteger - 124)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(CypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(CypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = CypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2090
            _la = self._input.LA(1)
            if not(_la==CypherParser.ExponentDecimalReal or _la==CypherParser.RegularDecimalReal):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = CypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            self.match(CypherParser.T__4)
            self.state = 2094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2093
                self.match(CypherParser.SP)


            self.state = 2113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__18) | (1 << CypherParser.T__19) | (1 << CypherParser.T__24) | (1 << CypherParser.T__26) | (1 << CypherParser.ALL) | (1 << CypherParser.EXISTS))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (CypherParser.SHORTESTPATH - 100)) | (1 << (CypherParser.ALLSHORTESTPATHS - 100)) | (1 << (CypherParser.NOT - 100)) | (1 << (CypherParser.NULL - 100)) | (1 << (CypherParser.COUNT - 100)) | (1 << (CypherParser.CASE - 100)) | (1 << (CypherParser.FILTER - 100)) | (1 << (CypherParser.EXTRACT - 100)) | (1 << (CypherParser.REDUCE - 100)) | (1 << (CypherParser.ANY - 100)) | (1 << (CypherParser.NONE - 100)) | (1 << (CypherParser.SINGLE - 100)) | (1 << (CypherParser.TRUE - 100)) | (1 << (CypherParser.FALSE - 100)) | (1 << (CypherParser.HexInteger - 100)) | (1 << (CypherParser.DecimalInteger - 100)) | (1 << (CypherParser.OctalInteger - 100)) | (1 << (CypherParser.HexLetter - 100)) | (1 << (CypherParser.ExponentDecimalReal - 100)) | (1 << (CypherParser.RegularDecimalReal - 100)) | (1 << (CypherParser.StringLiteral - 100)) | (1 << (CypherParser.UnescapedSymbolicName - 100)) | (1 << (CypherParser.EscapedSymbolicName - 100)))) != 0):
                self.state = 2096
                self.oC_Expression()
                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 2097
                    self.match(CypherParser.SP)


                self.state = 2110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__6:
                    self.state = 2100
                    self.match(CypherParser.T__6)
                    self.state = 2102
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2101
                        self.match(CypherParser.SP)


                    self.state = 2104
                    self.oC_Expression()
                    self.state = 2106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2105
                        self.match(CypherParser.SP)


                    self.state = 2112
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2115
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = CypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            self.match(CypherParser.T__24)
            self.state = 2119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2118
                self.match(CypherParser.SP)


            self.state = 2154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (CypherParser.UNION - 53)) | (1 << (CypherParser.ALL - 53)) | (1 << (CypherParser.CREATE - 53)) | (1 << (CypherParser.DROP - 53)) | (1 << (CypherParser.ON - 53)) | (1 << (CypherParser.CONSTRAINT - 53)) | (1 << (CypherParser.IS - 53)) | (1 << (CypherParser.UNIQUE - 53)) | (1 << (CypherParser.EXISTS - 53)) | (1 << (CypherParser.WITH - 53)) | (1 << (CypherParser.AS - 53)) | (1 << (CypherParser.OPTIONAL - 53)) | (1 << (CypherParser.MATCH - 53)) | (1 << (CypherParser.UNWIND - 53)) | (1 << (CypherParser.MERGE - 53)) | (1 << (CypherParser.SET - 53)) | (1 << (CypherParser.DETACH - 53)) | (1 << (CypherParser.DELETE - 53)) | (1 << (CypherParser.REMOVE - 53)) | (1 << (CypherParser.IN - 53)) | (1 << (CypherParser.RETURN - 53)) | (1 << (CypherParser.DISTINCT - 53)) | (1 << (CypherParser.ORDER - 53)) | (1 << (CypherParser.BY - 53)) | (1 << (CypherParser.L_SKIP - 53)) | (1 << (CypherParser.LIMIT - 53)) | (1 << (CypherParser.ASCENDING - 53)) | (1 << (CypherParser.ASC - 53)) | (1 << (CypherParser.DESCENDING - 53)) | (1 << (CypherParser.DESC - 53)) | (1 << (CypherParser.WHERE - 53)) | (1 << (CypherParser.OR - 53)) | (1 << (CypherParser.XOR - 53)) | (1 << (CypherParser.AND - 53)) | (1 << (CypherParser.NOT - 53)) | (1 << (CypherParser.STARTS - 53)) | (1 << (CypherParser.ENDS - 53)) | (1 << (CypherParser.CONTAINS - 53)) | (1 << (CypherParser.NULL - 53)) | (1 << (CypherParser.COUNT - 53)) | (1 << (CypherParser.CASE - 53)) | (1 << (CypherParser.ELSE - 53)) | (1 << (CypherParser.END - 53)) | (1 << (CypherParser.WHEN - 53)) | (1 << (CypherParser.THEN - 53)) | (1 << (CypherParser.FILTER - 53)))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (CypherParser.EXTRACT - 117)) | (1 << (CypherParser.ANY - 117)) | (1 << (CypherParser.NONE - 117)) | (1 << (CypherParser.SINGLE - 117)) | (1 << (CypherParser.TRUE - 117)) | (1 << (CypherParser.FALSE - 117)) | (1 << (CypherParser.HexLetter - 117)) | (1 << (CypherParser.DO - 117)) | (1 << (CypherParser.FOR - 117)) | (1 << (CypherParser.REQUIRE - 117)) | (1 << (CypherParser.MANDATORY - 117)) | (1 << (CypherParser.SCALAR - 117)) | (1 << (CypherParser.OF - 117)) | (1 << (CypherParser.ADD - 117)) | (1 << (CypherParser.UnescapedSymbolicName - 117)) | (1 << (CypherParser.EscapedSymbolicName - 117)))) != 0):
                self.state = 2121
                self.oC_PropertyKeyName()
                self.state = 2123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 2122
                    self.match(CypherParser.SP)


                self.state = 2125
                self.match(CypherParser.T__10)
                self.state = 2127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 2126
                    self.match(CypherParser.SP)


                self.state = 2129
                self.oC_Expression()
                self.state = 2131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 2130
                    self.match(CypherParser.SP)


                self.state = 2151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__6:
                    self.state = 2133
                    self.match(CypherParser.T__6)
                    self.state = 2135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2134
                        self.match(CypherParser.SP)


                    self.state = 2137
                    self.oC_PropertyKeyName()
                    self.state = 2139
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2138
                        self.match(CypherParser.SP)


                    self.state = 2141
                    self.match(CypherParser.T__10)
                    self.state = 2143
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2142
                        self.match(CypherParser.SP)


                    self.state = 2145
                    self.oC_Expression()
                    self.state = 2147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 2146
                        self.match(CypherParser.SP)


                    self.state = 2153
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2156
            self.match(CypherParser.T__25)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = CypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2158
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LegacyParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_LegacyParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LegacyParameter" ):
                listener.enterOC_LegacyParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LegacyParameter" ):
                listener.exitOC_LegacyParameter(self)




    def oC_LegacyParameter(self):

        localctx = CypherParser.OC_LegacyParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_oC_LegacyParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2160
            self.match(CypherParser.T__24)
            self.state = 2162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2161
                self.match(CypherParser.SP)


            self.state = 2166
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.state = 2164
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.DecimalInteger]:
                self.state = 2165
                self.match(CypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 2168
                self.match(CypherParser.SP)


            self.state = 2171
            self.match(CypherParser.T__25)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = CypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2173
            self.match(CypherParser.T__26)
            self.state = 2176
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.state = 2174
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.DecimalInteger]:
                self.state = 2175
                self.match(CypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(CypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = CypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_oC_SchemaName)
        try:
            self.state = 2180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2178
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.UNION, CypherParser.ALL, CypherParser.CREATE, CypherParser.DROP, CypherParser.ON, CypherParser.CONSTRAINT, CypherParser.IS, CypherParser.UNIQUE, CypherParser.EXISTS, CypherParser.WITH, CypherParser.AS, CypherParser.OPTIONAL, CypherParser.MATCH, CypherParser.UNWIND, CypherParser.MERGE, CypherParser.SET, CypherParser.DETACH, CypherParser.DELETE, CypherParser.REMOVE, CypherParser.IN, CypherParser.RETURN, CypherParser.DISTINCT, CypherParser.ORDER, CypherParser.BY, CypherParser.L_SKIP, CypherParser.LIMIT, CypherParser.ASCENDING, CypherParser.ASC, CypherParser.DESCENDING, CypherParser.DESC, CypherParser.WHERE, CypherParser.OR, CypherParser.XOR, CypherParser.AND, CypherParser.NOT, CypherParser.STARTS, CypherParser.ENDS, CypherParser.CONTAINS, CypherParser.NULL, CypherParser.CASE, CypherParser.ELSE, CypherParser.END, CypherParser.WHEN, CypherParser.THEN, CypherParser.TRUE, CypherParser.FALSE, CypherParser.DO, CypherParser.FOR, CypherParser.REQUIRE, CypherParser.MANDATORY, CypherParser.SCALAR, CypherParser.OF, CypherParser.ADD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2179
                self.oC_ReservedWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(CypherParser.AND, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def OR(self):
            return self.getToken(CypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(CypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(CypherParser.DO, 0)

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(CypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(CypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(CypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(CypherParser.OF, 0)

        def ADD(self):
            return self.getToken(CypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = CypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2182
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (CypherParser.UNION - 53)) | (1 << (CypherParser.ALL - 53)) | (1 << (CypherParser.CREATE - 53)) | (1 << (CypherParser.DROP - 53)) | (1 << (CypherParser.ON - 53)) | (1 << (CypherParser.CONSTRAINT - 53)) | (1 << (CypherParser.IS - 53)) | (1 << (CypherParser.UNIQUE - 53)) | (1 << (CypherParser.EXISTS - 53)) | (1 << (CypherParser.WITH - 53)) | (1 << (CypherParser.AS - 53)) | (1 << (CypherParser.OPTIONAL - 53)) | (1 << (CypherParser.MATCH - 53)) | (1 << (CypherParser.UNWIND - 53)) | (1 << (CypherParser.MERGE - 53)) | (1 << (CypherParser.SET - 53)) | (1 << (CypherParser.DETACH - 53)) | (1 << (CypherParser.DELETE - 53)) | (1 << (CypherParser.REMOVE - 53)) | (1 << (CypherParser.IN - 53)) | (1 << (CypherParser.RETURN - 53)) | (1 << (CypherParser.DISTINCT - 53)) | (1 << (CypherParser.ORDER - 53)) | (1 << (CypherParser.BY - 53)) | (1 << (CypherParser.L_SKIP - 53)) | (1 << (CypherParser.LIMIT - 53)) | (1 << (CypherParser.ASCENDING - 53)) | (1 << (CypherParser.ASC - 53)) | (1 << (CypherParser.DESCENDING - 53)) | (1 << (CypherParser.DESC - 53)) | (1 << (CypherParser.WHERE - 53)) | (1 << (CypherParser.OR - 53)) | (1 << (CypherParser.XOR - 53)) | (1 << (CypherParser.AND - 53)) | (1 << (CypherParser.NOT - 53)) | (1 << (CypherParser.STARTS - 53)) | (1 << (CypherParser.ENDS - 53)) | (1 << (CypherParser.CONTAINS - 53)) | (1 << (CypherParser.NULL - 53)) | (1 << (CypherParser.CASE - 53)) | (1 << (CypherParser.ELSE - 53)) | (1 << (CypherParser.END - 53)) | (1 << (CypherParser.WHEN - 53)) | (1 << (CypherParser.THEN - 53)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (CypherParser.TRUE - 122)) | (1 << (CypherParser.FALSE - 122)) | (1 << (CypherParser.DO - 122)) | (1 << (CypherParser.FOR - 122)) | (1 << (CypherParser.REQUIRE - 122)) | (1 << (CypherParser.MANDATORY - 122)) | (1 << (CypherParser.SCALAR - 122)) | (1 << (CypherParser.OF - 122)) | (1 << (CypherParser.ADD - 122)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(CypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(CypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(CypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(CypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(CypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = CypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2184
            _la = self._input.LA(1)
            if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (CypherParser.COUNT - 110)) | (1 << (CypherParser.FILTER - 110)) | (1 << (CypherParser.EXTRACT - 110)) | (1 << (CypherParser.ANY - 110)) | (1 << (CypherParser.NONE - 110)) | (1 << (CypherParser.SINGLE - 110)) | (1 << (CypherParser.HexLetter - 110)) | (1 << (CypherParser.UnescapedSymbolicName - 110)) | (1 << (CypherParser.EscapedSymbolicName - 110)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = CypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2186
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__13) | (1 << CypherParser.T__27) | (1 << CypherParser.T__28) | (1 << CypherParser.T__29) | (1 << CypherParser.T__30))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = CypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__14) | (1 << CypherParser.T__31) | (1 << CypherParser.T__32) | (1 << CypherParser.T__33) | (1 << CypherParser.T__34))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = CypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2190
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__19) | (1 << CypherParser.T__35) | (1 << CypherParser.T__36) | (1 << CypherParser.T__37) | (1 << CypherParser.T__38) | (1 << CypherParser.T__39) | (1 << CypherParser.T__40) | (1 << CypherParser.T__41) | (1 << CypherParser.T__42) | (1 << CypherParser.T__43) | (1 << CypherParser.T__44) | (1 << CypherParser.T__45))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





