# Generated from Cypher.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0081")
        buf.write("\u0629\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\3\2\5\2\u00d2\n\2\3\2\3\2\5\2\u00d6\n\2\3\2\5\2\u00d9")
        buf.write("\n\2\3\2\5\2\u00dc\n\2\3\2\3\2\3\3\3\3\3\4\3\4\5\4\u00e4")
        buf.write("\n\4\3\5\3\5\5\5\u00e8\n\5\3\5\7\5\u00eb\n\5\f\5\16\5")
        buf.write("\u00ee\13\5\3\6\3\6\3\6\3\6\5\6\u00f4\n\6\3\6\3\6\3\6")
        buf.write("\5\6\u00f9\n\6\3\6\5\6\u00fc\n\6\3\7\3\7\5\7\u0100\n\7")
        buf.write("\3\b\3\b\5\b\u0104\n\b\7\b\u0106\n\b\f\b\16\b\u0109\13")
        buf.write("\b\3\b\3\b\3\b\5\b\u010e\n\b\7\b\u0110\n\b\f\b\16\b\u0113")
        buf.write("\13\b\3\b\3\b\5\b\u0117\n\b\3\b\7\b\u011a\n\b\f\b\16\b")
        buf.write("\u011d\13\b\3\b\5\b\u0120\n\b\3\b\5\b\u0123\n\b\5\b\u0125")
        buf.write("\n\b\3\t\3\t\5\t\u0129\n\t\7\t\u012b\n\t\f\t\16\t\u012e")
        buf.write("\13\t\3\t\3\t\5\t\u0132\n\t\7\t\u0134\n\t\f\t\16\t\u0137")
        buf.write("\13\t\3\t\3\t\5\t\u013b\n\t\6\t\u013d\n\t\r\t\16\t\u013e")
        buf.write("\3\t\3\t\3\n\3\n\3\n\3\n\3\n\5\n\u0148\n\n\3\13\3\13\3")
        buf.write("\13\5\13\u014d\n\13\3\f\3\f\5\f\u0151\n\f\3\f\3\f\5\f")
        buf.write("\u0155\n\f\3\f\3\f\5\f\u0159\n\f\3\f\5\f\u015c\n\f\3\r")
        buf.write("\3\r\5\r\u0160\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\5")
        buf.write("\16\u016a\n\16\3\16\3\16\3\16\7\16\u016f\n\16\f\16\16")
        buf.write("\16\u0172\13\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\5\17\u017e\n\17\3\20\3\20\5\20\u0182\n\20\3")
        buf.write("\20\3\20\3\21\3\21\5\21\u0188\n\21\3\21\3\21\5\21\u018c")
        buf.write("\n\21\3\21\3\21\5\21\u0190\n\21\3\21\7\21\u0193\n\21\f")
        buf.write("\21\16\21\u0196\13\21\3\22\3\22\5\22\u019a\n\22\3\22\3")
        buf.write("\22\5\22\u019e\n\22\3\22\3\22\3\22\3\22\5\22\u01a4\n\22")
        buf.write("\3\22\3\22\5\22\u01a8\n\22\3\22\3\22\3\22\3\22\5\22\u01ae")
        buf.write("\n\22\3\22\3\22\5\22\u01b2\n\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u01b8\n\22\3\22\3\22\5\22\u01bc\n\22\3\23\3\23\5\23")
        buf.write("\u01c0\n\23\3\23\3\23\5\23\u01c4\n\23\3\23\3\23\5\23\u01c8")
        buf.write("\n\23\3\23\3\23\5\23\u01cc\n\23\3\23\7\23\u01cf\n\23\f")
        buf.write("\23\16\23\u01d2\13\23\3\24\3\24\3\24\3\24\5\24\u01d8\n")
        buf.write("\24\3\24\3\24\5\24\u01dc\n\24\3\24\7\24\u01df\n\24\f\24")
        buf.write("\16\24\u01e2\13\24\3\25\3\25\3\25\3\25\5\25\u01e8\n\25")
        buf.write("\3\26\3\26\3\26\3\26\5\26\u01ee\n\26\3\26\3\26\3\26\5")
        buf.write("\26\u01f3\n\26\3\27\3\27\3\27\3\27\5\27\u01f9\n\27\3\27")
        buf.write("\5\27\u01fc\n\27\3\27\3\27\3\27\3\27\5\27\u0202\n\27\5")
        buf.write("\27\u0204\n\27\3\30\3\30\5\30\u0208\n\30\3\30\3\30\5\30")
        buf.write("\u020c\n\30\3\30\7\30\u020f\n\30\f\30\16\30\u0212\13\30")
        buf.write("\3\30\5\30\u0215\n\30\3\30\5\30\u0218\n\30\3\31\3\31\3")
        buf.write("\31\3\31\3\31\5\31\u021f\n\31\3\31\3\31\3\32\3\32\3\32")
        buf.write("\5\32\u0226\n\32\3\32\5\32\u0229\n\32\3\33\3\33\3\33\3")
        buf.write("\34\5\34\u022f\n\34\3\34\5\34\u0232\n\34\3\34\3\34\3\34")
        buf.write("\3\34\5\34\u0238\n\34\3\34\3\34\5\34\u023c\n\34\3\34\3")
        buf.write("\34\5\34\u0240\n\34\3\35\3\35\5\35\u0244\n\35\3\35\3\35")
        buf.write("\5\35\u0248\n\35\3\35\7\35\u024b\n\35\f\35\16\35\u024e")
        buf.write("\13\35\3\35\3\35\5\35\u0252\n\35\3\35\3\35\5\35\u0256")
        buf.write("\n\35\3\35\7\35\u0259\n\35\f\35\16\35\u025c\13\35\5\35")
        buf.write("\u025e\n\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0267")
        buf.write("\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0270\n")
        buf.write("\37\3\37\7\37\u0273\n\37\f\37\16\37\u0276\13\37\3 \3 ")
        buf.write("\3 \3 \3!\3!\3!\3!\3\"\3\"\5\"\u0282\n\"\3\"\5\"\u0285")
        buf.write("\n\"\3#\3#\3#\3#\3$\3$\5$\u028d\n$\3$\3$\5$\u0291\n$\3")
        buf.write("$\7$\u0294\n$\f$\16$\u0297\13$\3%\3%\5%\u029b\n%\3%\3")
        buf.write("%\5%\u029f\n%\3%\3%\3%\5%\u02a4\n%\3&\3&\3\'\3\'\5\'\u02aa")
        buf.write("\n\'\3\'\7\'\u02ad\n\'\f\'\16\'\u02b0\13\'\3\'\3\'\3\'")
        buf.write("\3\'\5\'\u02b6\n\'\3(\3(\5(\u02ba\n(\3(\6(\u02bd\n(\r")
        buf.write("(\16(\u02be\3)\3)\5)\u02c3\n)\3)\3)\5)\u02c7\n)\5)\u02c9")
        buf.write("\n)\3)\3)\5)\u02cd\n)\5)\u02cf\n)\3)\3)\5)\u02d3\n)\5")
        buf.write(")\u02d5\n)\3)\3)\3*\3*\5*\u02db\n*\3*\3*\3+\3+\5+\u02e1")
        buf.write("\n+\3+\3+\5+\u02e5\n+\3+\5+\u02e8\n+\3+\5+\u02eb\n+\3")
        buf.write("+\3+\5+\u02ef\n+\3+\3+\3+\3+\5+\u02f5\n+\3+\3+\5+\u02f9")
        buf.write("\n+\3+\5+\u02fc\n+\3+\5+\u02ff\n+\3+\3+\3+\3+\5+\u0305")
        buf.write("\n+\3+\5+\u0308\n+\3+\5+\u030b\n+\3+\3+\5+\u030f\n+\3")
        buf.write("+\3+\3+\3+\5+\u0315\n+\3+\5+\u0318\n+\3+\5+\u031b\n+\3")
        buf.write("+\3+\5+\u031f\n+\3,\3,\5,\u0323\n,\3,\3,\5,\u0327\n,\5")
        buf.write(",\u0329\n,\3,\3,\5,\u032d\n,\5,\u032f\n,\3,\5,\u0332\n")
        buf.write(",\3,\3,\5,\u0336\n,\5,\u0338\n,\3,\3,\3-\3-\5-\u033e\n")
        buf.write("-\3.\3.\5.\u0342\n.\3.\3.\5.\u0346\n.\3.\3.\5.\u034a\n")
        buf.write(".\3.\5.\u034d\n.\3.\7.\u0350\n.\f.\16.\u0353\13.\3/\3")
        buf.write("/\5/\u0357\n/\3/\7/\u035a\n/\f/\16/\u035d\13/\3\60\3\60")
        buf.write("\5\60\u0361\n\60\3\60\3\60\3\61\3\61\5\61\u0367\n\61\3")
        buf.write("\61\3\61\5\61\u036b\n\61\5\61\u036d\n\61\3\61\3\61\5\61")
        buf.write("\u0371\n\61\3\61\3\61\5\61\u0375\n\61\5\61\u0377\n\61")
        buf.write("\5\61\u0379\n\61\3\62\3\62\3\63\3\63\3\64\3\64\5\64\u0381")
        buf.write("\n\64\3\64\6\64\u0384\n\64\r\64\16\64\u0385\3\65\3\65")
        buf.write("\3\66\3\66\3\66\3\66\3\66\7\66\u038f\n\66\f\66\16\66\u0392")
        buf.write("\13\66\3\67\3\67\3\67\3\67\3\67\7\67\u0399\n\67\f\67\16")
        buf.write("\67\u039c\13\67\38\38\38\38\38\78\u03a3\n8\f8\168\u03a6")
        buf.write("\138\39\39\59\u03aa\n9\79\u03ac\n9\f9\169\u03af\139\3")
        buf.write("9\39\3:\3:\5:\u03b5\n:\3:\7:\u03b8\n:\f:\16:\u03bb\13")
        buf.write(":\3;\3;\5;\u03bf\n;\3;\3;\3;\5;\u03c4\n;\3;\3;\3;\5;\u03c9")
        buf.write("\n;\3;\3;\3;\5;\u03ce\n;\3;\3;\3;\5;\u03d3\n;\3;\3;\3")
        buf.write(";\5;\u03d8\n;\3;\5;\u03db\n;\3<\3<\3<\3<\7<\u03e1\n<\f")
        buf.write("<\16<\u03e4\13<\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u03f0")
        buf.write("\n=\3=\5=\u03f3\n=\3=\3=\3>\3>\3>\5>\u03fa\n>\3>\3>\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0408\n?\3@\3@\5@\u040c")
        buf.write("\n@\3@\3@\5@\u0410\n@\3@\3@\5@\u0414\n@\3@\3@\5@\u0418")
        buf.write("\n@\3@\7@\u041b\n@\f@\16@\u041e\13@\3A\3A\5A\u0422\nA")
        buf.write("\3A\3A\5A\u0426\nA\3A\3A\5A\u042a\nA\3A\3A\5A\u042e\n")
        buf.write("A\3A\3A\5A\u0432\nA\3A\3A\5A\u0436\nA\3A\7A\u0439\nA\f")
        buf.write("A\16A\u043c\13A\3B\3B\5B\u0440\nB\3B\3B\5B\u0444\nB\3")
        buf.write("B\7B\u0447\nB\fB\16B\u044a\13B\3C\3C\3C\5C\u044f\nC\3")
        buf.write("C\5C\u0452\nC\3D\3D\5D\u0456\nD\3D\3D\5D\u045a\nD\3D\7")
        buf.write("D\u045d\nD\fD\16D\u0460\13D\3D\5D\u0463\nD\3D\5D\u0466")
        buf.write("\nD\3E\3E\3E\3E\3E\3E\5E\u046e\nE\3E\3E\5E\u0472\nE\3")
        buf.write("E\5E\u0475\nE\3F\3F\5F\u0479\nF\3F\3F\3G\3G\3G\3G\3G\5")
        buf.write("G\u0482\nG\3G\3G\5G\u0486\nG\3G\3G\5G\u048a\nG\3G\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\5G\u0495\nG\3H\3H\5H\u0499\nH\3H\6")
        buf.write("H\u049c\nH\rH\16H\u049d\3H\3H\5H\u04a2\nH\3H\3H\5H\u04a6")
        buf.write("\nH\3H\6H\u04a9\nH\rH\16H\u04aa\5H\u04ad\nH\3H\5H\u04b0")
        buf.write("\nH\3H\3H\5H\u04b4\nH\3H\5H\u04b7\nH\3H\5H\u04ba\nH\3")
        buf.write("H\3H\3I\3I\5I\u04c0\nI\3I\3I\5I\u04c4\nI\3I\3I\5I\u04c8")
        buf.write("\nI\3I\3I\3J\3J\5J\u04ce\nJ\3J\3J\5J\u04d2\nJ\3J\3J\5")
        buf.write("J\u04d6\nJ\3J\5J\u04d9\nJ\3J\5J\u04dc\nJ\3J\3J\3K\3K\5")
        buf.write("K\u04e2\nK\3K\3K\5K\u04e6\nK\3K\3K\5K\u04ea\nK\5K\u04ec")
        buf.write("\nK\3K\3K\5K\u04f0\nK\3K\3K\5K\u04f4\nK\5K\u04f6\nK\3")
        buf.write("K\3K\5K\u04fa\nK\3K\3K\5K\u04fe\nK\3K\3K\3L\3L\5L\u0504")
        buf.write("\nL\3L\3L\5L\u0508\nL\3L\3L\5L\u050c\nL\3L\3L\3L\3L\5")
        buf.write("L\u0512\nL\3L\3L\5L\u0516\nL\3L\3L\5L\u051a\nL\3L\3L\3")
        buf.write("L\3L\5L\u0520\nL\3L\3L\5L\u0524\nL\3L\3L\5L\u0528\nL\3")
        buf.write("L\3L\3L\3L\5L\u052e\nL\3L\3L\5L\u0532\nL\3L\3L\5L\u0536")
        buf.write("\nL\3L\3L\5L\u053a\nL\3M\3M\5M\u053e\nM\3M\5M\u0541\n")
        buf.write("M\3N\3N\3O\3O\5O\u0547\nO\3O\3O\5O\u054b\nO\3O\3O\3P\3")
        buf.write("P\3P\3P\3P\3P\3Q\3Q\5Q\u0557\nQ\3Q\3Q\5Q\u055b\nQ\3Q\3")
        buf.write("Q\5Q\u055f\nQ\5Q\u0561\nQ\3Q\3Q\5Q\u0565\nQ\3Q\3Q\5Q\u0569")
        buf.write("\nQ\3Q\3Q\5Q\u056d\nQ\7Q\u056f\nQ\fQ\16Q\u0572\13Q\5Q")
        buf.write("\u0574\nQ\3Q\3Q\3R\3R\3R\3S\3S\5S\u057d\nS\3S\3S\5S\u0581")
        buf.write("\nS\3S\3S\3S\5S\u0586\nS\3S\5S\u0589\nS\5S\u058b\nS\3")
        buf.write("S\5S\u058e\nS\3S\3S\3T\3T\5T\u0594\nT\3T\3T\5T\u0598\n")
        buf.write("T\3T\3T\5T\u059c\nT\3T\3T\5T\u05a0\nT\3T\3T\5T\u05a4\n")
        buf.write("T\7T\u05a6\nT\fT\16T\u05a9\13T\5T\u05ab\nT\3T\3T\3U\3")
        buf.write("U\3V\3V\3W\3W\3W\3X\3X\3X\7X\u05b9\nX\fX\16X\u05bc\13")
        buf.write("X\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u05c6\nZ\3[\3[\3\\\3\\\5")
        buf.write("\\\u05cc\n\\\3]\3]\3^\3^\3_\3_\5_\u05d4\n_\3_\3_\5_\u05d8")
        buf.write("\n_\3_\3_\5_\u05dc\n_\3_\3_\5_\u05e0\n_\7_\u05e2\n_\f")
        buf.write("_\16_\u05e5\13_\5_\u05e7\n_\3_\3_\3`\3`\5`\u05ed\n`\3")
        buf.write("`\3`\5`\u05f1\n`\3`\3`\5`\u05f5\n`\3`\3`\5`\u05f9\n`\3")
        buf.write("`\3`\5`\u05fd\n`\3`\3`\5`\u0601\n`\3`\3`\5`\u0605\n`\3")
        buf.write("`\3`\5`\u0609\n`\7`\u060b\n`\f`\16`\u060e\13`\5`\u0610")
        buf.write("\n`\3`\3`\3a\3a\3b\3b\3b\5b\u0619\nb\3c\3c\5c\u061d\n")
        buf.write("c\3d\3d\3e\3e\3f\3f\3g\3g\3h\3h\3h\2\2i\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\2\f\3\2FI\3\2\24\25\3\2_`\3\2ac\3\2kl\7\2\60<?TVZ^`o")
        buf.write("x\7\2UU[]ddy{~~\4\2\20\20\35 \4\2\21\21!$\4\2\25\25%/")
        buf.write("\2\u0703\2\u00d1\3\2\2\2\4\u00df\3\2\2\2\6\u00e3\3\2\2")
        buf.write("\2\b\u00e5\3\2\2\2\n\u00fb\3\2\2\2\f\u00ff\3\2\2\2\16")
        buf.write("\u0124\3\2\2\2\20\u013c\3\2\2\2\22\u0147\3\2\2\2\24\u014c")
        buf.write("\3\2\2\2\26\u0150\3\2\2\2\30\u015d\3\2\2\2\32\u0167\3")
        buf.write("\2\2\2\34\u017d\3\2\2\2\36\u017f\3\2\2\2 \u0185\3\2\2")
        buf.write("\2\"\u01bb\3\2\2\2$\u01bf\3\2\2\2&\u01d3\3\2\2\2(\u01e7")
        buf.write("\3\2\2\2*\u01e9\3\2\2\2,\u01f4\3\2\2\2.\u0205\3\2\2\2")
        buf.write("\60\u021e\3\2\2\2\62\u0222\3\2\2\2\64\u022a\3\2\2\2\66")
        buf.write("\u0231\3\2\2\28\u025d\3\2\2\2:\u0266\3\2\2\2<\u0268\3")
        buf.write("\2\2\2>\u0277\3\2\2\2@\u027b\3\2\2\2B\u027f\3\2\2\2D\u0286")
        buf.write("\3\2\2\2F\u028a\3\2\2\2H\u02a3\3\2\2\2J\u02a5\3\2\2\2")
        buf.write("L\u02b5\3\2\2\2N\u02b7\3\2\2\2P\u02c0\3\2\2\2R\u02d8\3")
        buf.write("\2\2\2T\u031e\3\2\2\2V\u0320\3\2\2\2X\u033d\3\2\2\2Z\u033f")
        buf.write("\3\2\2\2\\\u0354\3\2\2\2^\u035e\3\2\2\2`\u0364\3\2\2\2")
        buf.write("b\u037a\3\2\2\2d\u037c\3\2\2\2f\u037e\3\2\2\2h\u0387\3")
        buf.write("\2\2\2j\u0389\3\2\2\2l\u0393\3\2\2\2n\u039d\3\2\2\2p\u03ad")
        buf.write("\3\2\2\2r\u03b2\3\2\2\2t\u03da\3\2\2\2v\u03dc\3\2\2\2")
        buf.write("x\u03ef\3\2\2\2z\u03f6\3\2\2\2|\u0407\3\2\2\2~\u0409\3")
        buf.write("\2\2\2\u0080\u041f\3\2\2\2\u0082\u043d\3\2\2\2\u0084\u0451")
        buf.write("\3\2\2\2\u0086\u0453\3\2\2\2\u0088\u0474\3\2\2\2\u008a")
        buf.write("\u0476\3\2\2\2\u008c\u0494\3\2\2\2\u008e\u04ac\3\2\2\2")
        buf.write("\u0090\u04bd\3\2\2\2\u0092\u04cb\3\2\2\2\u0094\u04df\3")
        buf.write("\2\2\2\u0096\u0539\3\2\2\2\u0098\u053b\3\2\2\2\u009a\u0542")
        buf.write("\3\2\2\2\u009c\u0544\3\2\2\2\u009e\u054e\3\2\2\2\u00a0")
        buf.write("\u0554\3\2\2\2\u00a2\u0577\3\2\2\2\u00a4\u057a\3\2\2\2")
        buf.write("\u00a6\u0591\3\2\2\2\u00a8\u05ae\3\2\2\2\u00aa\u05b0\3")
        buf.write("\2\2\2\u00ac\u05b2\3\2\2\2\u00ae\u05ba\3\2\2\2\u00b0\u05bd")
        buf.write("\3\2\2\2\u00b2\u05c5\3\2\2\2\u00b4\u05c7\3\2\2\2\u00b6")
        buf.write("\u05cb\3\2\2\2\u00b8\u05cd\3\2\2\2\u00ba\u05cf\3\2\2\2")
        buf.write("\u00bc\u05d1\3\2\2\2\u00be\u05ea\3\2\2\2\u00c0\u0613\3")
        buf.write("\2\2\2\u00c2\u0615\3\2\2\2\u00c4\u061c\3\2\2\2\u00c6\u061e")
        buf.write("\3\2\2\2\u00c8\u0620\3\2\2\2\u00ca\u0622\3\2\2\2\u00cc")
        buf.write("\u0624\3\2\2\2\u00ce\u0626\3\2\2\2\u00d0\u00d2\7\177\2")
        buf.write("\2\u00d1\u00d0\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3")
        buf.write("\3\2\2\2\u00d3\u00d8\5\4\3\2\u00d4\u00d6\7\177\2\2\u00d5")
        buf.write("\u00d4\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6\u00d7\3\2\2\2")
        buf.write("\u00d7\u00d9\7\3\2\2\u00d8\u00d5\3\2\2\2\u00d8\u00d9\3")
        buf.write("\2\2\2\u00d9\u00db\3\2\2\2\u00da\u00dc\7\177\2\2\u00db")
        buf.write("\u00da\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00dd\3\2\2\2")
        buf.write("\u00dd\u00de\7\2\2\3\u00de\3\3\2\2\2\u00df\u00e0\5\6\4")
        buf.write("\2\u00e0\5\3\2\2\2\u00e1\u00e4\5\b\5\2\u00e2\u00e4\5,")
        buf.write("\27\2\u00e3\u00e1\3\2\2\2\u00e3\u00e2\3\2\2\2\u00e4\7")
        buf.write("\3\2\2\2\u00e5\u00ec\5\f\7\2\u00e6\u00e8\7\177\2\2\u00e7")
        buf.write("\u00e6\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00e9\3\2\2\2")
        buf.write("\u00e9\u00eb\5\n\6\2\u00ea\u00e7\3\2\2\2\u00eb\u00ee\3")
        buf.write("\2\2\2\u00ec\u00ea\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\t")
        buf.write("\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ef\u00f0\7\60\2\2\u00f0")
        buf.write("\u00f1\7\177\2\2\u00f1\u00f3\7\61\2\2\u00f2\u00f4\7\177")
        buf.write("\2\2\u00f3\u00f2\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5")
        buf.write("\3\2\2\2\u00f5\u00fc\5\f\7\2\u00f6\u00f8\7\60\2\2\u00f7")
        buf.write("\u00f9\7\177\2\2\u00f8\u00f7\3\2\2\2\u00f8\u00f9\3\2\2")
        buf.write("\2\u00f9\u00fa\3\2\2\2\u00fa\u00fc\5\f\7\2\u00fb\u00ef")
        buf.write("\3\2\2\2\u00fb\u00f6\3\2\2\2\u00fc\13\3\2\2\2\u00fd\u0100")
        buf.write("\5\16\b\2\u00fe\u0100\5\20\t\2\u00ff\u00fd\3\2\2\2\u00ff")
        buf.write("\u00fe\3\2\2\2\u0100\r\3\2\2\2\u0101\u0103\5\24\13\2\u0102")
        buf.write("\u0104\7\177\2\2\u0103\u0102\3\2\2\2\u0103\u0104\3\2\2")
        buf.write("\2\u0104\u0106\3\2\2\2\u0105\u0101\3\2\2\2\u0106\u0109")
        buf.write("\3\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108")
        buf.write("\u010a\3\2\2\2\u0109\u0107\3\2\2\2\u010a\u0125\5\64\33")
        buf.write("\2\u010b\u010d\5\24\13\2\u010c\u010e\7\177\2\2\u010d\u010c")
        buf.write("\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u0110\3\2\2\2\u010f")
        buf.write("\u010b\3\2\2\2\u0110\u0113\3\2\2\2\u0111\u010f\3\2\2\2")
        buf.write("\u0111\u0112\3\2\2\2\u0112\u0114\3\2\2\2\u0113\u0111\3")
        buf.write("\2\2\2\u0114\u011b\5\22\n\2\u0115\u0117\7\177\2\2\u0116")
        buf.write("\u0115\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0118\3\2\2\2")
        buf.write("\u0118\u011a\5\22\n\2\u0119\u0116\3\2\2\2\u011a\u011d")
        buf.write("\3\2\2\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c")
        buf.write("\u0122\3\2\2\2\u011d\u011b\3\2\2\2\u011e\u0120\7\177\2")
        buf.write("\2\u011f\u011e\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0121")
        buf.write("\3\2\2\2\u0121\u0123\5\64\33\2\u0122\u011f\3\2\2\2\u0122")
        buf.write("\u0123\3\2\2\2\u0123\u0125\3\2\2\2\u0124\u0107\3\2\2\2")
        buf.write("\u0124\u0111\3\2\2\2\u0125\17\3\2\2\2\u0126\u0128\5\24")
        buf.write("\13\2\u0127\u0129\7\177\2\2\u0128\u0127\3\2\2\2\u0128")
        buf.write("\u0129\3\2\2\2\u0129\u012b\3\2\2\2\u012a\u0126\3\2\2\2")
        buf.write("\u012b\u012e\3\2\2\2\u012c\u012a\3\2\2\2\u012c\u012d\3")
        buf.write("\2\2\2\u012d\u0135\3\2\2\2\u012e\u012c\3\2\2\2\u012f\u0131")
        buf.write("\5\22\n\2\u0130\u0132\7\177\2\2\u0131\u0130\3\2\2\2\u0131")
        buf.write("\u0132\3\2\2\2\u0132\u0134\3\2\2\2\u0133\u012f\3\2\2\2")
        buf.write("\u0134\u0137\3\2\2\2\u0135\u0133\3\2\2\2\u0135\u0136\3")
        buf.write("\2\2\2\u0136\u0138\3\2\2\2\u0137\u0135\3\2\2\2\u0138\u013a")
        buf.write("\5\62\32\2\u0139\u013b\7\177\2\2\u013a\u0139\3\2\2\2\u013a")
        buf.write("\u013b\3\2\2\2\u013b\u013d\3\2\2\2\u013c\u012c\3\2\2\2")
        buf.write("\u013d\u013e\3\2\2\2\u013e\u013c\3\2\2\2\u013e\u013f\3")
        buf.write("\2\2\2\u013f\u0140\3\2\2\2\u0140\u0141\5\16\b\2\u0141")
        buf.write("\21\3\2\2\2\u0142\u0148\5\36\20\2\u0143\u0148\5\32\16")
        buf.write("\2\u0144\u0148\5$\23\2\u0145\u0148\5 \21\2\u0146\u0148")
        buf.write("\5&\24\2\u0147\u0142\3\2\2\2\u0147\u0143\3\2\2\2\u0147")
        buf.write("\u0144\3\2\2\2\u0147\u0145\3\2\2\2\u0147\u0146\3\2\2\2")
        buf.write("\u0148\23\3\2\2\2\u0149\u014d\5\26\f\2\u014a\u014d\5\30")
        buf.write("\r\2\u014b\u014d\5*\26\2\u014c\u0149\3\2\2\2\u014c\u014a")
        buf.write("\3\2\2\2\u014c\u014b\3\2\2\2\u014d\25\3\2\2\2\u014e\u014f")
        buf.write("\7\62\2\2\u014f\u0151\7\177\2\2\u0150\u014e\3\2\2\2\u0150")
        buf.write("\u0151\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0154\7\63\2")
        buf.write("\2\u0153\u0155\7\177\2\2\u0154\u0153\3\2\2\2\u0154\u0155")
        buf.write("\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u015b\5F$\2\u0157\u0159")
        buf.write("\7\177\2\2\u0158\u0157\3\2\2\2\u0158\u0159\3\2\2\2\u0159")
        buf.write("\u015a\3\2\2\2\u015a\u015c\5D#\2\u015b\u0158\3\2\2\2\u015b")
        buf.write("\u015c\3\2\2\2\u015c\27\3\2\2\2\u015d\u015f\7\64\2\2\u015e")
        buf.write("\u0160\7\177\2\2\u015f\u015e\3\2\2\2\u015f\u0160\3\2\2")
        buf.write("\2\u0160\u0161\3\2\2\2\u0161\u0162\5h\65\2\u0162\u0163")
        buf.write("\7\177\2\2\u0163\u0164\7\65\2\2\u0164\u0165\7\177\2\2")
        buf.write("\u0165\u0166\5\u00b0Y\2\u0166\31\3\2\2\2\u0167\u0169\7")
        buf.write("\66\2\2\u0168\u016a\7\177\2\2\u0169\u0168\3\2\2\2\u0169")
        buf.write("\u016a\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u0170\5H%\2\u016c")
        buf.write("\u016d\7\177\2\2\u016d\u016f\5\34\17\2\u016e\u016c\3\2")
        buf.write("\2\2\u016f\u0172\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171")
        buf.write("\3\2\2\2\u0171\33\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0174")
        buf.write("\7\67\2\2\u0174\u0175\7\177\2\2\u0175\u0176\7\63\2\2\u0176")
        buf.write("\u0177\7\177\2\2\u0177\u017e\5 \21\2\u0178\u0179\7\67")
        buf.write("\2\2\u0179\u017a\7\177\2\2\u017a\u017b\78\2\2\u017b\u017c")
        buf.write("\7\177\2\2\u017c\u017e\5 \21\2\u017d\u0173\3\2\2\2\u017d")
        buf.write("\u0178\3\2\2\2\u017e\35\3\2\2\2\u017f\u0181\78\2\2\u0180")
        buf.write("\u0182\7\177\2\2\u0181\u0180\3\2\2\2\u0181\u0182\3\2\2")
        buf.write("\2\u0182\u0183\3\2\2\2\u0183\u0184\5F$\2\u0184\37\3\2")
        buf.write("\2\2\u0185\u0187\79\2\2\u0186\u0188\7\177\2\2\u0187\u0186")
        buf.write("\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0189\3\2\2\2\u0189")
        buf.write("\u0194\5\"\22\2\u018a\u018c\7\177\2\2\u018b\u018a\3\2")
        buf.write("\2\2\u018b\u018c\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018f")
        buf.write("\7\4\2\2\u018e\u0190\7\177\2\2\u018f\u018e\3\2\2\2\u018f")
        buf.write("\u0190\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0193\5\"\22")
        buf.write("\2\u0192\u018b\3\2\2\2\u0193\u0196\3\2\2\2\u0194\u0192")
        buf.write("\3\2\2\2\u0194\u0195\3\2\2\2\u0195!\3\2\2\2\u0196\u0194")
        buf.write("\3\2\2\2\u0197\u0199\5f\64\2\u0198\u019a\7\177\2\2\u0199")
        buf.write("\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019b\3\2\2\2")
        buf.write("\u019b\u019d\7\5\2\2\u019c\u019e\7\177\2\2\u019d\u019c")
        buf.write("\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u019f\3\2\2\2\u019f")
        buf.write("\u01a0\5h\65\2\u01a0\u01bc\3\2\2\2\u01a1\u01a3\5\u00b0")
        buf.write("Y\2\u01a2\u01a4\7\177\2\2\u01a3\u01a2\3\2\2\2\u01a3\u01a4")
        buf.write("\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a7\7\5\2\2\u01a6")
        buf.write("\u01a8\7\177\2\2\u01a7\u01a6\3\2\2\2\u01a7\u01a8\3\2\2")
        buf.write("\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa\5h\65\2\u01aa\u01bc")
        buf.write("\3\2\2\2\u01ab\u01ad\5\u00b0Y\2\u01ac\u01ae\7\177\2\2")
        buf.write("\u01ad\u01ac\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\3")
        buf.write("\2\2\2\u01af\u01b1\7\6\2\2\u01b0\u01b2\7\177\2\2\u01b1")
        buf.write("\u01b0\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b3\3\2\2\2")
        buf.write("\u01b3\u01b4\5h\65\2\u01b4\u01bc\3\2\2\2\u01b5\u01b7\5")
        buf.write("\u00b0Y\2\u01b6\u01b8\7\177\2\2\u01b7\u01b6\3\2\2\2\u01b7")
        buf.write("\u01b8\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01ba\5\\/\2")
        buf.write("\u01ba\u01bc\3\2\2\2\u01bb\u0197\3\2\2\2\u01bb\u01a1\3")
        buf.write("\2\2\2\u01bb\u01ab\3\2\2\2\u01bb\u01b5\3\2\2\2\u01bc#")
        buf.write("\3\2\2\2\u01bd\u01be\7:\2\2\u01be\u01c0\7\177\2\2\u01bf")
        buf.write("\u01bd\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c1\3\2\2\2")
        buf.write("\u01c1\u01c3\7;\2\2\u01c2\u01c4\7\177\2\2\u01c3\u01c2")
        buf.write("\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5")
        buf.write("\u01d0\5h\65\2\u01c6\u01c8\7\177\2\2\u01c7\u01c6\3\2\2")
        buf.write("\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01cb")
        buf.write("\7\4\2\2\u01ca\u01cc\7\177\2\2\u01cb\u01ca\3\2\2\2\u01cb")
        buf.write("\u01cc\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01cf\5h\65\2")
        buf.write("\u01ce\u01c7\3\2\2\2\u01cf\u01d2\3\2\2\2\u01d0\u01ce\3")
        buf.write("\2\2\2\u01d0\u01d1\3\2\2\2\u01d1%\3\2\2\2\u01d2\u01d0")
        buf.write("\3\2\2\2\u01d3\u01d4\7<\2\2\u01d4\u01d5\7\177\2\2\u01d5")
        buf.write("\u01e0\5(\25\2\u01d6\u01d8\7\177\2\2\u01d7\u01d6\3\2\2")
        buf.write("\2\u01d7\u01d8\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01db")
        buf.write("\7\4\2\2\u01da\u01dc\7\177\2\2\u01db\u01da\3\2\2\2\u01db")
        buf.write("\u01dc\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01df\5(\25\2")
        buf.write("\u01de\u01d7\3\2\2\2\u01df\u01e2\3\2\2\2\u01e0\u01de\3")
        buf.write("\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\'\3\2\2\2\u01e2\u01e0")
        buf.write("\3\2\2\2\u01e3\u01e4\5\u00b0Y\2\u01e4\u01e5\5\\/\2\u01e5")
        buf.write("\u01e8\3\2\2\2\u01e6\u01e8\5f\64\2\u01e7\u01e3\3\2\2\2")
        buf.write("\u01e7\u01e6\3\2\2\2\u01e8)\3\2\2\2\u01e9\u01ea\7=\2\2")
        buf.write("\u01ea\u01eb\7\177\2\2\u01eb\u01f2\5\u00a6T\2\u01ec\u01ee")
        buf.write("\7\177\2\2\u01ed\u01ec\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee")
        buf.write("\u01ef\3\2\2\2\u01ef\u01f0\7>\2\2\u01f0\u01f1\7\177\2")
        buf.write("\2\u01f1\u01f3\5.\30\2\u01f2\u01ed\3\2\2\2\u01f2\u01f3")
        buf.write("\3\2\2\2\u01f3+\3\2\2\2\u01f4\u01f5\7=\2\2\u01f5\u01f8")
        buf.write("\7\177\2\2\u01f6\u01f9\5\u00a6T\2\u01f7\u01f9\5\u00a8")
        buf.write("U\2\u01f8\u01f6\3\2\2\2\u01f8\u01f7\3\2\2\2\u01f9\u0203")
        buf.write("\3\2\2\2\u01fa\u01fc\7\177\2\2\u01fb\u01fa\3\2\2\2\u01fb")
        buf.write("\u01fc\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01fe\7>\2\2")
        buf.write("\u01fe\u0201\7\177\2\2\u01ff\u0202\7\7\2\2\u0200\u0202")
        buf.write("\5.\30\2\u0201\u01ff\3\2\2\2\u0201\u0200\3\2\2\2\u0202")
        buf.write("\u0204\3\2\2\2\u0203\u01fb\3\2\2\2\u0203\u0204\3\2\2\2")
        buf.write("\u0204-\3\2\2\2\u0205\u0210\5\60\31\2\u0206\u0208\7\177")
        buf.write("\2\2\u0207\u0206\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u0209")
        buf.write("\3\2\2\2\u0209\u020b\7\4\2\2\u020a\u020c\7\177\2\2\u020b")
        buf.write("\u020a\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u020d\3\2\2\2")
        buf.write("\u020d\u020f\5\60\31\2\u020e\u0207\3\2\2\2\u020f\u0212")
        buf.write("\3\2\2\2\u0210\u020e\3\2\2\2\u0210\u0211\3\2\2\2\u0211")
        buf.write("\u0217\3\2\2\2\u0212\u0210\3\2\2\2\u0213\u0215\7\177\2")
        buf.write("\2\u0214\u0213\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0216")
        buf.write("\3\2\2\2\u0216\u0218\5D#\2\u0217\u0214\3\2\2\2\u0217\u0218")
        buf.write("\3\2\2\2\u0218/\3\2\2\2\u0219\u021a\5\u00aaV\2\u021a\u021b")
        buf.write("\7\177\2\2\u021b\u021c\7\65\2\2\u021c\u021d\7\177\2\2")
        buf.write("\u021d\u021f\3\2\2\2\u021e\u0219\3\2\2\2\u021e\u021f\3")
        buf.write("\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221\5\u00b0Y\2\u0221")
        buf.write("\61\3\2\2\2\u0222\u0223\7?\2\2\u0223\u0228\5\66\34\2\u0224")
        buf.write("\u0226\7\177\2\2\u0225\u0224\3\2\2\2\u0225\u0226\3\2\2")
        buf.write("\2\u0226\u0227\3\2\2\2\u0227\u0229\5D#\2\u0228\u0225\3")
        buf.write("\2\2\2\u0228\u0229\3\2\2\2\u0229\63\3\2\2\2\u022a\u022b")
        buf.write("\7@\2\2\u022b\u022c\5\66\34\2\u022c\65\3\2\2\2\u022d\u022f")
        buf.write("\7\177\2\2\u022e\u022d\3\2\2\2\u022e\u022f\3\2\2\2\u022f")
        buf.write("\u0230\3\2\2\2\u0230\u0232\7A\2\2\u0231\u022e\3\2\2\2")
        buf.write("\u0231\u0232\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0234\7")
        buf.write("\177\2\2\u0234\u0237\58\35\2\u0235\u0236\7\177\2\2\u0236")
        buf.write("\u0238\5<\37\2\u0237\u0235\3\2\2\2\u0237\u0238\3\2\2\2")
        buf.write("\u0238\u023b\3\2\2\2\u0239\u023a\7\177\2\2\u023a\u023c")
        buf.write("\5> \2\u023b\u0239\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u023f")
        buf.write("\3\2\2\2\u023d\u023e\7\177\2\2\u023e\u0240\5@!\2\u023f")
        buf.write("\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240\67\3\2\2\2\u0241")
        buf.write("\u024c\7\7\2\2\u0242\u0244\7\177\2\2\u0243\u0242\3\2\2")
        buf.write("\2\u0243\u0244\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0247")
        buf.write("\7\4\2\2\u0246\u0248\7\177\2\2\u0247\u0246\3\2\2\2\u0247")
        buf.write("\u0248\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024b\5:\36\2")
        buf.write("\u024a\u0243\3\2\2\2\u024b\u024e\3\2\2\2\u024c\u024a\3")
        buf.write("\2\2\2\u024c\u024d\3\2\2\2\u024d\u025e\3\2\2\2\u024e\u024c")
        buf.write("\3\2\2\2\u024f\u025a\5:\36\2\u0250\u0252\7\177\2\2\u0251")
        buf.write("\u0250\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0253\3\2\2\2")
        buf.write("\u0253\u0255\7\4\2\2\u0254\u0256\7\177\2\2\u0255\u0254")
        buf.write("\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0257\3\2\2\2\u0257")
        buf.write("\u0259\5:\36\2\u0258\u0251\3\2\2\2\u0259\u025c\3\2\2\2")
        buf.write("\u025a\u0258\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025e\3")
        buf.write("\2\2\2\u025c\u025a\3\2\2\2\u025d\u0241\3\2\2\2\u025d\u024f")
        buf.write("\3\2\2\2\u025e9\3\2\2\2\u025f\u0260\5h\65\2\u0260\u0261")
        buf.write("\7\177\2\2\u0261\u0262\7\65\2\2\u0262\u0263\7\177\2\2")
        buf.write("\u0263\u0264\5\u00b0Y\2\u0264\u0267\3\2\2\2\u0265\u0267")
        buf.write("\5h\65\2\u0266\u025f\3\2\2\2\u0266\u0265\3\2\2\2\u0267")
        buf.write(";\3\2\2\2\u0268\u0269\7B\2\2\u0269\u026a\7\177\2\2\u026a")
        buf.write("\u026b\7C\2\2\u026b\u026c\7\177\2\2\u026c\u0274\5B\"\2")
        buf.write("\u026d\u026f\7\4\2\2\u026e\u0270\7\177\2\2\u026f\u026e")
        buf.write("\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271\3\2\2\2\u0271")
        buf.write("\u0273\5B\"\2\u0272\u026d\3\2\2\2\u0273\u0276\3\2\2\2")
        buf.write("\u0274\u0272\3\2\2\2\u0274\u0275\3\2\2\2\u0275=\3\2\2")
        buf.write("\2\u0276\u0274\3\2\2\2\u0277\u0278\7D\2\2\u0278\u0279")
        buf.write("\7\177\2\2\u0279\u027a\5h\65\2\u027a?\3\2\2\2\u027b\u027c")
        buf.write("\7E\2\2\u027c\u027d\7\177\2\2\u027d\u027e\5h\65\2\u027e")
        buf.write("A\3\2\2\2\u027f\u0284\5h\65\2\u0280\u0282\7\177\2\2\u0281")
        buf.write("\u0280\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0283\3\2\2\2")
        buf.write("\u0283\u0285\t\2\2\2\u0284\u0281\3\2\2\2\u0284\u0285\3")
        buf.write("\2\2\2\u0285C\3\2\2\2\u0286\u0287\7J\2\2\u0287\u0288\7")
        buf.write("\177\2\2\u0288\u0289\5h\65\2\u0289E\3\2\2\2\u028a\u0295")
        buf.write("\5H%\2\u028b\u028d\7\177\2\2\u028c\u028b\3\2\2\2\u028c")
        buf.write("\u028d\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u0290\7\4\2\2")
        buf.write("\u028f\u0291\7\177\2\2\u0290\u028f\3\2\2\2\u0290\u0291")
        buf.write("\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0294\5H%\2\u0293\u028c")
        buf.write("\3\2\2\2\u0294\u0297\3\2\2\2\u0295\u0293\3\2\2\2\u0295")
        buf.write("\u0296\3\2\2\2\u0296G\3\2\2\2\u0297\u0295\3\2\2\2\u0298")
        buf.write("\u029a\5\u00b0Y\2\u0299\u029b\7\177\2\2\u029a\u0299\3")
        buf.write("\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u029e")
        buf.write("\7\5\2\2\u029d\u029f\7\177\2\2\u029e\u029d\3\2\2\2\u029e")
        buf.write("\u029f\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a1\5J&\2\u02a1")
        buf.write("\u02a4\3\2\2\2\u02a2\u02a4\5J&\2\u02a3\u0298\3\2\2\2\u02a3")
        buf.write("\u02a2\3\2\2\2\u02a4I\3\2\2\2\u02a5\u02a6\5L\'\2\u02a6")
        buf.write("K\3\2\2\2\u02a7\u02ae\5P)\2\u02a8\u02aa\7\177\2\2\u02a9")
        buf.write("\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ab\3\2\2\2")
        buf.write("\u02ab\u02ad\5R*\2\u02ac\u02a9\3\2\2\2\u02ad\u02b0\3\2")
        buf.write("\2\2\u02ae\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b6")
        buf.write("\3\2\2\2\u02b0\u02ae\3\2\2\2\u02b1\u02b2\7\b\2\2\u02b2")
        buf.write("\u02b3\5L\'\2\u02b3\u02b4\7\t\2\2\u02b4\u02b6\3\2\2\2")
        buf.write("\u02b5\u02a7\3\2\2\2\u02b5\u02b1\3\2\2\2\u02b6M\3\2\2")
        buf.write("\2\u02b7\u02bc\5P)\2\u02b8\u02ba\7\177\2\2\u02b9\u02b8")
        buf.write("\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb")
        buf.write("\u02bd\5R*\2\u02bc\u02b9\3\2\2\2\u02bd\u02be\3\2\2\2\u02be")
        buf.write("\u02bc\3\2\2\2\u02be\u02bf\3\2\2\2\u02bfO\3\2\2\2\u02c0")
        buf.write("\u02c2\7\b\2\2\u02c1\u02c3\7\177\2\2\u02c2\u02c1\3\2\2")
        buf.write("\2\u02c2\u02c3\3\2\2\2\u02c3\u02c8\3\2\2\2\u02c4\u02c6")
        buf.write("\5\u00b0Y\2\u02c5\u02c7\7\177\2\2\u02c6\u02c5\3\2\2\2")
        buf.write("\u02c6\u02c7\3\2\2\2\u02c7\u02c9\3\2\2\2\u02c8\u02c4\3")
        buf.write("\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02ce\3\2\2\2\u02ca\u02cc")
        buf.write("\5\\/\2\u02cb\u02cd\7\177\2\2\u02cc\u02cb\3\2\2\2\u02cc")
        buf.write("\u02cd\3\2\2\2\u02cd\u02cf\3\2\2\2\u02ce\u02ca\3\2\2\2")
        buf.write("\u02ce\u02cf\3\2\2\2\u02cf\u02d4\3\2\2\2\u02d0\u02d2\5")
        buf.write("X-\2\u02d1\u02d3\7\177\2\2\u02d2\u02d1\3\2\2\2\u02d2\u02d3")
        buf.write("\3\2\2\2\u02d3\u02d5\3\2\2\2\u02d4\u02d0\3\2\2\2\u02d4")
        buf.write("\u02d5\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d7\7\t\2\2")
        buf.write("\u02d7Q\3\2\2\2\u02d8\u02da\5T+\2\u02d9\u02db\7\177\2")
        buf.write("\2\u02da\u02d9\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u02dc")
        buf.write("\3\2\2\2\u02dc\u02dd\5P)\2\u02ddS\3\2\2\2\u02de\u02e0")
        buf.write("\5\u00caf\2\u02df\u02e1\7\177\2\2\u02e0\u02df\3\2\2\2")
        buf.write("\u02e0\u02e1\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e4\5")
        buf.write("\u00ceh\2\u02e3\u02e5\7\177\2\2\u02e4\u02e3\3\2\2\2\u02e4")
        buf.write("\u02e5\3\2\2\2\u02e5\u02e7\3\2\2\2\u02e6\u02e8\5V,\2\u02e7")
        buf.write("\u02e6\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02ea\3\2\2\2")
        buf.write("\u02e9\u02eb\7\177\2\2\u02ea\u02e9\3\2\2\2\u02ea\u02eb")
        buf.write("\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ee\5\u00ceh\2\u02ed")
        buf.write("\u02ef\7\177\2\2\u02ee\u02ed\3\2\2\2\u02ee\u02ef\3\2\2")
        buf.write("\2\u02ef\u02f0\3\2\2\2\u02f0\u02f1\5\u00ccg\2\u02f1\u031f")
        buf.write("\3\2\2\2\u02f2\u02f4\5\u00caf\2\u02f3\u02f5\7\177\2\2")
        buf.write("\u02f4\u02f3\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f6\3")
        buf.write("\2\2\2\u02f6\u02f8\5\u00ceh\2\u02f7\u02f9\7\177\2\2\u02f8")
        buf.write("\u02f7\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fb\3\2\2\2")
        buf.write("\u02fa\u02fc\5V,\2\u02fb\u02fa\3\2\2\2\u02fb\u02fc\3\2")
        buf.write("\2\2\u02fc\u02fe\3\2\2\2\u02fd\u02ff\7\177\2\2\u02fe\u02fd")
        buf.write("\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0300\3\2\2\2\u0300")
        buf.write("\u0301\5\u00ceh\2\u0301\u031f\3\2\2\2\u0302\u0304\5\u00ce")
        buf.write("h\2\u0303\u0305\7\177\2\2\u0304\u0303\3\2\2\2\u0304\u0305")
        buf.write("\3\2\2\2\u0305\u0307\3\2\2\2\u0306\u0308\5V,\2\u0307\u0306")
        buf.write("\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u030a\3\2\2\2\u0309")
        buf.write("\u030b\7\177\2\2\u030a\u0309\3\2\2\2\u030a\u030b\3\2\2")
        buf.write("\2\u030b\u030c\3\2\2\2\u030c\u030e\5\u00ceh\2\u030d\u030f")
        buf.write("\7\177\2\2\u030e\u030d\3\2\2\2\u030e\u030f\3\2\2\2\u030f")
        buf.write("\u0310\3\2\2\2\u0310\u0311\5\u00ccg\2\u0311\u031f\3\2")
        buf.write("\2\2\u0312\u0314\5\u00ceh\2\u0313\u0315\7\177\2\2\u0314")
        buf.write("\u0313\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0317\3\2\2\2")
        buf.write("\u0316\u0318\5V,\2\u0317\u0316\3\2\2\2\u0317\u0318\3\2")
        buf.write("\2\2\u0318\u031a\3\2\2\2\u0319\u031b\7\177\2\2\u031a\u0319")
        buf.write("\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031c\3\2\2\2\u031c")
        buf.write("\u031d\5\u00ceh\2\u031d\u031f\3\2\2\2\u031e\u02de\3\2")
        buf.write("\2\2\u031e\u02f2\3\2\2\2\u031e\u0302\3\2\2\2\u031e\u0312")
        buf.write("\3\2\2\2\u031fU\3\2\2\2\u0320\u0322\7\n\2\2\u0321\u0323")
        buf.write("\7\177\2\2\u0322\u0321\3\2\2\2\u0322\u0323\3\2\2\2\u0323")
        buf.write("\u0328\3\2\2\2\u0324\u0326\5\u00b0Y\2\u0325\u0327\7\177")
        buf.write("\2\2\u0326\u0325\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u0329")
        buf.write("\3\2\2\2\u0328\u0324\3\2\2\2\u0328\u0329\3\2\2\2\u0329")
        buf.write("\u032e\3\2\2\2\u032a\u032c\5Z.\2\u032b\u032d\7\177\2\2")
        buf.write("\u032c\u032b\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032f\3")
        buf.write("\2\2\2\u032e\u032a\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0331")
        buf.write("\3\2\2\2\u0330\u0332\5`\61\2\u0331\u0330\3\2\2\2\u0331")
        buf.write("\u0332\3\2\2\2\u0332\u0337\3\2\2\2\u0333\u0335\5X-\2\u0334")
        buf.write("\u0336\7\177\2\2\u0335\u0334\3\2\2\2\u0335\u0336\3\2\2")
        buf.write("\2\u0336\u0338\3\2\2\2\u0337\u0333\3\2\2\2\u0337\u0338")
        buf.write("\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033a\7\13\2\2\u033a")
        buf.write("W\3\2\2\2\u033b\u033e\5\u00be`\2\u033c\u033e\5\u00c2b")
        buf.write("\2\u033d\u033b\3\2\2\2\u033d\u033c\3\2\2\2\u033eY\3\2")
        buf.write("\2\2\u033f\u0341\7\f\2\2\u0340\u0342\7\177\2\2\u0341\u0340")
        buf.write("\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0343\3\2\2\2\u0343")
        buf.write("\u0351\5d\63\2\u0344\u0346\7\177\2\2\u0345\u0344\3\2\2")
        buf.write("\2\u0345\u0346\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0349")
        buf.write("\7\r\2\2\u0348\u034a\7\f\2\2\u0349\u0348\3\2\2\2\u0349")
        buf.write("\u034a\3\2\2\2\u034a\u034c\3\2\2\2\u034b\u034d\7\177\2")
        buf.write("\2\u034c\u034b\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034e")
        buf.write("\3\2\2\2\u034e\u0350\5d\63\2\u034f\u0345\3\2\2\2\u0350")
        buf.write("\u0353\3\2\2\2\u0351\u034f\3\2\2\2\u0351\u0352\3\2\2\2")
        buf.write("\u0352[\3\2\2\2\u0353\u0351\3\2\2\2\u0354\u035b\5^\60")
        buf.write("\2\u0355\u0357\7\177\2\2\u0356\u0355\3\2\2\2\u0356\u0357")
        buf.write("\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u035a\5^\60\2\u0359")
        buf.write("\u0356\3\2\2\2\u035a\u035d\3\2\2\2\u035b\u0359\3\2\2\2")
        buf.write("\u035b\u035c\3\2\2\2\u035c]\3\2\2\2\u035d\u035b\3\2\2")
        buf.write("\2\u035e\u0360\7\f\2\2\u035f\u0361\7\177\2\2\u0360\u035f")
        buf.write("\3\2\2\2\u0360\u0361\3\2\2\2\u0361\u0362\3\2\2\2\u0362")
        buf.write("\u0363\5b\62\2\u0363_\3\2\2\2\u0364\u0366\7\7\2\2\u0365")
        buf.write("\u0367\7\177\2\2\u0366\u0365\3\2\2\2\u0366\u0367\3\2\2")
        buf.write("\2\u0367\u036c\3\2\2\2\u0368\u036a\5\u00b8]\2\u0369\u036b")
        buf.write("\7\177\2\2\u036a\u0369\3\2\2\2\u036a\u036b\3\2\2\2\u036b")
        buf.write("\u036d\3\2\2\2\u036c\u0368\3\2\2\2\u036c\u036d\3\2\2\2")
        buf.write("\u036d\u0378\3\2\2\2\u036e\u0370\7\16\2\2\u036f\u0371")
        buf.write("\7\177\2\2\u0370\u036f\3\2\2\2\u0370\u0371\3\2\2\2\u0371")
        buf.write("\u0376\3\2\2\2\u0372\u0374\5\u00b8]\2\u0373\u0375\7\177")
        buf.write("\2\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0377")
        buf.write("\3\2\2\2\u0376\u0372\3\2\2\2\u0376\u0377\3\2\2\2\u0377")
        buf.write("\u0379\3\2\2\2\u0378\u036e\3\2\2\2\u0378\u0379\3\2\2\2")
        buf.write("\u0379a\3\2\2\2\u037a\u037b\5\u00c4c\2\u037bc\3\2\2\2")
        buf.write("\u037c\u037d\5\u00c4c\2\u037de\3\2\2\2\u037e\u0383\5\u008c")
        buf.write("G\2\u037f\u0381\7\177\2\2\u0380\u037f\3\2\2\2\u0380\u0381")
        buf.write("\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0384\5\u008aF\2\u0383")
        buf.write("\u0380\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0383\3\2\2\2")
        buf.write("\u0385\u0386\3\2\2\2\u0386g\3\2\2\2\u0387\u0388\5j\66")
        buf.write("\2\u0388i\3\2\2\2\u0389\u0390\5l\67\2\u038a\u038b\7\177")
        buf.write("\2\2\u038b\u038c\7K\2\2\u038c\u038d\7\177\2\2\u038d\u038f")
        buf.write("\5l\67\2\u038e\u038a\3\2\2\2\u038f\u0392\3\2\2\2\u0390")
        buf.write("\u038e\3\2\2\2\u0390\u0391\3\2\2\2\u0391k\3\2\2\2\u0392")
        buf.write("\u0390\3\2\2\2\u0393\u039a\5n8\2\u0394\u0395\7\177\2\2")
        buf.write("\u0395\u0396\7L\2\2\u0396\u0397\7\177\2\2\u0397\u0399")
        buf.write("\5n8\2\u0398\u0394\3\2\2\2\u0399\u039c\3\2\2\2\u039a\u0398")
        buf.write("\3\2\2\2\u039a\u039b\3\2\2\2\u039bm\3\2\2\2\u039c\u039a")
        buf.write("\3\2\2\2\u039d\u03a4\5p9\2\u039e\u039f\7\177\2\2\u039f")
        buf.write("\u03a0\7M\2\2\u03a0\u03a1\7\177\2\2\u03a1\u03a3\5p9\2")
        buf.write("\u03a2\u039e\3\2\2\2\u03a3\u03a6\3\2\2\2\u03a4\u03a2\3")
        buf.write("\2\2\2\u03a4\u03a5\3\2\2\2\u03a5o\3\2\2\2\u03a6\u03a4")
        buf.write("\3\2\2\2\u03a7\u03a9\7N\2\2\u03a8\u03aa\7\177\2\2\u03a9")
        buf.write("\u03a8\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ac\3\2\2\2")
        buf.write("\u03ab\u03a7\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad\u03ab\3")
        buf.write("\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03b0\3\2\2\2\u03af\u03ad")
        buf.write("\3\2\2\2\u03b0\u03b1\5r:\2\u03b1q\3\2\2\2\u03b2\u03b9")
        buf.write("\5v<\2\u03b3\u03b5\7\177\2\2\u03b4\u03b3\3\2\2\2\u03b4")
        buf.write("\u03b5\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b8\5t;\2\u03b7")
        buf.write("\u03b4\3\2\2\2\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2")
        buf.write("\u03b9\u03ba\3\2\2\2\u03bas\3\2\2\2\u03bb\u03b9\3\2\2")
        buf.write("\2\u03bc\u03be\7\5\2\2\u03bd\u03bf\7\177\2\2\u03be\u03bd")
        buf.write("\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0")
        buf.write("\u03db\5v<\2\u03c1\u03c3\7\17\2\2\u03c2\u03c4\7\177\2")
        buf.write("\2\u03c3\u03c2\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c5")
        buf.write("\3\2\2\2\u03c5\u03db\5v<\2\u03c6\u03c8\7\20\2\2\u03c7")
        buf.write("\u03c9\7\177\2\2\u03c8\u03c7\3\2\2\2\u03c8\u03c9\3\2\2")
        buf.write("\2\u03c9\u03ca\3\2\2\2\u03ca\u03db\5v<\2\u03cb\u03cd\7")
        buf.write("\21\2\2\u03cc\u03ce\7\177\2\2\u03cd\u03cc\3\2\2\2\u03cd")
        buf.write("\u03ce\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03db\5v<\2\u03d0")
        buf.write("\u03d2\7\22\2\2\u03d1\u03d3\7\177\2\2\u03d2\u03d1\3\2")
        buf.write("\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03db")
        buf.write("\5v<\2\u03d5\u03d7\7\23\2\2\u03d6\u03d8\7\177\2\2\u03d7")
        buf.write("\u03d6\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03d9\3\2\2\2")
        buf.write("\u03d9\u03db\5v<\2\u03da\u03bc\3\2\2\2\u03da\u03c1\3\2")
        buf.write("\2\2\u03da\u03c6\3\2\2\2\u03da\u03cb\3\2\2\2\u03da\u03d0")
        buf.write("\3\2\2\2\u03da\u03d5\3\2\2\2\u03dbu\3\2\2\2\u03dc\u03e2")
        buf.write("\5~@\2\u03dd\u03e1\5x=\2\u03de\u03e1\5z>\2\u03df\u03e1")
        buf.write("\5|?\2\u03e0\u03dd\3\2\2\2\u03e0\u03de\3\2\2\2\u03e0\u03df")
        buf.write("\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2")
        buf.write("\u03e3\3\2\2\2\u03e3w\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e5")
        buf.write("\u03e6\7\177\2\2\u03e6\u03e7\7O\2\2\u03e7\u03e8\7\177")
        buf.write("\2\2\u03e8\u03f0\7?\2\2\u03e9\u03ea\7\177\2\2\u03ea\u03eb")
        buf.write("\7P\2\2\u03eb\u03ec\7\177\2\2\u03ec\u03f0\7?\2\2\u03ed")
        buf.write("\u03ee\7\177\2\2\u03ee\u03f0\7Q\2\2\u03ef\u03e5\3\2\2")
        buf.write("\2\u03ef\u03e9\3\2\2\2\u03ef\u03ed\3\2\2\2\u03f0\u03f2")
        buf.write("\3\2\2\2\u03f1\u03f3\7\177\2\2\u03f2\u03f1\3\2\2\2\u03f2")
        buf.write("\u03f3\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f5\5~@\2\u03f5")
        buf.write("y\3\2\2\2\u03f6\u03f7\7\177\2\2\u03f7\u03f9\7R\2\2\u03f8")
        buf.write("\u03fa\7\177\2\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3\2\2")
        buf.write("\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc\5~@\2\u03fc{\3\2\2")
        buf.write("\2\u03fd\u03fe\7\177\2\2\u03fe\u03ff\7S\2\2\u03ff\u0400")
        buf.write("\7\177\2\2\u0400\u0408\7T\2\2\u0401\u0402\7\177\2\2\u0402")
        buf.write("\u0403\7S\2\2\u0403\u0404\7\177\2\2\u0404\u0405\7N\2\2")
        buf.write("\u0405\u0406\7\177\2\2\u0406\u0408\7T\2\2\u0407\u03fd")
        buf.write("\3\2\2\2\u0407\u0401\3\2\2\2\u0408}\3\2\2\2\u0409\u041c")
        buf.write("\5\u0080A\2\u040a\u040c\7\177\2\2\u040b\u040a\3\2\2\2")
        buf.write("\u040b\u040c\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u040f\7")
        buf.write("\24\2\2\u040e\u0410\7\177\2\2\u040f\u040e\3\2\2\2\u040f")
        buf.write("\u0410\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u041b\5\u0080")
        buf.write("A\2\u0412\u0414\7\177\2\2\u0413\u0412\3\2\2\2\u0413\u0414")
        buf.write("\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0417\7\25\2\2\u0416")
        buf.write("\u0418\7\177\2\2\u0417\u0416\3\2\2\2\u0417\u0418\3\2\2")
        buf.write("\2\u0418\u0419\3\2\2\2\u0419\u041b\5\u0080A\2\u041a\u040b")
        buf.write("\3\2\2\2\u041a\u0413\3\2\2\2\u041b\u041e\3\2\2\2\u041c")
        buf.write("\u041a\3\2\2\2\u041c\u041d\3\2\2\2\u041d\177\3\2\2\2\u041e")
        buf.write("\u041c\3\2\2\2\u041f\u043a\5\u0082B\2\u0420\u0422\7\177")
        buf.write("\2\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0423")
        buf.write("\3\2\2\2\u0423\u0425\7\7\2\2\u0424\u0426\7\177\2\2\u0425")
        buf.write("\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0427\3\2\2\2")
        buf.write("\u0427\u0439\5\u0082B\2\u0428\u042a\7\177\2\2\u0429\u0428")
        buf.write("\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042b\3\2\2\2\u042b")
        buf.write("\u042d\7\26\2\2\u042c\u042e\7\177\2\2\u042d\u042c\3\2")
        buf.write("\2\2\u042d\u042e\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0439")
        buf.write("\5\u0082B\2\u0430\u0432\7\177\2\2\u0431\u0430\3\2\2\2")
        buf.write("\u0431\u0432\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0435\7")
        buf.write("\27\2\2\u0434\u0436\7\177\2\2\u0435\u0434\3\2\2\2\u0435")
        buf.write("\u0436\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0439\5\u0082")
        buf.write("B\2\u0438\u0421\3\2\2\2\u0438\u0429\3\2\2\2\u0438\u0431")
        buf.write("\3\2\2\2\u0439\u043c\3\2\2\2\u043a\u0438\3\2\2\2\u043a")
        buf.write("\u043b\3\2\2\2\u043b\u0081\3\2\2\2\u043c\u043a\3\2\2\2")
        buf.write("\u043d\u0448\5\u0084C\2\u043e\u0440\7\177\2\2\u043f\u043e")
        buf.write("\3\2\2\2\u043f\u0440\3\2\2\2\u0440\u0441\3\2\2\2\u0441")
        buf.write("\u0443\7\30\2\2\u0442\u0444\7\177\2\2\u0443\u0442\3\2")
        buf.write("\2\2\u0443\u0444\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0447")
        buf.write("\5\u0084C\2\u0446\u043f\3\2\2\2\u0447\u044a\3\2\2\2\u0448")
        buf.write("\u0446\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u0083\3\2\2\2")
        buf.write("\u044a\u0448\3\2\2\2\u044b\u0452\5\u0086D\2\u044c\u044e")
        buf.write("\t\3\2\2\u044d\u044f\7\177\2\2\u044e\u044d\3\2\2\2\u044e")
        buf.write("\u044f\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0452\5\u0086")
        buf.write("D\2\u0451\u044b\3\2\2\2\u0451\u044c\3\2\2\2\u0452\u0085")
        buf.write("\3\2\2\2\u0453\u045e\5\u008cG\2\u0454\u0456\7\177\2\2")
        buf.write("\u0455\u0454\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0457\3")
        buf.write("\2\2\2\u0457\u045d\5\u0088E\2\u0458\u045a\7\177\2\2\u0459")
        buf.write("\u0458\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045b\3\2\2\2")
        buf.write("\u045b\u045d\5\u008aF\2\u045c\u0455\3\2\2\2\u045c\u0459")
        buf.write("\3\2\2\2\u045d\u0460\3\2\2\2\u045e\u045c\3\2\2\2\u045e")
        buf.write("\u045f\3\2\2\2\u045f\u0465\3\2\2\2\u0460\u045e\3\2\2\2")
        buf.write("\u0461\u0463\7\177\2\2\u0462\u0461\3\2\2\2\u0462\u0463")
        buf.write("\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0466\5\\/\2\u0465")
        buf.write("\u0462\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0087\3\2\2\2")
        buf.write("\u0467\u0468\7\n\2\2\u0468\u0469\5h\65\2\u0469\u046a\7")
        buf.write("\13\2\2\u046a\u0475\3\2\2\2\u046b\u046d\7\n\2\2\u046c")
        buf.write("\u046e\5h\65\2\u046d\u046c\3\2\2\2\u046d\u046e\3\2\2\2")
        buf.write("\u046e\u046f\3\2\2\2\u046f\u0471\7\16\2\2\u0470\u0472")
        buf.write("\5h\65\2\u0471\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472")
        buf.write("\u0473\3\2\2\2\u0473\u0475\7\13\2\2\u0474\u0467\3\2\2")
        buf.write("\2\u0474\u046b\3\2\2\2\u0475\u0089\3\2\2\2\u0476\u0478")
        buf.write("\7\31\2\2\u0477\u0479\7\177\2\2\u0478\u0477\3\2\2\2\u0478")
        buf.write("\u0479\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047b\5\u00c0")
        buf.write("a\2\u047b\u008b\3\2\2\2\u047c\u0495\5\u00b2Z\2\u047d\u0495")
        buf.write("\5\u00c2b\2\u047e\u0495\5\u008eH\2\u047f\u0481\7U\2\2")
        buf.write("\u0480\u0482\7\177\2\2\u0481\u0480\3\2\2\2\u0481\u0482")
        buf.write("\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0485\7\b\2\2\u0484")
        buf.write("\u0486\7\177\2\2\u0485\u0484\3\2\2\2\u0485\u0486\3\2\2")
        buf.write("\2\u0486\u0487\3\2\2\2\u0487\u0489\7\7\2\2\u0488\u048a")
        buf.write("\7\177\2\2\u0489\u0488\3\2\2\2\u0489\u048a\3\2\2\2\u048a")
        buf.write("\u048b\3\2\2\2\u048b\u0495\7\t\2\2\u048c\u0495\5\u0092")
        buf.write("J\2\u048d\u0495\5\u0094K\2\u048e\u0495\5\u0096L\2\u048f")
        buf.write("\u0495\5\u009aN\2\u0490\u0495\5\u009cO\2\u0491\u0495\5")
        buf.write("\u00a0Q\2\u0492\u0495\5\u00a4S\2\u0493\u0495\5\u00b0Y")
        buf.write("\2\u0494\u047c\3\2\2\2\u0494\u047d\3\2\2\2\u0494\u047e")
        buf.write("\3\2\2\2\u0494\u047f\3\2\2\2\u0494\u048c\3\2\2\2\u0494")
        buf.write("\u048d\3\2\2\2\u0494\u048e\3\2\2\2\u0494\u048f\3\2\2\2")
        buf.write("\u0494\u0490\3\2\2\2\u0494\u0491\3\2\2\2\u0494\u0492\3")
        buf.write("\2\2\2\u0494\u0493\3\2\2\2\u0495\u008d\3\2\2\2\u0496\u049b")
        buf.write("\7V\2\2\u0497\u0499\7\177\2\2\u0498\u0497\3\2\2\2\u0498")
        buf.write("\u0499\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049c\5\u0090")
        buf.write("I\2\u049b\u0498\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049b")
        buf.write("\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04ad\3\2\2\2\u049f")
        buf.write("\u04a1\7V\2\2\u04a0\u04a2\7\177\2\2\u04a1\u04a0\3\2\2")
        buf.write("\2\u04a1\u04a2\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a8")
        buf.write("\5h\65\2\u04a4\u04a6\7\177\2\2\u04a5\u04a4\3\2\2\2\u04a5")
        buf.write("\u04a6\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a9\5\u0090")
        buf.write("I\2\u04a8\u04a5\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04a8")
        buf.write("\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04ad\3\2\2\2\u04ac")
        buf.write("\u0496\3\2\2\2\u04ac\u049f\3\2\2\2\u04ad\u04b6\3\2\2\2")
        buf.write("\u04ae\u04b0\7\177\2\2\u04af\u04ae\3\2\2\2\u04af\u04b0")
        buf.write("\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b3\7W\2\2\u04b2")
        buf.write("\u04b4\7\177\2\2\u04b3\u04b2\3\2\2\2\u04b3\u04b4\3\2\2")
        buf.write("\2\u04b4\u04b5\3\2\2\2\u04b5\u04b7\5h\65\2\u04b6\u04af")
        buf.write("\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b9\3\2\2\2\u04b8")
        buf.write("\u04ba\7\177\2\2\u04b9\u04b8\3\2\2\2\u04b9\u04ba\3\2\2")
        buf.write("\2\u04ba\u04bb\3\2\2\2\u04bb\u04bc\7X\2\2\u04bc\u008f")
        buf.write("\3\2\2\2\u04bd\u04bf\7Y\2\2\u04be\u04c0\7\177\2\2\u04bf")
        buf.write("\u04be\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0\u04c1\3\2\2\2")
        buf.write("\u04c1\u04c3\5h\65\2\u04c2\u04c4\7\177\2\2\u04c3\u04c2")
        buf.write("\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5")
        buf.write("\u04c7\7Z\2\2\u04c6\u04c8\7\177\2\2\u04c7\u04c6\3\2\2")
        buf.write("\2\u04c7\u04c8\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04ca")
        buf.write("\5h\65\2\u04ca\u0091\3\2\2\2\u04cb\u04cd\7\n\2\2\u04cc")
        buf.write("\u04ce\7\177\2\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2")
        buf.write("\2\u04ce\u04cf\3\2\2\2\u04cf\u04d8\5\u0098M\2\u04d0\u04d2")
        buf.write("\7\177\2\2\u04d1\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2")
        buf.write("\u04d3\3\2\2\2\u04d3\u04d5\7\r\2\2\u04d4\u04d6\7\177\2")
        buf.write("\2\u04d5\u04d4\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04d7")
        buf.write("\3\2\2\2\u04d7\u04d9\5h\65\2\u04d8\u04d1\3\2\2\2\u04d8")
        buf.write("\u04d9\3\2\2\2\u04d9\u04db\3\2\2\2\u04da\u04dc\7\177\2")
        buf.write("\2\u04db\u04da\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04dd")
        buf.write("\3\2\2\2\u04dd\u04de\7\13\2\2\u04de\u0093\3\2\2\2\u04df")
        buf.write("\u04e1\7\n\2\2\u04e0\u04e2\7\177\2\2\u04e1\u04e0\3\2\2")
        buf.write("\2\u04e1\u04e2\3\2\2\2\u04e2\u04eb\3\2\2\2\u04e3\u04e5")
        buf.write("\5\u00b0Y\2\u04e4\u04e6\7\177\2\2\u04e5\u04e4\3\2\2\2")
        buf.write("\u04e5\u04e6\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e9\7")
        buf.write("\5\2\2\u04e8\u04ea\7\177\2\2\u04e9\u04e8\3\2\2\2\u04e9")
        buf.write("\u04ea\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb\u04e3\3\2\2\2")
        buf.write("\u04eb\u04ec\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ef\5")
        buf.write("N(\2\u04ee\u04f0\7\177\2\2\u04ef\u04ee\3\2\2\2\u04ef\u04f0")
        buf.write("\3\2\2\2\u04f0\u04f5\3\2\2\2\u04f1\u04f3\5D#\2\u04f2\u04f4")
        buf.write("\7\177\2\2\u04f3\u04f2\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4")
        buf.write("\u04f6\3\2\2\2\u04f5\u04f1\3\2\2\2\u04f5\u04f6\3\2\2\2")
        buf.write("\u04f6\u04f7\3\2\2\2\u04f7\u04f9\7\r\2\2\u04f8\u04fa\7")
        buf.write("\177\2\2\u04f9\u04f8\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa")
        buf.write("\u04fb\3\2\2\2\u04fb\u04fd\5h\65\2\u04fc\u04fe\7\177\2")
        buf.write("\2\u04fd\u04fc\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u04ff")
        buf.write("\3\2\2\2\u04ff\u0500\7\13\2\2\u0500\u0095\3\2\2\2\u0501")
        buf.write("\u0503\7\61\2\2\u0502\u0504\7\177\2\2\u0503\u0502\3\2")
        buf.write("\2\2\u0503\u0504\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0507")
        buf.write("\7\b\2\2\u0506\u0508\7\177\2\2\u0507\u0506\3\2\2\2\u0507")
        buf.write("\u0508\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050b\5\u0098")
        buf.write("M\2\u050a\u050c\7\177\2\2\u050b\u050a\3\2\2\2\u050b\u050c")
        buf.write("\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u050e\7\t\2\2\u050e")
        buf.write("\u053a\3\2\2\2\u050f\u0511\7[\2\2\u0510\u0512\7\177\2")
        buf.write("\2\u0511\u0510\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0513")
        buf.write("\3\2\2\2\u0513\u0515\7\b\2\2\u0514\u0516\7\177\2\2\u0515")
        buf.write("\u0514\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u0517\3\2\2\2")
        buf.write("\u0517\u0519\5\u0098M\2\u0518\u051a\7\177\2\2\u0519\u0518")
        buf.write("\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051b\3\2\2\2\u051b")
        buf.write("\u051c\7\t\2\2\u051c\u053a\3\2\2\2\u051d\u051f\7\\\2\2")
        buf.write("\u051e\u0520\7\177\2\2\u051f\u051e\3\2\2\2\u051f\u0520")
        buf.write("\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0523\7\b\2\2\u0522")
        buf.write("\u0524\7\177\2\2\u0523\u0522\3\2\2\2\u0523\u0524\3\2\2")
        buf.write("\2\u0524\u0525\3\2\2\2\u0525\u0527\5\u0098M\2\u0526\u0528")
        buf.write("\7\177\2\2\u0527\u0526\3\2\2\2\u0527\u0528\3\2\2\2\u0528")
        buf.write("\u0529\3\2\2\2\u0529\u052a\7\t\2\2\u052a\u053a\3\2\2\2")
        buf.write("\u052b\u052d\7]\2\2\u052c\u052e\7\177\2\2\u052d\u052c")
        buf.write("\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u052f\3\2\2\2\u052f")
        buf.write("\u0531\7\b\2\2\u0530\u0532\7\177\2\2\u0531\u0530\3\2\2")
        buf.write("\2\u0531\u0532\3\2\2\2\u0532\u0533\3\2\2\2\u0533\u0535")
        buf.write("\5\u0098M\2\u0534\u0536\7\177\2\2\u0535\u0534\3\2\2\2")
        buf.write("\u0535\u0536\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0538\7")
        buf.write("\t\2\2\u0538\u053a\3\2\2\2\u0539\u0501\3\2\2\2\u0539\u050f")
        buf.write("\3\2\2\2\u0539\u051d\3\2\2\2\u0539\u052b\3\2\2\2\u053a")
        buf.write("\u0097\3\2\2\2\u053b\u0540\5\u009eP\2\u053c\u053e\7\177")
        buf.write("\2\2\u053d\u053c\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u053f")
        buf.write("\3\2\2\2\u053f\u0541\5D#\2\u0540\u053d\3\2\2\2\u0540\u0541")
        buf.write("\3\2\2\2\u0541\u0099\3\2\2\2\u0542\u0543\5N(\2\u0543\u009b")
        buf.write("\3\2\2\2\u0544\u0546\7\b\2\2\u0545\u0547\7\177\2\2\u0546")
        buf.write("\u0545\3\2\2\2\u0546\u0547\3\2\2\2\u0547\u0548\3\2\2\2")
        buf.write("\u0548\u054a\5h\65\2\u0549\u054b\7\177\2\2\u054a\u0549")
        buf.write("\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054c\3\2\2\2\u054c")
        buf.write("\u054d\7\t\2\2\u054d\u009d\3\2\2\2\u054e\u054f\5\u00b0")
        buf.write("Y\2\u054f\u0550\7\177\2\2\u0550\u0551\7R\2\2\u0551\u0552")
        buf.write("\7\177\2\2\u0552\u0553\5h\65\2\u0553\u009f\3\2\2\2\u0554")
        buf.write("\u0556\5\u00a2R\2\u0555\u0557\7\177\2\2\u0556\u0555\3")
        buf.write("\2\2\2\u0556\u0557\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u055a")
        buf.write("\7\b\2\2\u0559\u055b\7\177\2\2\u055a\u0559\3\2\2\2\u055a")
        buf.write("\u055b\3\2\2\2\u055b\u0560\3\2\2\2\u055c\u055e\7A\2\2")
        buf.write("\u055d\u055f\7\177\2\2\u055e\u055d\3\2\2\2\u055e\u055f")
        buf.write("\3\2\2\2\u055f\u0561\3\2\2\2\u0560\u055c\3\2\2\2\u0560")
        buf.write("\u0561\3\2\2\2\u0561\u0573\3\2\2\2\u0562\u0564\5h\65\2")
        buf.write("\u0563\u0565\7\177\2\2\u0564\u0563\3\2\2\2\u0564\u0565")
        buf.write("\3\2\2\2\u0565\u0570\3\2\2\2\u0566\u0568\7\4\2\2\u0567")
        buf.write("\u0569\7\177\2\2\u0568\u0567\3\2\2\2\u0568\u0569\3\2\2")
        buf.write("\2\u0569\u056a\3\2\2\2\u056a\u056c\5h\65\2\u056b\u056d")
        buf.write("\7\177\2\2\u056c\u056b\3\2\2\2\u056c\u056d\3\2\2\2\u056d")
        buf.write("\u056f\3\2\2\2\u056e\u0566\3\2\2\2\u056f\u0572\3\2\2\2")
        buf.write("\u0570\u056e\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0574\3")
        buf.write("\2\2\2\u0572\u0570\3\2\2\2\u0573\u0562\3\2\2\2\u0573\u0574")
        buf.write("\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0576\7\t\2\2\u0576")
        buf.write("\u00a1\3\2\2\2\u0577\u0578\5\u00aeX\2\u0578\u0579\5\u00c8")
        buf.write("e\2\u0579\u00a3\3\2\2\2\u057a\u057c\7^\2\2\u057b\u057d")
        buf.write("\7\177\2\2\u057c\u057b\3\2\2\2\u057c\u057d\3\2\2\2\u057d")
        buf.write("\u057e\3\2\2\2\u057e\u0580\7\32\2\2\u057f\u0581\7\177")
        buf.write("\2\2\u0580\u057f\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u058a")
        buf.write("\3\2\2\2\u0582\u058b\5\b\5\2\u0583\u0588\5F$\2\u0584\u0586")
        buf.write("\7\177\2\2\u0585\u0584\3\2\2\2\u0585\u0586\3\2\2\2\u0586")
        buf.write("\u0587\3\2\2\2\u0587\u0589\5D#\2\u0588\u0585\3\2\2\2\u0588")
        buf.write("\u0589\3\2\2\2\u0589\u058b\3\2\2\2\u058a\u0582\3\2\2\2")
        buf.write("\u058a\u0583\3\2\2\2\u058b\u058d\3\2\2\2\u058c\u058e\7")
        buf.write("\177\2\2\u058d\u058c\3\2\2\2\u058d\u058e\3\2\2\2\u058e")
        buf.write("\u058f\3\2\2\2\u058f\u0590\7\33\2\2\u0590\u00a5\3\2\2")
        buf.write("\2\u0591\u0593\5\u00acW\2\u0592\u0594\7\177\2\2\u0593")
        buf.write("\u0592\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u0595\3\2\2\2")
        buf.write("\u0595\u0597\7\b\2\2\u0596\u0598\7\177\2\2\u0597\u0596")
        buf.write("\3\2\2\2\u0597\u0598\3\2\2\2\u0598\u05aa\3\2\2\2\u0599")
        buf.write("\u059b\5h\65\2\u059a\u059c\7\177\2\2\u059b\u059a\3\2\2")
        buf.write("\2\u059b\u059c\3\2\2\2\u059c\u05a7\3\2\2\2\u059d\u059f")
        buf.write("\7\4\2\2\u059e\u05a0\7\177\2\2\u059f\u059e\3\2\2\2\u059f")
        buf.write("\u05a0\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a3\5h\65\2")
        buf.write("\u05a2\u05a4\7\177\2\2\u05a3\u05a2\3\2\2\2\u05a3\u05a4")
        buf.write("\3\2\2\2\u05a4\u05a6\3\2\2\2\u05a5\u059d\3\2\2\2\u05a6")
        buf.write("\u05a9\3\2\2\2\u05a7\u05a5\3\2\2\2\u05a7\u05a8\3\2\2\2")
        buf.write("\u05a8\u05ab\3\2\2\2\u05a9\u05a7\3\2\2\2\u05aa\u0599\3")
        buf.write("\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ad")
        buf.write("\7\t\2\2\u05ad\u00a7\3\2\2\2\u05ae\u05af\5\u00acW\2\u05af")
        buf.write("\u00a9\3\2\2\2\u05b0\u05b1\5\u00c8e\2\u05b1\u00ab\3\2")
        buf.write("\2\2\u05b2\u05b3\5\u00aeX\2\u05b3\u05b4\5\u00c8e\2\u05b4")
        buf.write("\u00ad\3\2\2\2\u05b5\u05b6\5\u00c8e\2\u05b6\u05b7\7\31")
        buf.write("\2\2\u05b7\u05b9\3\2\2\2\u05b8\u05b5\3\2\2\2\u05b9\u05bc")
        buf.write("\3\2\2\2\u05ba\u05b8\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb")
        buf.write("\u00af\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bd\u05be\5\u00c8")
        buf.write("e\2\u05be\u00b1\3\2\2\2\u05bf\u05c6\5\u00b4[\2\u05c0\u05c6")
        buf.write("\7T\2\2\u05c1\u05c6\5\u00b6\\\2\u05c2\u05c6\7m\2\2\u05c3")
        buf.write("\u05c6\5\u00bc_\2\u05c4\u05c6\5\u00be`\2\u05c5\u05bf\3")
        buf.write("\2\2\2\u05c5\u05c0\3\2\2\2\u05c5\u05c1\3\2\2\2\u05c5\u05c2")
        buf.write("\3\2\2\2\u05c5\u05c3\3\2\2\2\u05c5\u05c4\3\2\2\2\u05c6")
        buf.write("\u00b3\3\2\2\2\u05c7\u05c8\t\4\2\2\u05c8\u00b5\3\2\2\2")
        buf.write("\u05c9\u05cc\5\u00ba^\2\u05ca\u05cc\5\u00b8]\2\u05cb\u05c9")
        buf.write("\3\2\2\2\u05cb\u05ca\3\2\2\2\u05cc\u00b7\3\2\2\2\u05cd")
        buf.write("\u05ce\t\5\2\2\u05ce\u00b9\3\2\2\2\u05cf\u05d0\t\6\2\2")
        buf.write("\u05d0\u00bb\3\2\2\2\u05d1\u05d3\7\n\2\2\u05d2\u05d4\7")
        buf.write("\177\2\2\u05d3\u05d2\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4")
        buf.write("\u05e6\3\2\2\2\u05d5\u05d7\5h\65\2\u05d6\u05d8\7\177\2")
        buf.write("\2\u05d7\u05d6\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05e3")
        buf.write("\3\2\2\2\u05d9\u05db\7\4\2\2\u05da\u05dc\7\177\2\2\u05db")
        buf.write("\u05da\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05dd\3\2\2\2")
        buf.write("\u05dd\u05df\5h\65\2\u05de\u05e0\7\177\2\2\u05df\u05de")
        buf.write("\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e2\3\2\2\2\u05e1")
        buf.write("\u05d9\3\2\2\2\u05e2\u05e5\3\2\2\2\u05e3\u05e1\3\2\2\2")
        buf.write("\u05e3\u05e4\3\2\2\2\u05e4\u05e7\3\2\2\2\u05e5\u05e3\3")
        buf.write("\2\2\2\u05e6\u05d5\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05e8")
        buf.write("\3\2\2\2\u05e8\u05e9\7\13\2\2\u05e9\u00bd\3\2\2\2\u05ea")
        buf.write("\u05ec\7\32\2\2\u05eb\u05ed\7\177\2\2\u05ec\u05eb\3\2")
        buf.write("\2\2\u05ec\u05ed\3\2\2\2\u05ed\u060f\3\2\2\2\u05ee\u05f0")
        buf.write("\5\u00c0a\2\u05ef\u05f1\7\177\2\2\u05f0\u05ef\3\2\2\2")
        buf.write("\u05f0\u05f1\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2\u05f4\7")
        buf.write("\f\2\2\u05f3\u05f5\7\177\2\2\u05f4\u05f3\3\2\2\2\u05f4")
        buf.write("\u05f5\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f8\5h\65\2")
        buf.write("\u05f7\u05f9\7\177\2\2\u05f8\u05f7\3\2\2\2\u05f8\u05f9")
        buf.write("\3\2\2\2\u05f9\u060c\3\2\2\2\u05fa\u05fc\7\4\2\2\u05fb")
        buf.write("\u05fd\7\177\2\2\u05fc\u05fb\3\2\2\2\u05fc\u05fd\3\2\2")
        buf.write("\2\u05fd\u05fe\3\2\2\2\u05fe\u0600\5\u00c0a\2\u05ff\u0601")
        buf.write("\7\177\2\2\u0600\u05ff\3\2\2\2\u0600\u0601\3\2\2\2\u0601")
        buf.write("\u0602\3\2\2\2\u0602\u0604\7\f\2\2\u0603\u0605\7\177\2")
        buf.write("\2\u0604\u0603\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u0606")
        buf.write("\3\2\2\2\u0606\u0608\5h\65\2\u0607\u0609\7\177\2\2\u0608")
        buf.write("\u0607\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u060b\3\2\2\2")
        buf.write("\u060a\u05fa\3\2\2\2\u060b\u060e\3\2\2\2\u060c\u060a\3")
        buf.write("\2\2\2\u060c\u060d\3\2\2\2\u060d\u0610\3\2\2\2\u060e\u060c")
        buf.write("\3\2\2\2\u060f\u05ee\3\2\2\2\u060f\u0610\3\2\2\2\u0610")
        buf.write("\u0611\3\2\2\2\u0611\u0612\7\33\2\2\u0612\u00bf\3\2\2")
        buf.write("\2\u0613\u0614\5\u00c4c\2\u0614\u00c1\3\2\2\2\u0615\u0618")
        buf.write("\7\34\2\2\u0616\u0619\5\u00c8e\2\u0617\u0619\7b\2\2\u0618")
        buf.write("\u0616\3\2\2\2\u0618\u0617\3\2\2\2\u0619\u00c3\3\2\2\2")
        buf.write("\u061a\u061d\5\u00c8e\2\u061b\u061d\5\u00c6d\2\u061c\u061a")
        buf.write("\3\2\2\2\u061c\u061b\3\2\2\2\u061d\u00c5\3\2\2\2\u061e")
        buf.write("\u061f\t\7\2\2\u061f\u00c7\3\2\2\2\u0620\u0621\t\b\2\2")
        buf.write("\u0621\u00c9\3\2\2\2\u0622\u0623\t\t\2\2\u0623\u00cb\3")
        buf.write("\2\2\2\u0624\u0625\t\n\2\2\u0625\u00cd\3\2\2\2\u0626\u0627")
        buf.write("\t\13\2\2\u0627\u00cf\3\2\2\2\u0125\u00d1\u00d5\u00d8")
        buf.write("\u00db\u00e3\u00e7\u00ec\u00f3\u00f8\u00fb\u00ff\u0103")
        buf.write("\u0107\u010d\u0111\u0116\u011b\u011f\u0122\u0124\u0128")
        buf.write("\u012c\u0131\u0135\u013a\u013e\u0147\u014c\u0150\u0154")
        buf.write("\u0158\u015b\u015f\u0169\u0170\u017d\u0181\u0187\u018b")
        buf.write("\u018f\u0194\u0199\u019d\u01a3\u01a7\u01ad\u01b1\u01b7")
        buf.write("\u01bb\u01bf\u01c3\u01c7\u01cb\u01d0\u01d7\u01db\u01e0")
        buf.write("\u01e7\u01ed\u01f2\u01f8\u01fb\u0201\u0203\u0207\u020b")
        buf.write("\u0210\u0214\u0217\u021e\u0225\u0228\u022e\u0231\u0237")
        buf.write("\u023b\u023f\u0243\u0247\u024c\u0251\u0255\u025a\u025d")
        buf.write("\u0266\u026f\u0274\u0281\u0284\u028c\u0290\u0295\u029a")
        buf.write("\u029e\u02a3\u02a9\u02ae\u02b5\u02b9\u02be\u02c2\u02c6")
        buf.write("\u02c8\u02cc\u02ce\u02d2\u02d4\u02da\u02e0\u02e4\u02e7")
        buf.write("\u02ea\u02ee\u02f4\u02f8\u02fb\u02fe\u0304\u0307\u030a")
        buf.write("\u030e\u0314\u0317\u031a\u031e\u0322\u0326\u0328\u032c")
        buf.write("\u032e\u0331\u0335\u0337\u033d\u0341\u0345\u0349\u034c")
        buf.write("\u0351\u0356\u035b\u0360\u0366\u036a\u036c\u0370\u0374")
        buf.write("\u0376\u0378\u0380\u0385\u0390\u039a\u03a4\u03a9\u03ad")
        buf.write("\u03b4\u03b9\u03be\u03c3\u03c8\u03cd\u03d2\u03d7\u03da")
        buf.write("\u03e0\u03e2\u03ef\u03f2\u03f9\u0407\u040b\u040f\u0413")
        buf.write("\u0417\u041a\u041c\u0421\u0425\u0429\u042d\u0431\u0435")
        buf.write("\u0438\u043a\u043f\u0443\u0448\u044e\u0451\u0455\u0459")
        buf.write("\u045c\u045e\u0462\u0465\u046d\u0471\u0474\u0478\u0481")
        buf.write("\u0485\u0489\u0494\u0498\u049d\u04a1\u04a5\u04aa\u04ac")
        buf.write("\u04af\u04b3\u04b6\u04b9\u04bf\u04c3\u04c7\u04cd\u04d1")
        buf.write("\u04d5\u04d8\u04db\u04e1\u04e5\u04e9\u04eb\u04ef\u04f3")
        buf.write("\u04f5\u04f9\u04fd\u0503\u0507\u050b\u0511\u0515\u0519")
        buf.write("\u051f\u0523\u0527\u052d\u0531\u0535\u0539\u053d\u0540")
        buf.write("\u0546\u054a\u0556\u055a\u055e\u0560\u0564\u0568\u056c")
        buf.write("\u0570\u0573\u057c\u0580\u0585\u0588\u058a\u058d\u0593")
        buf.write("\u0597\u059b\u059f\u05a3\u05a7\u05aa\u05ba\u05c5\u05cb")
        buf.write("\u05d3\u05d7\u05db\u05df\u05e3\u05e6\u05ec\u05f0\u05f4")
        buf.write("\u05f8\u05fc\u0600\u0604\u0608\u060c\u060f\u0618\u061c")
        return buf.getvalue()


class CypherParser ( Parser ):

    grammarFileName = "Cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'='", "'+='", "'*'", "'('", 
                     "')'", "'['", "']'", "':'", "'|'", "'..'", "'<>'", 
                     "'<'", "'>'", "'<='", "'>='", "'+'", "'-'", "'/'", 
                     "'%'", "'^'", "'.'", "'{'", "'}'", "'$'", "'\u27E8'", 
                     "'\u3008'", "'\uFE64'", "'\uFF1C'", "'\u27E9'", "'\u3009'", 
                     "'\uFE65'", "'\uFF1E'", "'\u00AD'", "'\u2010'", "'\u2011'", 
                     "'\u2012'", "'\u2013'", "'\u2014'", "'\u2015'", "'\u2212'", 
                     "'\uFE58'", "'\uFE63'", "'\uFF0D'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                      "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", "ELSE", 
                      "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", "EXISTS", 
                      "TRUE", "FALSE", "HexInteger", "DecimalInteger", "OctalInteger", 
                      "HexLetter", "HexDigit", "Digit", "NonZeroDigit", 
                      "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", 
                      "RegularDecimalReal", "StringLiteral", "EscapedChar", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Cypher = 0
    RULE_oC_Statement = 1
    RULE_oC_Query = 2
    RULE_oC_RegularQuery = 3
    RULE_oC_Union = 4
    RULE_oC_SingleQuery = 5
    RULE_oC_SinglePartQuery = 6
    RULE_oC_MultiPartQuery = 7
    RULE_oC_UpdatingClause = 8
    RULE_oC_ReadingClause = 9
    RULE_oC_Match = 10
    RULE_oC_Unwind = 11
    RULE_oC_Merge = 12
    RULE_oC_MergeAction = 13
    RULE_oC_Create = 14
    RULE_oC_Set = 15
    RULE_oC_SetItem = 16
    RULE_oC_Delete = 17
    RULE_oC_Remove = 18
    RULE_oC_RemoveItem = 19
    RULE_oC_InQueryCall = 20
    RULE_oC_StandaloneCall = 21
    RULE_oC_YieldItems = 22
    RULE_oC_YieldItem = 23
    RULE_oC_With = 24
    RULE_oC_Return = 25
    RULE_oC_ProjectionBody = 26
    RULE_oC_ProjectionItems = 27
    RULE_oC_ProjectionItem = 28
    RULE_oC_Order = 29
    RULE_oC_Skip = 30
    RULE_oC_Limit = 31
    RULE_oC_SortItem = 32
    RULE_oC_Where = 33
    RULE_oC_Pattern = 34
    RULE_oC_PatternPart = 35
    RULE_oC_AnonymousPatternPart = 36
    RULE_oC_PatternElement = 37
    RULE_oC_RelationshipsPattern = 38
    RULE_oC_NodePattern = 39
    RULE_oC_PatternElementChain = 40
    RULE_oC_RelationshipPattern = 41
    RULE_oC_RelationshipDetail = 42
    RULE_oC_Properties = 43
    RULE_oC_RelationshipTypes = 44
    RULE_oC_NodeLabels = 45
    RULE_oC_NodeLabel = 46
    RULE_oC_RangeLiteral = 47
    RULE_oC_LabelName = 48
    RULE_oC_RelTypeName = 49
    RULE_oC_PropertyExpression = 50
    RULE_oC_Expression = 51
    RULE_oC_OrExpression = 52
    RULE_oC_XorExpression = 53
    RULE_oC_AndExpression = 54
    RULE_oC_NotExpression = 55
    RULE_oC_ComparisonExpression = 56
    RULE_oC_PartialComparisonExpression = 57
    RULE_oC_StringListNullPredicateExpression = 58
    RULE_oC_StringPredicateExpression = 59
    RULE_oC_ListPredicateExpression = 60
    RULE_oC_NullPredicateExpression = 61
    RULE_oC_AddOrSubtractExpression = 62
    RULE_oC_MultiplyDivideModuloExpression = 63
    RULE_oC_PowerOfExpression = 64
    RULE_oC_UnaryAddOrSubtractExpression = 65
    RULE_oC_NonArithmeticOperatorExpression = 66
    RULE_oC_ListOperatorExpression = 67
    RULE_oC_PropertyLookup = 68
    RULE_oC_Atom = 69
    RULE_oC_CaseExpression = 70
    RULE_oC_CaseAlternative = 71
    RULE_oC_ListComprehension = 72
    RULE_oC_PatternComprehension = 73
    RULE_oC_Quantifier = 74
    RULE_oC_FilterExpression = 75
    RULE_oC_PatternPredicate = 76
    RULE_oC_ParenthesizedExpression = 77
    RULE_oC_IdInColl = 78
    RULE_oC_FunctionInvocation = 79
    RULE_oC_FunctionName = 80
    RULE_oC_ExistentialSubquery = 81
    RULE_oC_ExplicitProcedureInvocation = 82
    RULE_oC_ImplicitProcedureInvocation = 83
    RULE_oC_ProcedureResultField = 84
    RULE_oC_ProcedureName = 85
    RULE_oC_Namespace = 86
    RULE_oC_Variable = 87
    RULE_oC_Literal = 88
    RULE_oC_BooleanLiteral = 89
    RULE_oC_NumberLiteral = 90
    RULE_oC_IntegerLiteral = 91
    RULE_oC_DoubleLiteral = 92
    RULE_oC_ListLiteral = 93
    RULE_oC_MapLiteral = 94
    RULE_oC_PropertyKeyName = 95
    RULE_oC_Parameter = 96
    RULE_oC_SchemaName = 97
    RULE_oC_ReservedWord = 98
    RULE_oC_SymbolicName = 99
    RULE_oC_LeftArrowHead = 100
    RULE_oC_RightArrowHead = 101
    RULE_oC_Dash = 102

    ruleNames =  [ "oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_UpdatingClause", "oC_ReadingClause", "oC_Match", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_SetItem", "oC_Delete", "oC_Remove", "oC_RemoveItem", 
                   "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", 
                   "oC_RelationshipsPattern", "oC_NodePattern", "oC_PatternElementChain", 
                   "oC_RelationshipPattern", "oC_RelationshipDetail", "oC_Properties", 
                   "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
                   "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", 
                   "oC_PropertyExpression", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringListNullPredicateExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", 
                   "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", 
                   "oC_NonArithmeticOperatorExpression", "oC_ListOperatorExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_Variable", "oC_Literal", 
                   "oC_BooleanLiteral", "oC_NumberLiteral", "oC_IntegerLiteral", 
                   "oC_DoubleLiteral", "oC_ListLiteral", "oC_MapLiteral", 
                   "oC_PropertyKeyName", "oC_Parameter", "oC_SchemaName", 
                   "oC_ReservedWord", "oC_SymbolicName", "oC_LeftArrowHead", 
                   "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    UNION=46
    ALL=47
    OPTIONAL=48
    MATCH=49
    UNWIND=50
    AS=51
    MERGE=52
    ON=53
    CREATE=54
    SET=55
    DETACH=56
    DELETE=57
    REMOVE=58
    CALL=59
    YIELD=60
    WITH=61
    RETURN=62
    DISTINCT=63
    ORDER=64
    BY=65
    L_SKIP=66
    LIMIT=67
    ASCENDING=68
    ASC=69
    DESCENDING=70
    DESC=71
    WHERE=72
    OR=73
    XOR=74
    AND=75
    NOT=76
    STARTS=77
    ENDS=78
    CONTAINS=79
    IN=80
    IS=81
    NULL=82
    COUNT=83
    CASE=84
    ELSE=85
    END=86
    WHEN=87
    THEN=88
    ANY=89
    NONE=90
    SINGLE=91
    EXISTS=92
    TRUE=93
    FALSE=94
    HexInteger=95
    DecimalInteger=96
    OctalInteger=97
    HexLetter=98
    HexDigit=99
    Digit=100
    NonZeroDigit=101
    NonZeroOctDigit=102
    OctDigit=103
    ZeroDigit=104
    ExponentDecimalReal=105
    RegularDecimalReal=106
    StringLiteral=107
    EscapedChar=108
    CONSTRAINT=109
    DO=110
    FOR=111
    REQUIRE=112
    UNIQUE=113
    MANDATORY=114
    SCALAR=115
    OF=116
    ADD=117
    DROP=118
    FILTER=119
    EXTRACT=120
    UnescapedSymbolicName=121
    IdentifierStart=122
    IdentifierPart=123
    EscapedSymbolicName=124
    SP=125
    WHITESPACE=126
    Comment=127

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(CypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(CypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = CypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 206
                self.match(CypherParser.SP)


            self.state = 209
            self.oC_Statement()
            self.state = 214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 210
                    self.match(CypherParser.SP)


                self.state = 213
                self.match(CypherParser.T__0)


            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 216
                self.match(CypherParser.SP)


            self.state = 219
            self.match(CypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(CypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = CypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(CypherParser.OC_StandaloneCallContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = CypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_Query)
        try:
            self.state = 225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 223
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 224
                self.oC_StandaloneCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = CypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.oC_SingleQuery()
            self.state = 234
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 228
                        self.match(CypherParser.SP)


                    self.state = 231
                    self.oC_Union() 
                self.state = 236
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = CypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 237
                self.match(CypherParser.UNION)
                self.state = 238
                self.match(CypherParser.SP)
                self.state = 239
                self.match(CypherParser.ALL)
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 240
                    self.match(CypherParser.SP)


                self.state = 243
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.match(CypherParser.UNION)
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 245
                    self.match(CypherParser.SP)


                self.state = 248
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = CypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_oC_SingleQuery)
        try:
            self.state = 253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(CypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = CypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.OPTIONAL) | (1 << CypherParser.MATCH) | (1 << CypherParser.UNWIND) | (1 << CypherParser.CALL))) != 0):
                    self.state = 255
                    self.oC_ReadingClause()
                    self.state = 257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 256
                        self.match(CypherParser.SP)


                    self.state = 263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 264
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.OPTIONAL) | (1 << CypherParser.MATCH) | (1 << CypherParser.UNWIND) | (1 << CypherParser.CALL))) != 0):
                    self.state = 265
                    self.oC_ReadingClause()
                    self.state = 267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 266
                        self.match(CypherParser.SP)


                    self.state = 273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 274
                self.oC_UpdatingClause()
                self.state = 281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 276
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 275
                            self.match(CypherParser.SP)


                        self.state = 278
                        self.oC_UpdatingClause() 
                    self.state = 283
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                self.state = 288
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 284
                        self.match(CypherParser.SP)


                    self.state = 287
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_WithContext,i)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = CypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_oC_MultiPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.OPTIONAL) | (1 << CypherParser.MATCH) | (1 << CypherParser.UNWIND) | (1 << CypherParser.CALL))) != 0):
                        self.state = 292
                        self.oC_ReadingClause()
                        self.state = 294
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 293
                            self.match(CypherParser.SP)


                        self.state = 300
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.MERGE) | (1 << CypherParser.CREATE) | (1 << CypherParser.SET) | (1 << CypherParser.DETACH) | (1 << CypherParser.DELETE) | (1 << CypherParser.REMOVE))) != 0):
                        self.state = 301
                        self.oC_UpdatingClause()
                        self.state = 303
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 302
                            self.match(CypherParser.SP)


                        self.state = 309
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 310
                    self.oC_With()
                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 311
                        self.match(CypherParser.SP)



                else:
                    raise NoViableAltException(self)
                self.state = 316 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 318
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(CypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(CypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(CypherParser.OC_RemoveContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = CypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_UpdatingClause)
        try:
            self.state = 325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.CREATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.oC_Create()
                pass
            elif token in [CypherParser.MERGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.oC_Merge()
                pass
            elif token in [CypherParser.DETACH, CypherParser.DELETE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 322
                self.oC_Delete()
                pass
            elif token in [CypherParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 323
                self.oC_Set()
                pass
            elif token in [CypherParser.REMOVE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 324
                self.oC_Remove()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(CypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(CypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(CypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = CypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_oC_ReadingClause)
        try:
            self.state = 330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.OPTIONAL, CypherParser.MATCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 327
                self.oC_Match()
                pass
            elif token in [CypherParser.UNWIND]:
                self.enterOuterAlt(localctx, 2)
                self.state = 328
                self.oC_Unwind()
                pass
            elif token in [CypherParser.CALL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 329
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = CypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.OPTIONAL:
                self.state = 332
                self.match(CypherParser.OPTIONAL)
                self.state = 333
                self.match(CypherParser.SP)


            self.state = 336
            self.match(CypherParser.MATCH)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 337
                self.match(CypherParser.SP)


            self.state = 340
            self.oC_Pattern()
            self.state = 345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 341
                    self.match(CypherParser.SP)


                self.state = 344
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = CypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(CypherParser.UNWIND)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 348
                self.match(CypherParser.SP)


            self.state = 351
            self.oC_Expression()
            self.state = 352
            self.match(CypherParser.SP)
            self.state = 353
            self.match(CypherParser.AS)
            self.state = 354
            self.match(CypherParser.SP)
            self.state = 355
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = CypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(CypherParser.MERGE)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 358
                self.match(CypherParser.SP)


            self.state = 361
            self.oC_PatternPart()
            self.state = 366
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 362
                    self.match(CypherParser.SP)
                    self.state = 363
                    self.oC_MergeAction() 
                self.state = 368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = CypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_oC_MergeAction)
        try:
            self.state = 379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 369
                self.match(CypherParser.ON)
                self.state = 370
                self.match(CypherParser.SP)
                self.state = 371
                self.match(CypherParser.MATCH)
                self.state = 372
                self.match(CypherParser.SP)
                self.state = 373
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.match(CypherParser.ON)
                self.state = 375
                self.match(CypherParser.SP)
                self.state = 376
                self.match(CypherParser.CREATE)
                self.state = 377
                self.match(CypherParser.SP)
                self.state = 378
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = CypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(CypherParser.CREATE)
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 382
                self.match(CypherParser.SP)


            self.state = 385
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = CypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(CypherParser.SET)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 388
                self.match(CypherParser.SP)


            self.state = 391
            self.oC_SetItem()
            self.state = 402
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 392
                        self.match(CypherParser.SP)


                    self.state = 395
                    self.match(CypherParser.T__1)
                    self.state = 397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 396
                        self.match(CypherParser.SP)


                    self.state = 399
                    self.oC_SetItem() 
                self.state = 404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = CypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.oC_PropertyExpression()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 406
                    self.match(CypherParser.SP)


                self.state = 409
                self.match(CypherParser.T__2)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 410
                    self.match(CypherParser.SP)


                self.state = 413
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 415
                self.oC_Variable()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 416
                    self.match(CypherParser.SP)


                self.state = 419
                self.match(CypherParser.T__2)
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 420
                    self.match(CypherParser.SP)


                self.state = 423
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 425
                self.oC_Variable()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 426
                    self.match(CypherParser.SP)


                self.state = 429
                self.match(CypherParser.T__3)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 430
                    self.match(CypherParser.SP)


                self.state = 433
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 435
                self.oC_Variable()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 436
                    self.match(CypherParser.SP)


                self.state = 439
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = CypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.DETACH:
                self.state = 443
                self.match(CypherParser.DETACH)
                self.state = 444
                self.match(CypherParser.SP)


            self.state = 447
            self.match(CypherParser.DELETE)
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 448
                self.match(CypherParser.SP)


            self.state = 451
            self.oC_Expression()
            self.state = 462
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 452
                        self.match(CypherParser.SP)


                    self.state = 455
                    self.match(CypherParser.T__1)
                    self.state = 457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 456
                        self.match(CypherParser.SP)


                    self.state = 459
                    self.oC_Expression() 
                self.state = 464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = CypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(CypherParser.REMOVE)
            self.state = 466
            self.match(CypherParser.SP)
            self.state = 467
            self.oC_RemoveItem()
            self.state = 478
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 468
                        self.match(CypherParser.SP)


                    self.state = 471
                    self.match(CypherParser.T__1)
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 472
                        self.match(CypherParser.SP)


                    self.state = 475
                    self.oC_RemoveItem() 
                self.state = 480
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = CypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_RemoveItem)
        try:
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 481
                self.oC_Variable()
                self.state = 482
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = CypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(CypherParser.CALL)
            self.state = 488
            self.match(CypherParser.SP)
            self.state = 489
            self.oC_ExplicitProcedureInvocation()
            self.state = 496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 490
                    self.match(CypherParser.SP)


                self.state = 493
                self.match(CypherParser.YIELD)
                self.state = 494
                self.match(CypherParser.SP)
                self.state = 495
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = CypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(CypherParser.CALL)
            self.state = 499
            self.match(CypherParser.SP)
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 500
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 501
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 504
                    self.match(CypherParser.SP)


                self.state = 507
                self.match(CypherParser.YIELD)
                self.state = 508
                self.match(CypherParser.SP)
                self.state = 511
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CypherParser.T__4]:
                    self.state = 509
                    self.match(CypherParser.T__4)
                    pass
                elif token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                    self.state = 510
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = CypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.oC_YieldItem()
            self.state = 526
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 516
                        self.match(CypherParser.SP)


                    self.state = 519
                    self.match(CypherParser.T__1)
                    self.state = 521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 520
                        self.match(CypherParser.SP)


                    self.state = 523
                    self.oC_YieldItem() 
                self.state = 528
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 529
                    self.match(CypherParser.SP)


                self.state = 532
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = CypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 535
                self.oC_ProcedureResultField()
                self.state = 536
                self.match(CypherParser.SP)
                self.state = 537
                self.match(CypherParser.AS)
                self.state = 538
                self.match(CypherParser.SP)


            self.state = 542
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = CypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(CypherParser.WITH)
            self.state = 545
            self.oC_ProjectionBody()
            self.state = 550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 546
                    self.match(CypherParser.SP)


                self.state = 549
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = CypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(CypherParser.RETURN)
            self.state = 553
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(CypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(CypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(CypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = CypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 555
                    self.match(CypherParser.SP)


                self.state = 558
                self.match(CypherParser.DISTINCT)


            self.state = 561
            self.match(CypherParser.SP)
            self.state = 562
            self.oC_ProjectionItems()
            self.state = 565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 563
                self.match(CypherParser.SP)
                self.state = 564
                self.oC_Order()


            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 567
                self.match(CypherParser.SP)
                self.state = 568
                self.oC_Skip()


            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 571
                self.match(CypherParser.SP)
                self.state = 572
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = CypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 575
                self.match(CypherParser.T__4)
                self.state = 586
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 577
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 576
                            self.match(CypherParser.SP)


                        self.state = 579
                        self.match(CypherParser.T__1)
                        self.state = 581
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 580
                            self.match(CypherParser.SP)


                        self.state = 583
                        self.oC_ProjectionItem() 
                    self.state = 588
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                pass
            elif token in [CypherParser.T__5, CypherParser.T__7, CypherParser.T__17, CypherParser.T__18, CypherParser.T__23, CypherParser.T__25, CypherParser.ALL, CypherParser.NOT, CypherParser.NULL, CypherParser.COUNT, CypherParser.CASE, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.EXISTS, CypherParser.TRUE, CypherParser.FALSE, CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger, CypherParser.HexLetter, CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal, CypherParser.StringLiteral, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                self.oC_ProjectionItem()
                self.state = 600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 590
                            self.match(CypherParser.SP)


                        self.state = 593
                        self.match(CypherParser.T__1)
                        self.state = 595
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 594
                            self.match(CypherParser.SP)


                        self.state = 597
                        self.oC_ProjectionItem() 
                    self.state = 602
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = CypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_ProjectionItem)
        try:
            self.state = 612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 605
                self.oC_Expression()
                self.state = 606
                self.match(CypherParser.SP)
                self.state = 607
                self.match(CypherParser.AS)
                self.state = 608
                self.match(CypherParser.SP)
                self.state = 609
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = CypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(CypherParser.ORDER)
            self.state = 615
            self.match(CypherParser.SP)
            self.state = 616
            self.match(CypherParser.BY)
            self.state = 617
            self.match(CypherParser.SP)
            self.state = 618
            self.oC_SortItem()
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.T__1:
                self.state = 619
                self.match(CypherParser.T__1)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 620
                    self.match(CypherParser.SP)


                self.state = 623
                self.oC_SortItem()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = CypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(CypherParser.L_SKIP)
            self.state = 630
            self.match(CypherParser.SP)
            self.state = 631
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = CypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(CypherParser.LIMIT)
            self.state = 634
            self.match(CypherParser.SP)
            self.state = 635
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = CypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.oC_Expression()
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 638
                    self.match(CypherParser.SP)


                self.state = 641
                _la = self._input.LA(1)
                if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (CypherParser.ASCENDING - 68)) | (1 << (CypherParser.ASC - 68)) | (1 << (CypherParser.DESCENDING - 68)) | (1 << (CypherParser.DESC - 68)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = CypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(CypherParser.WHERE)
            self.state = 645
            self.match(CypherParser.SP)
            self.state = 646
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = CypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.oC_PatternPart()
            self.state = 659
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 649
                        self.match(CypherParser.SP)


                    self.state = 652
                    self.match(CypherParser.T__1)
                    self.state = 654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 653
                        self.match(CypherParser.SP)


                    self.state = 656
                    self.oC_PatternPart() 
                self.state = 661
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_AnonymousPatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = CypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 673
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.oC_Variable()
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 663
                    self.match(CypherParser.SP)


                self.state = 666
                self.match(CypherParser.T__2)
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 667
                    self.match(CypherParser.SP)


                self.state = 670
                self.oC_AnonymousPatternPart()
                pass
            elif token in [CypherParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 672
                self.oC_AnonymousPatternPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = CypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = CypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 677
                self.oC_NodePattern()
                self.state = 684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 679
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 678
                            self.match(CypherParser.SP)


                        self.state = 681
                        self.oC_PatternElementChain() 
                    self.state = 686
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 687
                self.match(CypherParser.T__5)
                self.state = 688
                self.oC_PatternElement()
                self.state = 689
                self.match(CypherParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = CypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.oC_NodePattern()
            self.state = 698 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 694
                        self.match(CypherParser.SP)


                    self.state = 697
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 700 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = CypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(CypherParser.T__5)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 703
                self.match(CypherParser.SP)


            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)) | (1 << (CypherParser.FILTER - 83)) | (1 << (CypherParser.EXTRACT - 83)) | (1 << (CypherParser.UnescapedSymbolicName - 83)) | (1 << (CypherParser.EscapedSymbolicName - 83)))) != 0):
                self.state = 706
                self.oC_Variable()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 707
                    self.match(CypherParser.SP)




            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__9:
                self.state = 712
                self.oC_NodeLabels()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 713
                    self.match(CypherParser.SP)




            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__23 or _la==CypherParser.T__25:
                self.state = 718
                self.oC_Properties()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 719
                    self.match(CypherParser.SP)




            self.state = 724
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = CypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.oC_RelationshipPattern()
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 727
                self.match(CypherParser.SP)


            self.state = 730
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = CypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.oC_LeftArrowHead()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 733
                    self.match(CypherParser.SP)


                self.state = 736
                self.oC_Dash()
                self.state = 738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 737
                    self.match(CypherParser.SP)


                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__7:
                    self.state = 740
                    self.oC_RelationshipDetail()


                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 743
                    self.match(CypherParser.SP)


                self.state = 746
                self.oC_Dash()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 747
                    self.match(CypherParser.SP)


                self.state = 750
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.oC_LeftArrowHead()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 753
                    self.match(CypherParser.SP)


                self.state = 756
                self.oC_Dash()
                self.state = 758
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 757
                    self.match(CypherParser.SP)


                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__7:
                    self.state = 760
                    self.oC_RelationshipDetail()


                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 763
                    self.match(CypherParser.SP)


                self.state = 766
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 768
                self.oC_Dash()
                self.state = 770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 769
                    self.match(CypherParser.SP)


                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__7:
                    self.state = 772
                    self.oC_RelationshipDetail()


                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 775
                    self.match(CypherParser.SP)


                self.state = 778
                self.oC_Dash()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 779
                    self.match(CypherParser.SP)


                self.state = 782
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 784
                self.oC_Dash()
                self.state = 786
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 785
                    self.match(CypherParser.SP)


                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__7:
                    self.state = 788
                    self.oC_RelationshipDetail()


                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 791
                    self.match(CypherParser.SP)


                self.state = 794
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_RangeLiteralContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = CypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(CypherParser.T__7)
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 799
                self.match(CypherParser.SP)


            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)) | (1 << (CypherParser.FILTER - 83)) | (1 << (CypherParser.EXTRACT - 83)) | (1 << (CypherParser.UnescapedSymbolicName - 83)) | (1 << (CypherParser.EscapedSymbolicName - 83)))) != 0):
                self.state = 802
                self.oC_Variable()
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 803
                    self.match(CypherParser.SP)




            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__9:
                self.state = 808
                self.oC_RelationshipTypes()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 809
                    self.match(CypherParser.SP)




            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__4:
                self.state = 814
                self.oC_RangeLiteral()


            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__23 or _la==CypherParser.T__25:
                self.state = 817
                self.oC_Properties()
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 818
                    self.match(CypherParser.SP)




            self.state = 823
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = CypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_Properties)
        try:
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.oC_MapLiteral()
                pass
            elif token in [CypherParser.T__25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = CypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(CypherParser.T__9)
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 830
                self.match(CypherParser.SP)


            self.state = 833
            self.oC_RelTypeName()
            self.state = 847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 834
                        self.match(CypherParser.SP)


                    self.state = 837
                    self.match(CypherParser.T__10)
                    self.state = 839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.T__9:
                        self.state = 838
                        self.match(CypherParser.T__9)


                    self.state = 842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 841
                        self.match(CypherParser.SP)


                    self.state = 844
                    self.oC_RelTypeName() 
                self.state = 849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = CypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.oC_NodeLabel()
            self.state = 857
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 851
                        self.match(CypherParser.SP)


                    self.state = 854
                    self.oC_NodeLabel() 
                self.state = 859
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(CypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = CypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(CypherParser.T__9)
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 861
                self.match(CypherParser.SP)


            self.state = 864
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = CypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(CypherParser.T__4)
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 867
                self.match(CypherParser.SP)


            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (CypherParser.HexInteger - 95)) | (1 << (CypherParser.DecimalInteger - 95)) | (1 << (CypherParser.OctalInteger - 95)))) != 0):
                self.state = 870
                self.oC_IntegerLiteral()
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 871
                    self.match(CypherParser.SP)




            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__11:
                self.state = 876
                self.match(CypherParser.T__11)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 877
                    self.match(CypherParser.SP)


                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (CypherParser.HexInteger - 95)) | (1 << (CypherParser.DecimalInteger - 95)) | (1 << (CypherParser.OctalInteger - 95)))) != 0):
                    self.state = 880
                    self.oC_IntegerLiteral()
                    self.state = 882
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 881
                        self.match(CypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = CypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = CypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = CypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.oC_Atom()
            self.state = 897 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 893
                        self.match(CypherParser.SP)


                    self.state = 896
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 899 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = CypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.OR)
            else:
                return self.getToken(CypherParser.OR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = CypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.oC_XorExpression()
            self.state = 910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 904
                    self.match(CypherParser.SP)
                    self.state = 905
                    self.match(CypherParser.OR)
                    self.state = 906
                    self.match(CypherParser.SP)
                    self.state = 907
                    self.oC_XorExpression() 
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.XOR)
            else:
                return self.getToken(CypherParser.XOR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = CypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.oC_AndExpression()
            self.state = 920
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 914
                    self.match(CypherParser.SP)
                    self.state = 915
                    self.match(CypherParser.XOR)
                    self.state = 916
                    self.match(CypherParser.SP)
                    self.state = 917
                    self.oC_AndExpression() 
                self.state = 922
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.AND)
            else:
                return self.getToken(CypherParser.AND, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = CypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.oC_NotExpression()
            self.state = 930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 924
                    self.match(CypherParser.SP)
                    self.state = 925
                    self.match(CypherParser.AND)
                    self.state = 926
                    self.match(CypherParser.SP)
                    self.state = 927
                    self.oC_NotExpression() 
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.NOT)
            else:
                return self.getToken(CypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = CypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.NOT:
                self.state = 933
                self.match(CypherParser.NOT)
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 934
                    self.match(CypherParser.SP)


                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 942
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = CypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.oC_StringListNullPredicateExpression()
            self.state = 951
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,157,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 945
                        self.match(CypherParser.SP)


                    self.state = 948
                    self.oC_PartialComparisonExpression() 
                self.state = 953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,157,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = CypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 984
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.match(CypherParser.T__2)
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 955
                    self.match(CypherParser.SP)


                self.state = 958
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [CypherParser.T__12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 959
                self.match(CypherParser.T__12)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 960
                    self.match(CypherParser.SP)


                self.state = 963
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [CypherParser.T__13]:
                self.enterOuterAlt(localctx, 3)
                self.state = 964
                self.match(CypherParser.T__13)
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 965
                    self.match(CypherParser.SP)


                self.state = 968
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [CypherParser.T__14]:
                self.enterOuterAlt(localctx, 4)
                self.state = 969
                self.match(CypherParser.T__14)
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 970
                    self.match(CypherParser.SP)


                self.state = 973
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [CypherParser.T__15]:
                self.enterOuterAlt(localctx, 5)
                self.state = 974
                self.match(CypherParser.T__15)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 975
                    self.match(CypherParser.SP)


                self.state = 978
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [CypherParser.T__16]:
                self.enterOuterAlt(localctx, 6)
                self.state = 979
                self.match(CypherParser.T__16)
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 980
                    self.match(CypherParser.SP)


                self.state = 983
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def oC_StringPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_StringPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_StringPredicateExpressionContext,i)


        def oC_ListPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ListPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ListPredicateExpressionContext,i)


        def oC_NullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NullPredicateExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = CypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.oC_AddOrSubtractExpression()
            self.state = 992
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 990
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                    if la_ == 1:
                        self.state = 987
                        self.oC_StringPredicateExpression()
                        pass

                    elif la_ == 2:
                        self.state = 988
                        self.oC_ListPredicateExpression()
                        pass

                    elif la_ == 3:
                        self.state = 989
                        self.oC_NullPredicateExpression()
                        pass

             
                self.state = 994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = CypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 995
                self.match(CypherParser.SP)
                self.state = 996
                self.match(CypherParser.STARTS)
                self.state = 997
                self.match(CypherParser.SP)
                self.state = 998
                self.match(CypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 999
                self.match(CypherParser.SP)
                self.state = 1000
                self.match(CypherParser.ENDS)
                self.state = 1001
                self.match(CypherParser.SP)
                self.state = 1002
                self.match(CypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1003
                self.match(CypherParser.SP)
                self.state = 1004
                self.match(CypherParser.CONTAINS)
                pass


            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1007
                self.match(CypherParser.SP)


            self.state = 1010
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = CypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(CypherParser.SP)
            self.state = 1013
            self.match(CypherParser.IN)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1014
                self.match(CypherParser.SP)


            self.state = 1017
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = CypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1019
                self.match(CypherParser.SP)
                self.state = 1020
                self.match(CypherParser.IS)
                self.state = 1021
                self.match(CypherParser.SP)
                self.state = 1022
                self.match(CypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.match(CypherParser.SP)
                self.state = 1024
                self.match(CypherParser.IS)
                self.state = 1025
                self.match(CypherParser.SP)
                self.state = 1026
                self.match(CypherParser.NOT)
                self.state = 1027
                self.match(CypherParser.SP)
                self.state = 1028
                self.match(CypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = CypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1050
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1048
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        self.state = 1033
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1032
                            self.match(CypherParser.SP)


                        self.state = 1035
                        self.match(CypherParser.T__17)
                        self.state = 1037
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1036
                            self.match(CypherParser.SP)


                        self.state = 1039
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1041
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1040
                            self.match(CypherParser.SP)


                        self.state = 1043
                        self.match(CypherParser.T__18)
                        self.state = 1045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1044
                            self.match(CypherParser.SP)


                        self.state = 1047
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1052
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = CypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.oC_PowerOfExpression()
            self.state = 1080
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1078
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                    if la_ == 1:
                        self.state = 1055
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1054
                            self.match(CypherParser.SP)


                        self.state = 1057
                        self.match(CypherParser.T__4)
                        self.state = 1059
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1058
                            self.match(CypherParser.SP)


                        self.state = 1061
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1063
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1062
                            self.match(CypherParser.SP)


                        self.state = 1065
                        self.match(CypherParser.T__19)
                        self.state = 1067
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1066
                            self.match(CypherParser.SP)


                        self.state = 1069
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1071
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1070
                            self.match(CypherParser.SP)


                        self.state = 1073
                        self.match(CypherParser.T__20)
                        self.state = 1075
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1074
                            self.match(CypherParser.SP)


                        self.state = 1077
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1082
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = CypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1094
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1084
                        self.match(CypherParser.SP)


                    self.state = 1087
                    self.match(CypherParser.T__21)
                    self.state = 1089
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1088
                        self.match(CypherParser.SP)


                    self.state = 1091
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NonArithmeticOperatorExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_NonArithmeticOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = CypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__5, CypherParser.T__7, CypherParser.T__23, CypherParser.T__25, CypherParser.ALL, CypherParser.NULL, CypherParser.COUNT, CypherParser.CASE, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.EXISTS, CypherParser.TRUE, CypherParser.FALSE, CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger, CypherParser.HexLetter, CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal, CypherParser.StringLiteral, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097
                self.oC_NonArithmeticOperatorExpression()
                pass
            elif token in [CypherParser.T__17, CypherParser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                _la = self._input.LA(1)
                if not(_la==CypherParser.T__17 or _la==CypherParser.T__18):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1099
                    self.match(CypherParser.SP)


                self.state = 1102
                self.oC_NonArithmeticOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NonArithmeticOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_ListOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ListOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ListOperatorExpressionContext,i)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NonArithmeticOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NonArithmeticOperatorExpression" ):
                listener.enterOC_NonArithmeticOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NonArithmeticOperatorExpression" ):
                listener.exitOC_NonArithmeticOperatorExpression(self)




    def oC_NonArithmeticOperatorExpression(self):

        localctx = CypherParser.OC_NonArithmeticOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_NonArithmeticOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.oC_Atom()
            self.state = 1116
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1114
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                    if la_ == 1:
                        self.state = 1107
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1106
                            self.match(CypherParser.SP)


                        self.state = 1109
                        self.oC_ListOperatorExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1111
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1110
                            self.match(CypherParser.SP)


                        self.state = 1113
                        self.oC_PropertyLookup()
                        pass

             
                self.state = 1118
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

            self.state = 1123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1119
                    self.match(CypherParser.SP)


                self.state = 1122
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = CypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_ListOperatorExpression)
        self._la = 0 # Token type
        try:
            self.state = 1138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.match(CypherParser.T__7)
                self.state = 1126
                self.oC_Expression()
                self.state = 1127
                self.match(CypherParser.T__8)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1129
                self.match(CypherParser.T__7)
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__17) | (1 << CypherParser.T__18) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25) | (1 << CypherParser.ALL))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CypherParser.NOT - 76)) | (1 << (CypherParser.NULL - 76)) | (1 << (CypherParser.COUNT - 76)) | (1 << (CypherParser.CASE - 76)) | (1 << (CypherParser.ANY - 76)) | (1 << (CypherParser.NONE - 76)) | (1 << (CypherParser.SINGLE - 76)) | (1 << (CypherParser.EXISTS - 76)) | (1 << (CypherParser.TRUE - 76)) | (1 << (CypherParser.FALSE - 76)) | (1 << (CypherParser.HexInteger - 76)) | (1 << (CypherParser.DecimalInteger - 76)) | (1 << (CypherParser.OctalInteger - 76)) | (1 << (CypherParser.HexLetter - 76)) | (1 << (CypherParser.ExponentDecimalReal - 76)) | (1 << (CypherParser.RegularDecimalReal - 76)) | (1 << (CypherParser.StringLiteral - 76)) | (1 << (CypherParser.FILTER - 76)) | (1 << (CypherParser.EXTRACT - 76)) | (1 << (CypherParser.UnescapedSymbolicName - 76)) | (1 << (CypherParser.EscapedSymbolicName - 76)))) != 0):
                    self.state = 1130
                    self.oC_Expression()


                self.state = 1133
                self.match(CypherParser.T__11)
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__17) | (1 << CypherParser.T__18) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25) | (1 << CypherParser.ALL))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CypherParser.NOT - 76)) | (1 << (CypherParser.NULL - 76)) | (1 << (CypherParser.COUNT - 76)) | (1 << (CypherParser.CASE - 76)) | (1 << (CypherParser.ANY - 76)) | (1 << (CypherParser.NONE - 76)) | (1 << (CypherParser.SINGLE - 76)) | (1 << (CypherParser.EXISTS - 76)) | (1 << (CypherParser.TRUE - 76)) | (1 << (CypherParser.FALSE - 76)) | (1 << (CypherParser.HexInteger - 76)) | (1 << (CypherParser.DecimalInteger - 76)) | (1 << (CypherParser.OctalInteger - 76)) | (1 << (CypherParser.HexLetter - 76)) | (1 << (CypherParser.ExponentDecimalReal - 76)) | (1 << (CypherParser.RegularDecimalReal - 76)) | (1 << (CypherParser.StringLiteral - 76)) | (1 << (CypherParser.FILTER - 76)) | (1 << (CypherParser.EXTRACT - 76)) | (1 << (CypherParser.UnescapedSymbolicName - 76)) | (1 << (CypherParser.EscapedSymbolicName - 76)))) != 0):
                    self.state = 1134
                    self.oC_Expression()


                self.state = 1137
                self.match(CypherParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = CypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(CypherParser.T__22)
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1141
                self.match(CypherParser.SP)


            self.state = 1144
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(CypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(CypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(CypherParser.OC_ExistentialSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = CypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1146
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1147
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1148
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1149
                self.match(CypherParser.COUNT)
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1150
                    self.match(CypherParser.SP)


                self.state = 1153
                self.match(CypherParser.T__5)
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1154
                    self.match(CypherParser.SP)


                self.state = 1157
                self.match(CypherParser.T__4)
                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1158
                    self.match(CypherParser.SP)


                self.state = 1161
                self.match(CypherParser.T__6)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1162
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1163
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1164
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1165
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1166
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1167
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1168
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1169
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = CypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1172
                self.match(CypherParser.CASE)
                self.state = 1177 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1174
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1173
                            self.match(CypherParser.SP)


                        self.state = 1176
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1179 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1181
                self.match(CypherParser.CASE)
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1182
                    self.match(CypherParser.SP)


                self.state = 1185
                self.oC_Expression()
                self.state = 1190 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1186
                            self.match(CypherParser.SP)


                        self.state = 1189
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1192 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

                pass


            self.state = 1204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1196
                    self.match(CypherParser.SP)


                self.state = 1199
                self.match(CypherParser.ELSE)
                self.state = 1201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1200
                    self.match(CypherParser.SP)


                self.state = 1203
                self.oC_Expression()


            self.state = 1207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1206
                self.match(CypherParser.SP)


            self.state = 1209
            self.match(CypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = CypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(CypherParser.WHEN)
            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1212
                self.match(CypherParser.SP)


            self.state = 1215
            self.oC_Expression()
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1216
                self.match(CypherParser.SP)


            self.state = 1219
            self.match(CypherParser.THEN)
            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1220
                self.match(CypherParser.SP)


            self.state = 1223
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = CypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(CypherParser.T__7)
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1226
                self.match(CypherParser.SP)


            self.state = 1229
            self.oC_FilterExpression()
            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1230
                    self.match(CypherParser.SP)


                self.state = 1233
                self.match(CypherParser.T__10)
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1234
                    self.match(CypherParser.SP)


                self.state = 1237
                self.oC_Expression()


            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1240
                self.match(CypherParser.SP)


            self.state = 1243
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = CypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(CypherParser.T__7)
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1246
                self.match(CypherParser.SP)


            self.state = 1257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)) | (1 << (CypherParser.FILTER - 83)) | (1 << (CypherParser.EXTRACT - 83)) | (1 << (CypherParser.UnescapedSymbolicName - 83)) | (1 << (CypherParser.EscapedSymbolicName - 83)))) != 0):
                self.state = 1249
                self.oC_Variable()
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1250
                    self.match(CypherParser.SP)


                self.state = 1253
                self.match(CypherParser.T__2)
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1254
                    self.match(CypherParser.SP)




            self.state = 1259
            self.oC_RelationshipsPattern()
            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1260
                self.match(CypherParser.SP)


            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.WHERE:
                self.state = 1263
                self.oC_Where()
                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1264
                    self.match(CypherParser.SP)




            self.state = 1269
            self.match(CypherParser.T__10)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1270
                self.match(CypherParser.SP)


            self.state = 1273
            self.oC_Expression()
            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1274
                self.match(CypherParser.SP)


            self.state = 1277
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = CypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1279
                self.match(CypherParser.ALL)
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1280
                    self.match(CypherParser.SP)


                self.state = 1283
                self.match(CypherParser.T__5)
                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1284
                    self.match(CypherParser.SP)


                self.state = 1287
                self.oC_FilterExpression()
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1288
                    self.match(CypherParser.SP)


                self.state = 1291
                self.match(CypherParser.T__6)
                pass
            elif token in [CypherParser.ANY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1293
                self.match(CypherParser.ANY)
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1294
                    self.match(CypherParser.SP)


                self.state = 1297
                self.match(CypherParser.T__5)
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1298
                    self.match(CypherParser.SP)


                self.state = 1301
                self.oC_FilterExpression()
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1302
                    self.match(CypherParser.SP)


                self.state = 1305
                self.match(CypherParser.T__6)
                pass
            elif token in [CypherParser.NONE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1307
                self.match(CypherParser.NONE)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1308
                    self.match(CypherParser.SP)


                self.state = 1311
                self.match(CypherParser.T__5)
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1312
                    self.match(CypherParser.SP)


                self.state = 1315
                self.oC_FilterExpression()
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1316
                    self.match(CypherParser.SP)


                self.state = 1319
                self.match(CypherParser.T__6)
                pass
            elif token in [CypherParser.SINGLE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1321
                self.match(CypherParser.SINGLE)
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1322
                    self.match(CypherParser.SP)


                self.state = 1325
                self.match(CypherParser.T__5)
                self.state = 1327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1326
                    self.match(CypherParser.SP)


                self.state = 1329
                self.oC_FilterExpression()
                self.state = 1331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1330
                    self.match(CypherParser.SP)


                self.state = 1333
                self.match(CypherParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(CypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = CypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.oC_IdInColl()
            self.state = 1342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1338
                    self.match(CypherParser.SP)


                self.state = 1341
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = CypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = CypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(CypherParser.T__5)
            self.state = 1348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1347
                self.match(CypherParser.SP)


            self.state = 1350
            self.oC_Expression()
            self.state = 1352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1351
                self.match(CypherParser.SP)


            self.state = 1354
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = CypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.oC_Variable()
            self.state = 1357
            self.match(CypherParser.SP)
            self.state = 1358
            self.match(CypherParser.IN)
            self.state = 1359
            self.match(CypherParser.SP)
            self.state = 1360
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = CypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self.oC_FunctionName()
            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1363
                self.match(CypherParser.SP)


            self.state = 1366
            self.match(CypherParser.T__5)
            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1367
                self.match(CypherParser.SP)


            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.DISTINCT:
                self.state = 1370
                self.match(CypherParser.DISTINCT)
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1371
                    self.match(CypherParser.SP)




            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__17) | (1 << CypherParser.T__18) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25) | (1 << CypherParser.ALL))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CypherParser.NOT - 76)) | (1 << (CypherParser.NULL - 76)) | (1 << (CypherParser.COUNT - 76)) | (1 << (CypherParser.CASE - 76)) | (1 << (CypherParser.ANY - 76)) | (1 << (CypherParser.NONE - 76)) | (1 << (CypherParser.SINGLE - 76)) | (1 << (CypherParser.EXISTS - 76)) | (1 << (CypherParser.TRUE - 76)) | (1 << (CypherParser.FALSE - 76)) | (1 << (CypherParser.HexInteger - 76)) | (1 << (CypherParser.DecimalInteger - 76)) | (1 << (CypherParser.OctalInteger - 76)) | (1 << (CypherParser.HexLetter - 76)) | (1 << (CypherParser.ExponentDecimalReal - 76)) | (1 << (CypherParser.RegularDecimalReal - 76)) | (1 << (CypherParser.StringLiteral - 76)) | (1 << (CypherParser.FILTER - 76)) | (1 << (CypherParser.EXTRACT - 76)) | (1 << (CypherParser.UnescapedSymbolicName - 76)) | (1 << (CypherParser.EscapedSymbolicName - 76)))) != 0):
                self.state = 1376
                self.oC_Expression()
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1377
                    self.match(CypherParser.SP)


                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__1:
                    self.state = 1380
                    self.match(CypherParser.T__1)
                    self.state = 1382
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1381
                        self.match(CypherParser.SP)


                    self.state = 1384
                    self.oC_Expression()
                    self.state = 1386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1385
                        self.match(CypherParser.SP)


                    self.state = 1392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1395
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = CypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self.oC_Namespace()
            self.state = 1398
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = CypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(CypherParser.EXISTS)
            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1401
                self.match(CypherParser.SP)


            self.state = 1404
            self.match(CypherParser.T__23)
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1405
                self.match(CypherParser.SP)


            self.state = 1416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.OPTIONAL, CypherParser.MATCH, CypherParser.UNWIND, CypherParser.MERGE, CypherParser.CREATE, CypherParser.SET, CypherParser.DETACH, CypherParser.DELETE, CypherParser.REMOVE, CypherParser.CALL, CypherParser.WITH, CypherParser.RETURN]:
                self.state = 1408
                self.oC_RegularQuery()
                pass
            elif token in [CypherParser.T__5, CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.state = 1409
                self.oC_Pattern()
                self.state = 1414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 1411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1410
                        self.match(CypherParser.SP)


                    self.state = 1413
                    self.oC_Where()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1418
                self.match(CypherParser.SP)


            self.state = 1421
            self.match(CypherParser.T__24)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self.oC_ProcedureName()
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1424
                self.match(CypherParser.SP)


            self.state = 1427
            self.match(CypherParser.T__5)
            self.state = 1429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1428
                self.match(CypherParser.SP)


            self.state = 1448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__17) | (1 << CypherParser.T__18) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25) | (1 << CypherParser.ALL))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CypherParser.NOT - 76)) | (1 << (CypherParser.NULL - 76)) | (1 << (CypherParser.COUNT - 76)) | (1 << (CypherParser.CASE - 76)) | (1 << (CypherParser.ANY - 76)) | (1 << (CypherParser.NONE - 76)) | (1 << (CypherParser.SINGLE - 76)) | (1 << (CypherParser.EXISTS - 76)) | (1 << (CypherParser.TRUE - 76)) | (1 << (CypherParser.FALSE - 76)) | (1 << (CypherParser.HexInteger - 76)) | (1 << (CypherParser.DecimalInteger - 76)) | (1 << (CypherParser.OctalInteger - 76)) | (1 << (CypherParser.HexLetter - 76)) | (1 << (CypherParser.ExponentDecimalReal - 76)) | (1 << (CypherParser.RegularDecimalReal - 76)) | (1 << (CypherParser.StringLiteral - 76)) | (1 << (CypherParser.FILTER - 76)) | (1 << (CypherParser.EXTRACT - 76)) | (1 << (CypherParser.UnescapedSymbolicName - 76)) | (1 << (CypherParser.EscapedSymbolicName - 76)))) != 0):
                self.state = 1431
                self.oC_Expression()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1432
                    self.match(CypherParser.SP)


                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__1:
                    self.state = 1435
                    self.match(CypherParser.T__1)
                    self.state = 1437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1436
                        self.match(CypherParser.SP)


                    self.state = 1439
                    self.oC_Expression()
                    self.state = 1441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1440
                        self.match(CypherParser.SP)


                    self.state = 1447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1450
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = CypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = CypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self.oC_Namespace()
            self.state = 1457
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = CypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1459
                    self.oC_SymbolicName()
                    self.state = 1460
                    self.match(CypherParser.T__22) 
                self.state = 1466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = CypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = CypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_Literal)
        try:
            self.state = 1475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.TRUE, CypherParser.FALSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1469
                self.oC_BooleanLiteral()
                pass
            elif token in [CypherParser.NULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1470
                self.match(CypherParser.NULL)
                pass
            elif token in [CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger, CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1471
                self.oC_NumberLiteral()
                pass
            elif token in [CypherParser.StringLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1472
                self.match(CypherParser.StringLiteral)
                pass
            elif token in [CypherParser.T__7]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1473
                self.oC_ListLiteral()
                pass
            elif token in [CypherParser.T__23]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1474
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = CypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            _la = self._input.LA(1)
            if not(_la==CypherParser.TRUE or _la==CypherParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = CypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1479
                self.oC_DoubleLiteral()
                pass
            elif token in [CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1480
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(CypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(CypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = CypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            _la = self._input.LA(1)
            if not(((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (CypherParser.HexInteger - 95)) | (1 << (CypherParser.DecimalInteger - 95)) | (1 << (CypherParser.OctalInteger - 95)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(CypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(CypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = CypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            _la = self._input.LA(1)
            if not(_la==CypherParser.ExponentDecimalReal or _la==CypherParser.RegularDecimalReal):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = CypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.match(CypherParser.T__7)
            self.state = 1489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1488
                self.match(CypherParser.SP)


            self.state = 1508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__17) | (1 << CypherParser.T__18) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25) | (1 << CypherParser.ALL))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CypherParser.NOT - 76)) | (1 << (CypherParser.NULL - 76)) | (1 << (CypherParser.COUNT - 76)) | (1 << (CypherParser.CASE - 76)) | (1 << (CypherParser.ANY - 76)) | (1 << (CypherParser.NONE - 76)) | (1 << (CypherParser.SINGLE - 76)) | (1 << (CypherParser.EXISTS - 76)) | (1 << (CypherParser.TRUE - 76)) | (1 << (CypherParser.FALSE - 76)) | (1 << (CypherParser.HexInteger - 76)) | (1 << (CypherParser.DecimalInteger - 76)) | (1 << (CypherParser.OctalInteger - 76)) | (1 << (CypherParser.HexLetter - 76)) | (1 << (CypherParser.ExponentDecimalReal - 76)) | (1 << (CypherParser.RegularDecimalReal - 76)) | (1 << (CypherParser.StringLiteral - 76)) | (1 << (CypherParser.FILTER - 76)) | (1 << (CypherParser.EXTRACT - 76)) | (1 << (CypherParser.UnescapedSymbolicName - 76)) | (1 << (CypherParser.EscapedSymbolicName - 76)))) != 0):
                self.state = 1491
                self.oC_Expression()
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1492
                    self.match(CypherParser.SP)


                self.state = 1505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__1:
                    self.state = 1495
                    self.match(CypherParser.T__1)
                    self.state = 1497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1496
                        self.match(CypherParser.SP)


                    self.state = 1499
                    self.oC_Expression()
                    self.state = 1501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1500
                        self.match(CypherParser.SP)


                    self.state = 1507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1510
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = CypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(CypherParser.T__23)
            self.state = 1514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1513
                self.match(CypherParser.SP)


            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.UNION) | (1 << CypherParser.ALL) | (1 << CypherParser.OPTIONAL) | (1 << CypherParser.MATCH) | (1 << CypherParser.UNWIND) | (1 << CypherParser.AS) | (1 << CypherParser.MERGE) | (1 << CypherParser.ON) | (1 << CypherParser.CREATE) | (1 << CypherParser.SET) | (1 << CypherParser.DETACH) | (1 << CypherParser.DELETE) | (1 << CypherParser.REMOVE) | (1 << CypherParser.WITH) | (1 << CypherParser.RETURN) | (1 << CypherParser.DISTINCT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)) | (1 << (CypherParser.CONTAINS - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.IS - 64)) | (1 << (CypherParser.NULL - 64)) | (1 << (CypherParser.COUNT - 64)) | (1 << (CypherParser.CASE - 64)) | (1 << (CypherParser.ELSE - 64)) | (1 << (CypherParser.END - 64)) | (1 << (CypherParser.WHEN - 64)) | (1 << (CypherParser.THEN - 64)) | (1 << (CypherParser.ANY - 64)) | (1 << (CypherParser.NONE - 64)) | (1 << (CypherParser.SINGLE - 64)) | (1 << (CypherParser.EXISTS - 64)) | (1 << (CypherParser.TRUE - 64)) | (1 << (CypherParser.FALSE - 64)) | (1 << (CypherParser.HexLetter - 64)) | (1 << (CypherParser.CONSTRAINT - 64)) | (1 << (CypherParser.DO - 64)) | (1 << (CypherParser.FOR - 64)) | (1 << (CypherParser.REQUIRE - 64)) | (1 << (CypherParser.UNIQUE - 64)) | (1 << (CypherParser.MANDATORY - 64)) | (1 << (CypherParser.SCALAR - 64)) | (1 << (CypherParser.OF - 64)) | (1 << (CypherParser.ADD - 64)) | (1 << (CypherParser.DROP - 64)) | (1 << (CypherParser.FILTER - 64)) | (1 << (CypherParser.EXTRACT - 64)) | (1 << (CypherParser.UnescapedSymbolicName - 64)) | (1 << (CypherParser.EscapedSymbolicName - 64)))) != 0):
                self.state = 1516
                self.oC_PropertyKeyName()
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1517
                    self.match(CypherParser.SP)


                self.state = 1520
                self.match(CypherParser.T__9)
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1521
                    self.match(CypherParser.SP)


                self.state = 1524
                self.oC_Expression()
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1525
                    self.match(CypherParser.SP)


                self.state = 1546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__1:
                    self.state = 1528
                    self.match(CypherParser.T__1)
                    self.state = 1530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1529
                        self.match(CypherParser.SP)


                    self.state = 1532
                    self.oC_PropertyKeyName()
                    self.state = 1534
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1533
                        self.match(CypherParser.SP)


                    self.state = 1536
                    self.match(CypherParser.T__9)
                    self.state = 1538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1537
                        self.match(CypherParser.SP)


                    self.state = 1540
                    self.oC_Expression()
                    self.state = 1542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1541
                        self.match(CypherParser.SP)


                    self.state = 1548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1551
            self.match(CypherParser.T__24)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = CypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = CypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self.match(CypherParser.T__25)
            self.state = 1558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.state = 1556
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.DecimalInteger]:
                self.state = 1557
                self.match(CypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(CypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = CypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_SchemaName)
        try:
            self.state = 1562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1560
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.UNION, CypherParser.ALL, CypherParser.OPTIONAL, CypherParser.MATCH, CypherParser.UNWIND, CypherParser.AS, CypherParser.MERGE, CypherParser.ON, CypherParser.CREATE, CypherParser.SET, CypherParser.DETACH, CypherParser.DELETE, CypherParser.REMOVE, CypherParser.WITH, CypherParser.RETURN, CypherParser.DISTINCT, CypherParser.ORDER, CypherParser.BY, CypherParser.L_SKIP, CypherParser.LIMIT, CypherParser.ASCENDING, CypherParser.ASC, CypherParser.DESCENDING, CypherParser.DESC, CypherParser.WHERE, CypherParser.OR, CypherParser.XOR, CypherParser.AND, CypherParser.NOT, CypherParser.STARTS, CypherParser.ENDS, CypherParser.CONTAINS, CypherParser.IN, CypherParser.IS, CypherParser.NULL, CypherParser.CASE, CypherParser.ELSE, CypherParser.END, CypherParser.WHEN, CypherParser.THEN, CypherParser.EXISTS, CypherParser.TRUE, CypherParser.FALSE, CypherParser.CONSTRAINT, CypherParser.DO, CypherParser.FOR, CypherParser.REQUIRE, CypherParser.UNIQUE, CypherParser.MANDATORY, CypherParser.SCALAR, CypherParser.OF, CypherParser.ADD, CypherParser.DROP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.oC_ReservedWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(CypherParser.AND, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def OR(self):
            return self.getToken(CypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(CypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(CypherParser.DO, 0)

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(CypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(CypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(CypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(CypherParser.OF, 0)

        def ADD(self):
            return self.getToken(CypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = CypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1564
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.UNION) | (1 << CypherParser.ALL) | (1 << CypherParser.OPTIONAL) | (1 << CypherParser.MATCH) | (1 << CypherParser.UNWIND) | (1 << CypherParser.AS) | (1 << CypherParser.MERGE) | (1 << CypherParser.ON) | (1 << CypherParser.CREATE) | (1 << CypherParser.SET) | (1 << CypherParser.DETACH) | (1 << CypherParser.DELETE) | (1 << CypherParser.REMOVE) | (1 << CypherParser.WITH) | (1 << CypherParser.RETURN) | (1 << CypherParser.DISTINCT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)) | (1 << (CypherParser.CONTAINS - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.IS - 64)) | (1 << (CypherParser.NULL - 64)) | (1 << (CypherParser.CASE - 64)) | (1 << (CypherParser.ELSE - 64)) | (1 << (CypherParser.END - 64)) | (1 << (CypherParser.WHEN - 64)) | (1 << (CypherParser.THEN - 64)) | (1 << (CypherParser.EXISTS - 64)) | (1 << (CypherParser.TRUE - 64)) | (1 << (CypherParser.FALSE - 64)) | (1 << (CypherParser.CONSTRAINT - 64)) | (1 << (CypherParser.DO - 64)) | (1 << (CypherParser.FOR - 64)) | (1 << (CypherParser.REQUIRE - 64)) | (1 << (CypherParser.UNIQUE - 64)) | (1 << (CypherParser.MANDATORY - 64)) | (1 << (CypherParser.SCALAR - 64)) | (1 << (CypherParser.OF - 64)) | (1 << (CypherParser.ADD - 64)) | (1 << (CypherParser.DROP - 64)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(CypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(CypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(CypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(CypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(CypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = CypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            _la = self._input.LA(1)
            if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)) | (1 << (CypherParser.FILTER - 83)) | (1 << (CypherParser.EXTRACT - 83)) | (1 << (CypherParser.UnescapedSymbolicName - 83)) | (1 << (CypherParser.EscapedSymbolicName - 83)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = CypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1568
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__13) | (1 << CypherParser.T__26) | (1 << CypherParser.T__27) | (1 << CypherParser.T__28) | (1 << CypherParser.T__29))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = CypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__14) | (1 << CypherParser.T__30) | (1 << CypherParser.T__31) | (1 << CypherParser.T__32) | (1 << CypherParser.T__33))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = CypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__18) | (1 << CypherParser.T__34) | (1 << CypherParser.T__35) | (1 << CypherParser.T__36) | (1 << CypherParser.T__37) | (1 << CypherParser.T__38) | (1 << CypherParser.T__39) | (1 << CypherParser.T__40) | (1 << CypherParser.T__41) | (1 << CypherParser.T__42) | (1 << CypherParser.T__43) | (1 << CypherParser.T__44))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





